; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\lcd_driver.o --depend=.\obj\lcd_driver.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\ -I..\..\CMSIS -I..\..\Driver\Include -I..\..\Driver\Include\Driver -I..\..\Driver\Include\NUC1xx-LB_002 -I..\..\Driver\Include\System -IG:\Keil\ARM\INC -IG:\Keil\ARM\INC\Nuvoton\NUC1xx --omf_browse=.\obj\lcd_driver.crf ..\LCD_Driver.c]
                          THUMB

                          AREA ||i.Disable_Buzzer||, CODE, READONLY, ALIGN=1

                  Disable_Buzzer PROC
;;;113    
;;;114    void Disable_Buzzer(void)
000000  b510              PUSH     {r4,lr}
;;;115    {
;;;116     	DrvGPIO_Open(E_GPB,11, E_IO_OUTPUT);	
000002  2201              MOVS     r2,#1
000004  210b              MOVS     r1,#0xb
000006  4610              MOV      r0,r2
000008  f7fffffe          BL       DrvGPIO_Open
;;;117    	DrvGPIO_SetBit(E_GPB,11);	
00000c  210b              MOVS     r1,#0xb
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       DrvGPIO_SetBit
;;;118    }
000014  bd10              POP      {r4,pc}
;;;119    
                          ENDP


                          AREA ||i.Initial_panel||, CODE, READONLY, ALIGN=2

                  Initial_panel PROC
;;;21     
;;;22     void Initial_panel(void)
000000  4883              LDR      r0,|L2.528|
;;;23     {
;;;24     	
;;;25     	SYSCLK->APBCLK.SPI3_EN  =1;			 //enable spi function 
000002  6880              LDR      r0,[r0,#8]
000004  2101              MOVS     r1,#1
000006  03c9              LSLS     r1,r1,#15
000008  4388              BICS     r0,r0,r1
00000a  1840              ADDS     r0,r0,r1
00000c  4980              LDR      r1,|L2.528|
00000e  6088              STR      r0,[r1,#8]
;;;26     	SYS->IPRSTC2.SPI3_RST   =1;			 //reset spi function
000010  2005              MOVS     r0,#5
000012  0700              LSLS     r0,r0,#28
000014  68c0              LDR      r0,[r0,#0xc]
000016  0189              LSLS     r1,r1,#6
000018  4388              BICS     r0,r0,r1
00001a  1840              ADDS     r0,r0,r1
00001c  2105              MOVS     r1,#5
00001e  0709              LSLS     r1,r1,#28
000020  60c8              STR      r0,[r1,#0xc]
;;;27     	SYS->IPRSTC2.SPI3_RST   =0;
000022  4608              MOV      r0,r1
000024  68c0              LDR      r0,[r0,#0xc]
000026  2101              MOVS     r1,#1
000028  03c9              LSLS     r1,r1,#15
00002a  4388              BICS     r0,r0,r1
00002c  2105              MOVS     r1,#5
00002e  0709              LSLS     r1,r1,#28
000030  60c8              STR      r0,[r1,#0xc]
;;;28     
;;;29     	/* set GPIO to SPI mode*/
;;;30     	SYS->GPDMFP.SPI3_SS0 	=1;
000032  4608              MOV      r0,r1
000034  6bc0              LDR      r0,[r0,#0x3c]
000036  21ff              MOVS     r1,#0xff
000038  3101              ADDS     r1,#1
00003a  4388              BICS     r0,r0,r1
00003c  1840              ADDS     r0,r0,r1
00003e  2105              MOVS     r1,#5
000040  0709              LSLS     r1,r1,#28
000042  63c8              STR      r0,[r1,#0x3c]
;;;31     	SYS->GPDMFP.SPI3_CLK 	=1;
000044  4608              MOV      r0,r1
000046  6bc0              LDR      r0,[r0,#0x3c]
000048  2101              MOVS     r1,#1
00004a  0249              LSLS     r1,r1,#9
00004c  4388              BICS     r0,r0,r1
00004e  1840              ADDS     r0,r0,r1
000050  2105              MOVS     r1,#5
000052  0709              LSLS     r1,r1,#28
000054  63c8              STR      r0,[r1,#0x3c]
;;;32     	//SYS->GPDMFP.SPI3_MISO0 	=1;
;;;33     	SYS->GPDMFP.SPI3_MOSI0 	=1;
000056  4608              MOV      r0,r1
000058  6bc0              LDR      r0,[r0,#0x3c]
00005a  2101              MOVS     r1,#1
00005c  02c9              LSLS     r1,r1,#11
00005e  4388              BICS     r0,r0,r1
000060  1840              ADDS     r0,r0,r1
000062  2105              MOVS     r1,#5
000064  0709              LSLS     r1,r1,#28
000066  63c8              STR      r0,[r1,#0x3c]
;;;34     
;;;35     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.CLKP = 1;							//CLKP HIGH IDLE
000068  486a              LDR      r0,|L2.532|
00006a  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
00006c  6800              LDR      r0,[r0,#0]
00006e  2101              MOVS     r1,#1
000070  02c9              LSLS     r1,r1,#11
000072  4388              BICS     r0,r0,r1
000074  1840              ADDS     r0,r0,r1
000076  4967              LDR      r1,|L2.532|
000078  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
00007a  6008              STR      r0,[r1,#0]
;;;36     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.TX_BIT_LEN = 9;						//TX LEGTH 9
00007c  4865              LDR      r0,|L2.532|
00007e  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000080  6800              LDR      r0,[r0,#0]
000082  21f8              MOVS     r1,#0xf8
000084  4388              BICS     r0,r0,r1
000086  3048              ADDS     r0,r0,#0x48
000088  4962              LDR      r1,|L2.532|
00008a  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
00008c  6008              STR      r0,[r1,#0]
;;;37     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.TX_NEG = 1;							//SET TX_NEG
00008e  4861              LDR      r0,|L2.532|
000090  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000092  6800              LDR      r0,[r0,#0]
000094  2104              MOVS     r1,#4
000096  4388              BICS     r0,r0,r1
000098  1d00              ADDS     r0,r0,#4
00009a  495e              LDR      r1,|L2.532|
00009c  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
00009e  6008              STR      r0,[r1,#0]
;;;38     	SPI_PORT[eDRVSPI_PORT3]->DIVIDER.DIVIDER=0X03;					    //SET DIV
0000a0  485c              LDR      r0,|L2.532|
0000a2  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0000a4  6840              LDR      r0,[r0,#4]
0000a6  0c00              LSRS     r0,r0,#16
0000a8  0400              LSLS     r0,r0,#16
0000aa  1cc0              ADDS     r0,r0,#3
0000ac  4959              LDR      r1,|L2.532|
0000ae  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0000b0  6048              STR      r0,[r1,#4]
;;;39     
;;;40     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;									//ENABLE SLAVE SELECT
0000b2  4858              LDR      r0,|L2.532|
0000b4  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0000b6  6880              LDR      r0,[r0,#8]
0000b8  0880              LSRS     r0,r0,#2
0000ba  0080              LSLS     r0,r0,#2
0000bc  1c40              ADDS     r0,r0,#1
0000be  4955              LDR      r1,|L2.532|
0000c0  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0000c2  6088              STR      r0,[r1,#8]
;;;41     	// Set BR
;;;42     	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0xEB;
0000c4  20eb              MOVS     r0,#0xeb
0000c6  4953              LDR      r1,|L2.532|
0000c8  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0000ca  6208              STR      r0,[r1,#0x20]
;;;43     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
0000cc  4851              LDR      r0,|L2.532|
0000ce  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0000d0  6800              LDR      r0,[r0,#0]
0000d2  0840              LSRS     r0,r0,#1
0000d4  0040              LSLS     r0,r0,#1
0000d6  1c40              ADDS     r0,r0,#1
0000d8  494e              LDR      r1,|L2.532|
0000da  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0000dc  6008              STR      r0,[r1,#0]
;;;44         while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );
0000de  bf00              NOP      
                  |L2.224|
0000e0  484c              LDR      r0,|L2.532|
0000e2  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0000e4  6800              LDR      r0,[r0,#0]
0000e6  07c0              LSLS     r0,r0,#31
0000e8  0fc0              LSRS     r0,r0,#31
0000ea  2801              CMP      r0,#1
0000ec  d0f8              BEQ      |L2.224|
;;;45     	// Set PM
;;;46     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
0000ee  4849              LDR      r0,|L2.532|
0000f0  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0000f2  6880              LDR      r0,[r0,#8]
0000f4  0880              LSRS     r0,r0,#2
0000f6  0080              LSLS     r0,r0,#2
0000f8  4946              LDR      r1,|L2.532|
0000fa  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0000fc  6088              STR      r0,[r1,#8]
;;;47     
;;;48     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;
0000fe  4845              LDR      r0,|L2.532|
000100  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000102  6880              LDR      r0,[r0,#8]
000104  0880              LSRS     r0,r0,#2
000106  0080              LSLS     r0,r0,#2
000108  1c40              ADDS     r0,r0,#1
00010a  4942              LDR      r1,|L2.532|
00010c  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
00010e  6088              STR      r0,[r1,#8]
;;;49     	//outp32(SPI3_Tx0, 0x81);	
;;;50     	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0x81;
000110  2081              MOVS     r0,#0x81
000112  4940              LDR      r1,|L2.532|
000114  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000116  6208              STR      r0,[r1,#0x20]
;;;51     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
000118  483e              LDR      r0,|L2.532|
00011a  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
00011c  6800              LDR      r0,[r0,#0]
00011e  0840              LSRS     r0,r0,#1
000120  0040              LSLS     r0,r0,#1
000122  1c40              ADDS     r0,r0,#1
000124  493b              LDR      r1,|L2.532|
000126  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000128  6008              STR      r0,[r1,#0]
;;;52         while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );
00012a  bf00              NOP      
                  |L2.300|
00012c  4839              LDR      r0,|L2.532|
00012e  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000130  6800              LDR      r0,[r0,#0]
000132  07c0              LSLS     r0,r0,#31
000134  0fc0              LSRS     r0,r0,#31
000136  2801              CMP      r0,#1
000138  d0f8              BEQ      |L2.300|
;;;53     	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0xa0;
00013a  20a0              MOVS     r0,#0xa0
00013c  4935              LDR      r1,|L2.532|
00013e  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000140  6208              STR      r0,[r1,#0x20]
;;;54     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
000142  4834              LDR      r0,|L2.532|
000144  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000146  6800              LDR      r0,[r0,#0]
000148  0840              LSRS     r0,r0,#1
00014a  0040              LSLS     r0,r0,#1
00014c  1c40              ADDS     r0,r0,#1
00014e  4931              LDR      r1,|L2.532|
000150  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000152  6008              STR      r0,[r1,#0]
;;;55         while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );
000154  bf00              NOP      
                  |L2.342|
000156  482f              LDR      r0,|L2.532|
000158  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
00015a  6800              LDR      r0,[r0,#0]
00015c  07c0              LSLS     r0,r0,#31
00015e  0fc0              LSRS     r0,r0,#31
000160  2801              CMP      r0,#1
000162  d0f8              BEQ      |L2.342|
;;;56     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
000164  482b              LDR      r0,|L2.532|
000166  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000168  6880              LDR      r0,[r0,#8]
00016a  0880              LSRS     r0,r0,#2
00016c  0080              LSLS     r0,r0,#2
00016e  4929              LDR      r1,|L2.532|
000170  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000172  6088              STR      r0,[r1,#8]
;;;57     
;;;58     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;
000174  4827              LDR      r0,|L2.532|
000176  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000178  6880              LDR      r0,[r0,#8]
00017a  0880              LSRS     r0,r0,#2
00017c  0080              LSLS     r0,r0,#2
00017e  1c40              ADDS     r0,r0,#1
000180  4924              LDR      r1,|L2.532|
000182  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000184  6088              STR      r0,[r1,#8]
;;;59     	//outp32(SPI3_Tx0, 0xC0);
;;;60     	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0xc0;	
000186  20c0              MOVS     r0,#0xc0
000188  4922              LDR      r1,|L2.532|
00018a  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
00018c  6208              STR      r0,[r1,#0x20]
;;;61     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
00018e  4821              LDR      r0,|L2.532|
000190  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000192  6800              LDR      r0,[r0,#0]
000194  0840              LSRS     r0,r0,#1
000196  0040              LSLS     r0,r0,#1
000198  1c40              ADDS     r0,r0,#1
00019a  491e              LDR      r1,|L2.532|
00019c  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
00019e  6008              STR      r0,[r1,#0]
;;;62         while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );
0001a0  bf00              NOP      
                  |L2.418|
0001a2  481c              LDR      r0,|L2.532|
0001a4  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0001a6  6800              LDR      r0,[r0,#0]
0001a8  07c0              LSLS     r0,r0,#31
0001aa  0fc0              LSRS     r0,r0,#31
0001ac  2801              CMP      r0,#1
0001ae  d0f8              BEQ      |L2.418|
;;;63     	// Set Display Enable
;;;64     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
0001b0  4818              LDR      r0,|L2.532|
0001b2  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0001b4  6880              LDR      r0,[r0,#8]
0001b6  0880              LSRS     r0,r0,#2
0001b8  0080              LSLS     r0,r0,#2
0001ba  4916              LDR      r1,|L2.532|
0001bc  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0001be  6088              STR      r0,[r1,#8]
;;;65     
;;;66     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;
0001c0  4814              LDR      r0,|L2.532|
0001c2  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0001c4  6880              LDR      r0,[r0,#8]
0001c6  0880              LSRS     r0,r0,#2
0001c8  0080              LSLS     r0,r0,#2
0001ca  1c40              ADDS     r0,r0,#1
0001cc  4911              LDR      r1,|L2.532|
0001ce  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0001d0  6088              STR      r0,[r1,#8]
;;;67     	SPI_PORT[eDRVSPI_PORT3]->TX[0] = 0XAF;
0001d2  20af              MOVS     r0,#0xaf
0001d4  490f              LDR      r1,|L2.532|
0001d6  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0001d8  6208              STR      r0,[r1,#0x20]
;;;68     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
0001da  480e              LDR      r0,|L2.532|
0001dc  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0001de  6800              LDR      r0,[r0,#0]
0001e0  0840              LSRS     r0,r0,#1
0001e2  0040              LSLS     r0,r0,#1
0001e4  1c40              ADDS     r0,r0,#1
0001e6  490b              LDR      r1,|L2.532|
0001e8  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
0001ea  6008              STR      r0,[r1,#0]
;;;69         while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );
0001ec  bf00              NOP      
                  |L2.494|
0001ee  4809              LDR      r0,|L2.532|
0001f0  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
0001f2  6800              LDR      r0,[r0,#0]
0001f4  07c0              LSLS     r0,r0,#31
0001f6  0fc0              LSRS     r0,r0,#31
0001f8  2801              CMP      r0,#1
0001fa  d0f8              BEQ      |L2.494|
;;;70     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
0001fc  4805              LDR      r0,|L2.532|
0001fe  68c0              LDR      r0,[r0,#0xc]  ; SPI_PORT
000200  6880              LDR      r0,[r0,#8]
000202  0880              LSRS     r0,r0,#2
000204  0080              LSLS     r0,r0,#2
000206  4903              LDR      r1,|L2.532|
000208  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
00020a  6088              STR      r0,[r1,#8]
;;;71     }
00020c  4770              BX       lr
;;;72     
                          ENDP

00020e  0000              DCW      0x0000
                  |L2.528|
                          DCD      0x50000200
                  |L2.532|
                          DCD      SPI_PORT

                          AREA ||i.SetPACA||, CODE, READONLY, ALIGN=2

                  SetPACA PROC
;;;88     //*******************************
;;;89     void SetPACA(unsigned char PA, unsigned char CA)
000000  4a3b              LDR      r2,|L3.240|
;;;90     {
;;;91     	// Set PA
;;;92     
;;;93     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1; 	
000002  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000004  6892              LDR      r2,[r2,#8]
000006  0892              LSRS     r2,r2,#2
000008  0092              LSLS     r2,r2,#2
00000a  1c52              ADDS     r2,r2,#1
00000c  4b38              LDR      r3,|L3.240|
00000e  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
000010  609a              STR      r2,[r3,#8]
;;;94     	SPI_PORT[eDRVSPI_PORT3]->TX[0] = 0xB0 | PA;	
000012  22b0              MOVS     r2,#0xb0
000014  4302              ORRS     r2,r2,r0
000016  4b36              LDR      r3,|L3.240|
000018  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00001a  621a              STR      r2,[r3,#0x20]
;;;95     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
00001c  4a34              LDR      r2,|L3.240|
00001e  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000020  6812              LDR      r2,[r2,#0]
000022  0852              LSRS     r2,r2,#1
000024  0052              LSLS     r2,r2,#1
000026  1c52              ADDS     r2,r2,#1
000028  4b31              LDR      r3,|L3.240|
00002a  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00002c  601a              STR      r2,[r3,#0]
;;;96         while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );	 //check data out?
00002e  bf00              NOP      
                  |L3.48|
000030  4a2f              LDR      r2,|L3.240|
000032  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000034  6812              LDR      r2,[r2,#0]
000036  07d2              LSLS     r2,r2,#31
000038  0fd2              LSRS     r2,r2,#31
00003a  2a01              CMP      r2,#1
00003c  d0f8              BEQ      |L3.48|
;;;97     	// Set CA MSB
;;;98     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
00003e  4a2c              LDR      r2,|L3.240|
000040  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000042  6892              LDR      r2,[r2,#8]
000044  0892              LSRS     r2,r2,#2
000046  0092              LSLS     r2,r2,#2
000048  4b29              LDR      r3,|L3.240|
00004a  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00004c  609a              STR      r2,[r3,#8]
;;;99     
;;;100    	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;	
00004e  4a28              LDR      r2,|L3.240|
000050  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000052  6892              LDR      r2,[r2,#8]
000054  0892              LSRS     r2,r2,#2
000056  0092              LSLS     r2,r2,#2
000058  1c52              ADDS     r2,r2,#1
00005a  4b25              LDR      r3,|L3.240|
00005c  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00005e  609a              STR      r2,[r3,#8]
;;;101    	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0x10 |(CA>>4)&0xF;
000060  110a              ASRS     r2,r1,#4
000062  2310              MOVS     r3,#0x10
000064  431a              ORRS     r2,r2,r3
000066  4b22              LDR      r3,|L3.240|
000068  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00006a  621a              STR      r2,[r3,#0x20]
;;;102    	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
00006c  4a20              LDR      r2,|L3.240|
00006e  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000070  6812              LDR      r2,[r2,#0]
000072  0852              LSRS     r2,r2,#1
000074  0052              LSLS     r2,r2,#1
000076  1c52              ADDS     r2,r2,#1
000078  4b1d              LDR      r3,|L3.240|
00007a  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00007c  601a              STR      r2,[r3,#0]
;;;103        while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );	  //check data out?
00007e  bf00              NOP      
                  |L3.128|
000080  4a1b              LDR      r2,|L3.240|
000082  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000084  6812              LDR      r2,[r2,#0]
000086  07d2              LSLS     r2,r2,#31
000088  0fd2              LSRS     r2,r2,#31
00008a  2a01              CMP      r2,#1
00008c  d0f8              BEQ      |L3.128|
;;;104     	// Set CA LSB
;;;105    	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
00008e  4a18              LDR      r2,|L3.240|
000090  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000092  6892              LDR      r2,[r2,#8]
000094  0892              LSRS     r2,r2,#2
000096  0092              LSLS     r2,r2,#2
000098  4b15              LDR      r3,|L3.240|
00009a  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
00009c  609a              STR      r2,[r3,#8]
;;;106    
;;;107    	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;
00009e  4a14              LDR      r2,|L3.240|
0000a0  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
0000a2  6892              LDR      r2,[r2,#8]
0000a4  0892              LSRS     r2,r2,#2
0000a6  0092              LSLS     r2,r2,#2
0000a8  1c52              ADDS     r2,r2,#1
0000aa  4b11              LDR      r3,|L3.240|
0000ac  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
0000ae  609a              STR      r2,[r3,#8]
;;;108    	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0x00 | (CA & 0xF);		
0000b0  070a              LSLS     r2,r1,#28
0000b2  0f12              LSRS     r2,r2,#28
0000b4  4b0e              LDR      r3,|L3.240|
0000b6  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
0000b8  621a              STR      r2,[r3,#0x20]
;;;109    	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
0000ba  4a0d              LDR      r2,|L3.240|
0000bc  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
0000be  6812              LDR      r2,[r2,#0]
0000c0  0852              LSRS     r2,r2,#1
0000c2  0052              LSLS     r2,r2,#1
0000c4  1c52              ADDS     r2,r2,#1
0000c6  4b0a              LDR      r3,|L3.240|
0000c8  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
0000ca  601a              STR      r2,[r3,#0]
;;;110        while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 );	  //check data out?
0000cc  bf00              NOP      
                  |L3.206|
0000ce  4a08              LDR      r2,|L3.240|
0000d0  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
0000d2  6812              LDR      r2,[r2,#0]
0000d4  07d2              LSLS     r2,r2,#31
0000d6  0fd2              LSRS     r2,r2,#31
0000d8  2a01              CMP      r2,#1
0000da  d0f8              BEQ      |L3.206|
;;;111    	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
0000dc  4a04              LDR      r2,|L3.240|
0000de  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
0000e0  6892              LDR      r2,[r2,#8]
0000e2  0892              LSRS     r2,r2,#2
0000e4  0092              LSLS     r2,r2,#2
0000e6  4b02              LDR      r3,|L3.240|
0000e8  68db              LDR      r3,[r3,#0xc]  ; SPI_PORT
0000ea  609a              STR      r2,[r3,#8]
;;;112    }
0000ec  4770              BX       lr
;;;113    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L3.240|
                          DCD      SPI_PORT

                          AREA ||i.Show_Word||, CODE, READONLY, ALIGN=2

                  Show_Word PROC
;;;121    
;;;122    void Show_Word(unsigned char x, unsigned char y,unsigned char ascii_word)
000000  b5fc              PUSH     {r2-r7,lr}
;;;123    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;124    int i=0,k=0;
000008  2400              MOVS     r4,#0
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;125    	unsigned char temp;	  
;;;126    	  k=(ascii_word-32)*16;	  
00000e  4638              MOV      r0,r7
000010  3820              SUBS     r0,r0,#0x20
000012  0100              LSLS     r0,r0,#4
000014  9001              STR      r0,[sp,#4]
;;;127    	  
;;;128    	  for(i=0;i<8;i++)
000016  bf00              NOP      
000018  e011              B        |L4.62|
                  |L4.26|
;;;129    	  {
;;;130    	  SetPACA((x*2),(129-(y*8)-i));
00001a  00f2              LSLS     r2,r6,#3
00001c  2381              MOVS     r3,#0x81
00001e  1a9a              SUBS     r2,r3,r2
000020  1b12              SUBS     r2,r2,r4
000022  b2d1              UXTB     r1,r2
000024  066a              LSLS     r2,r5,#25
000026  0e10              LSRS     r0,r2,#24
000028  f7fffffe          BL       SetPACA
;;;131    	  temp=Ascii[k+i];	 
00002c  9801              LDR      r0,[sp,#4]
00002e  1900              ADDS     r0,r0,r4
000030  4910              LDR      r1,|L4.116|
000032  5c08              LDRB     r0,[r1,r0]
000034  9000              STR      r0,[sp,#0]
;;;132          WriteData(temp);
000036  9800              LDR      r0,[sp,#0]
000038  f7fffffe          BL       WriteData
00003c  1c64              ADDS     r4,r4,#1              ;128
                  |L4.62|
00003e  2c08              CMP      r4,#8                 ;128
000040  dbeb              BLT      |L4.26|
;;;133    	  }
;;;134    
;;;135          for(i=0;i<8;i++)
000042  2400              MOVS     r4,#0
000044  e013              B        |L4.110|
                  |L4.70|
;;;136    	  {
;;;137    	  SetPACA((x*2)+1,(129-(y*8)-i));	 
000046  00f2              LSLS     r2,r6,#3
000048  2381              MOVS     r3,#0x81
00004a  1a9a              SUBS     r2,r3,r2
00004c  1b12              SUBS     r2,r2,r4
00004e  b2d1              UXTB     r1,r2
000050  006a              LSLS     r2,r5,#1
000052  1c52              ADDS     r2,r2,#1
000054  b2d0              UXTB     r0,r2
000056  f7fffffe          BL       SetPACA
;;;138          temp=Ascii[k+i+8];
00005a  9801              LDR      r0,[sp,#4]
00005c  1900              ADDS     r0,r0,r4
00005e  3008              ADDS     r0,r0,#8
000060  4904              LDR      r1,|L4.116|
000062  5c08              LDRB     r0,[r1,r0]
000064  9000              STR      r0,[sp,#0]
;;;139    	  WriteData(temp);
000066  9800              LDR      r0,[sp,#0]
000068  f7fffffe          BL       WriteData
00006c  1c64              ADDS     r4,r4,#1              ;135
                  |L4.110|
00006e  2c08              CMP      r4,#8                 ;135
000070  dbe9              BLT      |L4.70|
;;;140    	  }
;;;141    }
000072  bdfc              POP      {r2-r7,pc}
;;;142    
                          ENDP

                  |L4.116|
                          DCD      Ascii

                          AREA ||i.SysTimerDelay||, CODE, READONLY, ALIGN=2

                  SysTimerDelay PROC
;;;11     
;;;12     void SysTimerDelay(uint32_t us)
000000  2116              MOVS     r1,#0x16
;;;13     {
;;;14         SysTick->LOAD = us * 22; /* Assume the internal 22MHz RC used */
000002  4341              MULS     r1,r0,r1
000004  4a06              LDR      r2,|L5.32|
000006  6151              STR      r1,[r2,#0x14]
;;;15         SysTick->VAL   =  (0x00);
000008  2100              MOVS     r1,#0
00000a  6191              STR      r1,[r2,#0x18]
;;;16         SysTick->CTRL = (1 << SysTick_CTRL_CLKSOURCE_Pos) | (1<<SysTick_CTRL_ENABLE_Pos);
00000c  2105              MOVS     r1,#5
00000e  6111              STR      r1,[r2,#0x10]
;;;17     
;;;18         /* Waiting for down-count to zero */
;;;19         while((SysTick->CTRL & (1 << 16)) == 0);
000010  bf00              NOP      
                  |L5.18|
000012  4903              LDR      r1,|L5.32|
000014  6909              LDR      r1,[r1,#0x10]
000016  2201              MOVS     r2,#1
000018  0412              LSLS     r2,r2,#16
00001a  4211              TST      r1,r2
00001c  d0f9              BEQ      |L5.18|
;;;20     }
00001e  4770              BX       lr
;;;21     
                          ENDP

                  |L5.32|
                          DCD      0xe000e000

                          AREA ||i.WriteData||, CODE, READONLY, ALIGN=2

                  WriteData PROC
;;;75     //*******************************
;;;76     void WriteData(unsigned char data)
000000  4914              LDR      r1,|L6.84|
;;;77     {
;;;78     	// Write Data
;;;79     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=1;	   //chip select
000002  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000004  6889              LDR      r1,[r1,#8]
000006  0889              LSRS     r1,r1,#2
000008  0089              LSLS     r1,r1,#2
00000a  1c49              ADDS     r1,r1,#1
00000c  4a11              LDR      r2,|L6.84|
00000e  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
000010  6091              STR      r1,[r2,#8]
;;;80     	SPI_PORT[eDRVSPI_PORT3]->TX[0] =0x100 | data;    	//write data
000012  21ff              MOVS     r1,#0xff
000014  3101              ADDS     r1,#1
000016  4301              ORRS     r1,r1,r0
000018  4a0e              LDR      r2,|L6.84|
00001a  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
00001c  6211              STR      r1,[r2,#0x20]
;;;81     	SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY = 1;
00001e  490d              LDR      r1,|L6.84|
000020  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000022  6809              LDR      r1,[r1,#0]
000024  0849              LSRS     r1,r1,#1
000026  0049              LSLS     r1,r1,#1
000028  1c49              ADDS     r1,r1,#1
00002a  4a0a              LDR      r2,|L6.84|
00002c  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
00002e  6011              STR      r1,[r2,#0]
;;;82         while ( SPI_PORT[eDRVSPI_PORT3]->CNTRL.GO_BUSY == 1 ); //check data out?
000030  bf00              NOP      
                  |L6.50|
000032  4908              LDR      r1,|L6.84|
000034  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000036  6809              LDR      r1,[r1,#0]
000038  07c9              LSLS     r1,r1,#31
00003a  0fc9              LSRS     r1,r1,#31
00003c  2901              CMP      r1,#1
00003e  d0f8              BEQ      |L6.50|
;;;83     	SPI_PORT[eDRVSPI_PORT3]->SSR.SSR=0;
000040  4904              LDR      r1,|L6.84|
000042  68c9              LDR      r1,[r1,#0xc]  ; SPI_PORT
000044  6889              LDR      r1,[r1,#8]
000046  0889              LSRS     r1,r1,#2
000048  0089              LSLS     r1,r1,#2
00004a  4a02              LDR      r2,|L6.84|
00004c  68d2              LDR      r2,[r2,#0xc]  ; SPI_PORT
00004e  6091              STR      r1,[r2,#8]
;;;84     }
000050  4770              BX       lr
;;;85     
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
                          DCD      SPI_PORT

                          AREA ||i.clr_all_panel||, CODE, READONLY, ALIGN=1

                  clr_all_panel PROC
;;;159    
;;;160    void clr_all_panel(void)
000000  b510              PUSH     {r4,lr}
;;;161    {
;;;162     int i=0;
000002  2400              MOVS     r4,#0
;;;163    	/*CLEAR ALL PANNEL*/
;;;164    	SetPACA(0x0, 0x0);			  								  
000004  2100              MOVS     r1,#0
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       SetPACA
;;;165    	for (i = 0; i < 132 *8; i++)
00000c  bf00              NOP      
00000e  e003              B        |L7.24|
                  |L7.16|
;;;166    	{
;;;167    		WriteData(0x00);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       WriteData
000016  1c64              ADDS     r4,r4,#1              ;165
                  |L7.24|
000018  2021              MOVS     r0,#0x21              ;165
00001a  0140              LSLS     r0,r0,#5              ;165
00001c  4284              CMP      r4,r0                 ;165
00001e  dbf7              BLT      |L7.16|
;;;168    	}
;;;169    	WriteData(0x0f);
000020  200f              MOVS     r0,#0xf
000022  f7fffffe          BL       WriteData
;;;170    }
000026  bd10              POP      {r4,pc}
;;;171    
                          ENDP


                          AREA ||i.draw_LCD||, CODE, READONLY, ALIGN=1

                  draw_LCD PROC
;;;171    
;;;172    void draw_LCD(unsigned char *buffer)
000000  b5f8              PUSH     {r3-r7,lr}
;;;173    {
000002  4607              MOV      r7,r0
;;;174    int X_max = 64;
000004  2640              MOVS     r6,#0x40
;;;175    int Y_max =128;
000006  2080              MOVS     r0,#0x80
000008  9000              STR      r0,[sp,#0]
;;;176    int x=0;
00000a  2400              MOVS     r4,#0
;;;177    int y=0;
00000c  2500              MOVS     r5,#0
;;;178    	for (y=0; y< Y_max; y++) {
00000e  bf00              NOP      
000010  e014              B        |L8.60|
                  |L8.18|
;;;179        	for (x=0; x< (X_max/8); x++) {
000012  2400              MOVS     r4,#0
000014  e00b              B        |L8.46|
                  |L8.22|
;;;180    			SetPACA(x,(129-y));
000016  2281              MOVS     r2,#0x81
000018  1b52              SUBS     r2,r2,r5
00001a  b2d1              UXTB     r1,r2
00001c  b2e0              UXTB     r0,r4
00001e  f7fffffe          BL       SetPACA
;;;181    			WriteData(buffer[y*8+x]);
000022  00e9              LSLS     r1,r5,#3
000024  1909              ADDS     r1,r1,r4
000026  5c78              LDRB     r0,[r7,r1]
000028  f7fffffe          BL       WriteData
00002c  1c64              ADDS     r4,r4,#1              ;179
                  |L8.46|
00002e  17f1              ASRS     r1,r6,#31             ;179
000030  0f49              LSRS     r1,r1,#29             ;179
000032  1989              ADDS     r1,r1,r6              ;179
000034  10c9              ASRS     r1,r1,#3              ;179
000036  42a1              CMP      r1,r4                 ;179
000038  dced              BGT      |L8.22|
00003a  1c6d              ADDS     r5,r5,#1              ;178
                  |L8.60|
00003c  9800              LDR      r0,[sp,#0]            ;178
00003e  4285              CMP      r5,r0                 ;178
000040  dbe7              BLT      |L8.18|
;;;182    			}
;;;183    		}			
;;;184    }
000042  bdf8              POP      {r3-r7,pc}
;;;185    
                          ENDP


                          AREA ||i.print_lcd||, CODE, READONLY, ALIGN=1

                  print_lcd PROC
;;;145    
;;;146    void print_lcd(unsigned char line, char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;147    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;148    int i=0; 
000006  2500              MOVS     r5,#0
;;;149      do{   
000008  bf00              NOP      
                  |L9.10|
;;;150        Show_Word(line,i,*str++); 
00000a  7822              LDRB     r2,[r4,#0]
00000c  1c64              ADDS     r4,r4,#1
00000e  b2e9              UXTB     r1,r5
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       Show_Word
;;;151      	i++;
000016  1c6d              ADDS     r5,r5,#1
;;;152      	if(i>15)
000018  2d0f              CMP      r5,#0xf
00001a  dd00              BLE      |L9.30|
;;;153    	  break;
00001c  e002              B        |L9.36|
                  |L9.30|
;;;154        }
;;;155       while(*str!='\0');
00001e  7820              LDRB     r0,[r4,#0]
000020  2800              CMP      r0,#0
000022  d1f2              BNE      |L9.10|
                  |L9.36|
000024  bf00              NOP                            ;153
;;;156    }
000026  bd70              POP      {r4-r6,pc}
;;;157    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  SPI_PORT
                          DCD      0x40030000
                          DCD      0x40134000
                          DCD      0x40130000
                          DCD      0x40134000
