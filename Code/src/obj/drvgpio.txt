; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\drvgpio.o --depend=.\obj\drvgpio.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\ -I..\..\CMSIS -I..\..\Driver\Include -I..\..\Driver\Include\Driver -I..\..\Driver\Include\NUC1xx-LB_002 -I..\..\Driver\Include\System -IG:\Keil\ARM\INC -IG:\Keil\ARM\INC\Nuvoton\NUC1xx --omf_browse=.\obj\drvgpio.crf ..\..\Driver\Src\Driver\DrvGPIO.c]
                          THUMB

                          AREA ||i.DrvGPIO_Close||, CODE, READONLY, ALIGN=2

                  DrvGPIO_Close PROC
;;;162    /*---------------------------------------------------------------------------------------------------------*/
;;;163    int32_t DrvGPIO_Close(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b530              PUSH     {r4,r5,lr}
;;;164    {
000002  4603              MOV      r3,r0
;;;165        volatile uint32_t u32Reg;
;;;166    
;;;167        if ((i32Bit < 0) || (i32Bit > 16))
000004  2900              CMP      r1,#0
000006  db01              BLT      |L1.12|
000008  2910              CMP      r1,#0x10
00000a  dd01              BLE      |L1.16|
                  |L1.12|
;;;168        {
;;;169            return E_DRVGPIO_ARGUMENT;
00000c  4809              LDR      r0,|L1.52|
                  |L1.14|
;;;170        }
;;;171        
;;;172        u32Reg = (uint32_t)&GPIOA->PMD + (port*PORT_OFFSET);    
;;;173        outpw(u32Reg, inpw(u32Reg) | (0x3<<(i32Bit*2)));
;;;174    	
;;;175    	GPIO_DBNCECON->DBNCECON.ICLK_ON = 0; 
;;;176    
;;;177        return E_SUCCESS;
;;;178    }	
00000e  bd30              POP      {r4,r5,pc}
                  |L1.16|
000010  0198              LSLS     r0,r3,#6              ;172
000012  4c09              LDR      r4,|L1.56|
000014  1902              ADDS     r2,r0,r4              ;172
000016  6810              LDR      r0,[r2,#0]            ;173
000018  004d              LSLS     r5,r1,#1              ;173
00001a  2403              MOVS     r4,#3                 ;173
00001c  40ac              LSLS     r4,r4,r5              ;173
00001e  4320              ORRS     r0,r0,r4              ;173
000020  6010              STR      r0,[r2,#0]            ;173
000022  4806              LDR      r0,|L1.60|
000024  6800              LDR      r0,[r0,#0]            ;175
000026  2420              MOVS     r4,#0x20              ;175
000028  43a0              BICS     r0,r0,r4              ;175
00002a  4c04              LDR      r4,|L1.60|
00002c  6020              STR      r0,[r4,#0]            ;175
00002e  2000              MOVS     r0,#0                 ;177
000030  e7ed              B        |L1.14|
;;;179    
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      0xffff8901
                  |L1.56|
                          DCD      0x50004000
                  |L1.60|
                          DCD      0x50004180

                          AREA ||i.DrvGPIO_ClrBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_ClrBit PROC
;;;251    /*---------------------------------------------------------------------------------------------------------*/
;;;252    int32_t DrvGPIO_ClrBit(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;253    {
000002  4603              MOV      r3,r0
;;;254    	GPIO_T * tGPIO;
;;;255    
;;;256        if ((i32Bit < 0) || (i32Bit > 16))
000004  2900              CMP      r1,#0
000006  db01              BLT      |L2.12|
000008  2910              CMP      r1,#0x10
00000a  dd01              BLE      |L2.16|
                  |L2.12|
;;;257        {
;;;258            return E_DRVGPIO_ARGUMENT;
00000c  4805              LDR      r0,|L2.36|
                  |L2.14|
;;;259        }
;;;260    
;;;261    	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
;;;262    
;;;263    	tGPIO->DOUT &= ~(1 << i32Bit);
;;;264    
;;;265    	return E_SUCCESS;    
;;;266    }
00000e  bd10              POP      {r4,pc}
                  |L2.16|
000010  0198              LSLS     r0,r3,#6              ;261
000012  4c05              LDR      r4,|L2.40|
000014  1902              ADDS     r2,r0,r4              ;261
000016  6890              LDR      r0,[r2,#8]            ;263
000018  2401              MOVS     r4,#1                 ;263
00001a  408c              LSLS     r4,r4,r1              ;263
00001c  43a0              BICS     r0,r0,r4              ;263
00001e  6090              STR      r0,[r2,#8]            ;263
000020  2000              MOVS     r0,#0                 ;265
000022  e7f4              B        |L2.14|
;;;267    
                          ENDP

                  |L2.36|
                          DCD      0xffff8901
                  |L2.40|
                          DCD      0x50004000

                          AREA ||i.DrvGPIO_ClrBitMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_ClrBitMask PROC
;;;427    /*---------------------------------------------------------------------------------------------------------*/
;;;428    int32_t DrvGPIO_ClrBitMask(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;429    {
000002  4602              MOV      r2,r0
;;;430        volatile uint32_t u32Reg;
;;;431    
;;;432        u32Reg = (uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET);    
000004  4804              LDR      r0,|L3.24|
000006  0194              LSLS     r4,r2,#6
000008  1903              ADDS     r3,r0,r4
;;;433    
;;;434    	outpw(u32Reg, inpw(u32Reg) & ~(1<<i32Bit));
00000a  6818              LDR      r0,[r3,#0]
00000c  2401              MOVS     r4,#1
00000e  408c              LSLS     r4,r4,r1
000010  43a0              BICS     r0,r0,r4
000012  6018              STR      r0,[r3,#0]
;;;435    	
;;;436    	return E_SUCCESS;
000014  2000              MOVS     r0,#0
;;;437    }
000016  bd10              POP      {r4,pc}
;;;438    
                          ENDP

                  |L3.24|
                          DCD      0x5000400c

                          AREA ||i.DrvGPIO_ClrPortMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_ClrPortMask PROC
;;;492    /*---------------------------------------------------------------------------------------------------------*/
;;;493    int32_t DrvGPIO_ClrPortMask(E_DRVGPIO_PORT port, int32_t i32MaskData)
000000  b510              PUSH     {r4,lr}
;;;494    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;495    	outpw((uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET), DrvGPIO_GetPortMask(port) & ~(i32MaskData));
000006  4618              MOV      r0,r3
000008  f7fffffe          BL       DrvGPIO_GetPortMask
00000c  43a0              BICS     r0,r0,r4
00000e  4902              LDR      r1,|L4.24|
000010  019a              LSLS     r2,r3,#6
000012  5088              STR      r0,[r1,r2]
;;;496    	
;;;497    	return E_SUCCESS;
000014  2000              MOVS     r0,#0
;;;498    }
000016  bd10              POP      {r4,pc}
;;;499    
                          ENDP

                  |L4.24|
                          DCD      0x5000400c

                          AREA ||i.DrvGPIO_DisableDebounce||, CODE, READONLY, ALIGN=2

                  DrvGPIO_DisableDebounce PROC
;;;581    /*---------------------------------------------------------------------------------------------------------*/
;;;582    int32_t DrvGPIO_DisableDebounce(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;583    {
000002  4602              MOV      r2,r0
;;;584        volatile uint32_t u32Reg;
;;;585    
;;;586        u32Reg = (uint32_t)&GPIOA->DBEN + (port*PORT_OFFSET);
000004  4807              LDR      r0,|L5.36|
000006  0194              LSLS     r4,r2,#6
000008  1903              ADDS     r3,r0,r4
;;;587            
;;;588        outpw(u32Reg, inpw(u32Reg) & ~(1<<i32Bit));
00000a  6818              LDR      r0,[r3,#0]
00000c  2401              MOVS     r4,#1
00000e  408c              LSLS     r4,r4,r1
000010  43a0              BICS     r0,r0,r4
000012  6018              STR      r0,[r3,#0]
;;;589        
;;;590        GPIO_DBNCECON->DBNCECON.ICLK_ON = 0;
000014  4804              LDR      r0,|L5.40|
000016  6800              LDR      r0,[r0,#0]
000018  2420              MOVS     r4,#0x20
00001a  43a0              BICS     r0,r0,r4
00001c  4c02              LDR      r4,|L5.40|
00001e  6020              STR      r0,[r4,#0]
;;;591    
;;;592    	return E_SUCCESS;
000020  2000              MOVS     r0,#0
;;;593    }
000022  bd10              POP      {r4,pc}
;;;594    
                          ENDP

                  |L5.36|
                          DCD      0x50004014
                  |L5.40|
                          DCD      0x50004180

                          AREA ||i.DrvGPIO_DisableDigitalInputBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_DisableDigitalInputBit PROC
;;;533    /*---------------------------------------------------------------------------------------------------------*/
;;;534    int32_t DrvGPIO_DisableDigitalInputBit(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b530              PUSH     {r4,r5,lr}
;;;535    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;536        volatile uint32_t u32Reg = (uint32_t)&GPIOA->OFFD + (port*PORT_OFFSET);
000006  0190              LSLS     r0,r2,#6
000008  4c05              LDR      r4,|L6.32|
00000a  1901              ADDS     r1,r0,r4
;;;537    
;;;538        outpw(u32Reg, inpw(u32Reg) | (1 << (i32Bit+16)));
00000c  6808              LDR      r0,[r1,#0]
00000e  461c              MOV      r4,r3
000010  3410              ADDS     r4,r4,#0x10
000012  2501              MOVS     r5,#1
000014  40a5              LSLS     r5,r5,r4
000016  4328              ORRS     r0,r0,r5
000018  6008              STR      r0,[r1,#0]
;;;539    
;;;540        return E_SUCCESS;
00001a  2000              MOVS     r0,#0
;;;541    }
00001c  bd30              POP      {r4,r5,pc}
;;;542    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      0x50004004

                          AREA ||i.DrvGPIO_DisableEINT0||, CODE, READONLY, ALIGN=2

                  DrvGPIO_DisableEINT0 PROC
;;;842    /*---------------------------------------------------------------------------------------------------------*/
;;;843    void DrvGPIO_DisableEINT0(void)
000000  b510              PUSH     {r4,lr}
;;;844    {
;;;845        volatile uint32_t u32Reg;
;;;846    
;;;847        u32Reg = (uint32_t)&GPIOA->IEN + (E_GPB*PORT_OFFSET);
000002  4c04              LDR      r4,|L7.20|
;;;848    
;;;849        outpw(u32Reg, inpw(u32Reg) & ~((1UL<<(14))|(1UL<<(14+16))));	 
000004  6820              LDR      r0,[r4,#0]
000006  4904              LDR      r1,|L7.24|
000008  4008              ANDS     r0,r0,r1
00000a  6020              STR      r0,[r4,#0]
;;;850    
;;;851        NVIC_DisableIRQ(EINT0_IRQn);
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       NVIC_DisableIRQ
;;;852    }
000012  bd10              POP      {r4,pc}
;;;853    
                          ENDP

                  |L7.20|
                          DCD      0x5000405c
                  |L7.24|
                          DCD      0xbfffbfff

                          AREA ||i.DrvGPIO_DisableEINT1||, CODE, READONLY, ALIGN=2

                  DrvGPIO_DisableEINT1 PROC
;;;921    /*---------------------------------------------------------------------------------------------------------*/
;;;922    void DrvGPIO_DisableEINT1(void)
000000  b510              PUSH     {r4,lr}
;;;923    {
;;;924        volatile uint32_t u32Reg;
;;;925    
;;;926        u32Reg = (uint32_t)&GPIOA->IEN + (E_GPB*PORT_OFFSET);
000002  4c04              LDR      r4,|L8.20|
;;;927    
;;;928        outpw(u32Reg, inpw(u32Reg) & ~((1UL<<(15))|(1UL<<(15+16))));	 
000004  6820              LDR      r0,[r4,#0]
000006  4904              LDR      r1,|L8.24|
000008  4008              ANDS     r0,r0,r1
00000a  6020              STR      r0,[r4,#0]
;;;929    
;;;930        NVIC_DisableIRQ(EINT1_IRQn);
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       NVIC_DisableIRQ
;;;931    }
000012  bd10              POP      {r4,pc}
;;;932    
                          ENDP

                  |L8.20|
                          DCD      0x5000405c
                  |L8.24|
                          DCD      0x7fff7fff

                          AREA ||i.DrvGPIO_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvGPIO_DisableInt PROC
;;;734    /*---------------------------------------------------------------------------------------------------------*/
;;;735    int32_t DrvGPIO_DisableInt(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b570              PUSH     {r4-r6,lr}
;;;736    {                                             
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;737        volatile uint32_t u32Reg;
;;;738    
;;;739        /* Disable both rising/falling or both high level/low level interrupts */
;;;740        u32Reg = (uint32_t)&GPIOA->IEN + (port*PORT_OFFSET);
000006  480f              LDR      r0,|L9.68|
000008  01a1              LSLS     r1,r4,#6
00000a  1846              ADDS     r6,r0,r1
;;;741    
;;;742        outpw(u32Reg, inpw(u32Reg) & ~((1<<i32Bit) | (1<<(i32Bit+16))));	 
00000c  2001              MOVS     r0,#1
00000e  40a8              LSLS     r0,r0,r5
000010  4629              MOV      r1,r5
000012  3110              ADDS     r1,r1,#0x10
000014  2201              MOVS     r2,#1
000016  408a              LSLS     r2,r2,r1
000018  4310              ORRS     r0,r0,r2
00001a  6831              LDR      r1,[r6,#0]
00001c  4381              BICS     r1,r1,r0
00001e  6031              STR      r1,[r6,#0]
;;;743    
;;;744        /* Disable the relative interrupt of M0 */
;;;745        if ((port == E_GPA) || (port == E_GPB))
000020  2c00              CMP      r4,#0
000022  d001              BEQ      |L9.40|
000024  2c01              CMP      r4,#1
000026  d102              BNE      |L9.46|
                  |L9.40|
;;;746        {
;;;747            NVIC_DisableIRQ(GPAB_IRQn);
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       NVIC_DisableIRQ
                  |L9.46|
;;;748        }
;;;749    
;;;750        if ((port == E_GPC) || (port == E_GPD) || (port == E_GPE))
00002e  2c02              CMP      r4,#2
000030  d003              BEQ      |L9.58|
000032  2c03              CMP      r4,#3
000034  d001              BEQ      |L9.58|
000036  2c04              CMP      r4,#4
000038  d102              BNE      |L9.64|
                  |L9.58|
;;;751        {
;;;752            NVIC_DisableIRQ(GPCDE_IRQn);
00003a  2005              MOVS     r0,#5
00003c  f7fffffe          BL       NVIC_DisableIRQ
                  |L9.64|
;;;753        }  
;;;754          
;;;755        return E_SUCCESS;
000040  2000              MOVS     r0,#0
;;;756    }
000042  bd70              POP      {r4-r6,pc}
;;;757    
                          ENDP

                  |L9.68|
                          DCD      0x5000401c

                          AREA ||i.DrvGPIO_EnableDebounce||, CODE, READONLY, ALIGN=2

                  DrvGPIO_EnableDebounce PROC
;;;555    /*---------------------------------------------------------------------------------------------------------*/
;;;556    int32_t DrvGPIO_EnableDebounce(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;557    {
000002  4602              MOV      r2,r0
;;;558        volatile uint32_t u32Reg;
;;;559    
;;;560        u32Reg = (uint32_t)&GPIOA->DBEN + (port*PORT_OFFSET);    
000004  4808              LDR      r0,|L10.40|
000006  0194              LSLS     r4,r2,#6
000008  1903              ADDS     r3,r0,r4
;;;561    
;;;562        outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit));
00000a  6818              LDR      r0,[r3,#0]
00000c  2401              MOVS     r4,#1
00000e  408c              LSLS     r4,r4,r1
000010  4320              ORRS     r0,r0,r4
000012  6018              STR      r0,[r3,#0]
;;;563    
;;;564    	GPIO_DBNCECON->DBNCECON.ICLK_ON = 1;
000014  4805              LDR      r0,|L10.44|
000016  6800              LDR      r0,[r0,#0]
000018  2420              MOVS     r4,#0x20
00001a  43a0              BICS     r0,r0,r4
00001c  3020              ADDS     r0,r0,#0x20
00001e  4c03              LDR      r4,|L10.44|
000020  6020              STR      r0,[r4,#0]
;;;565    
;;;566        return E_SUCCESS;
000022  2000              MOVS     r0,#0
;;;567    }
000024  bd10              POP      {r4,pc}
;;;568    
                          ENDP

000026  0000              DCW      0x0000
                  |L10.40|
                          DCD      0x50004014
                  |L10.44|
                          DCD      0x50004180

                          AREA ||i.DrvGPIO_EnableDigitalInputBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_EnableDigitalInputBit PROC
;;;512    /*---------------------------------------------------------------------------------------------------------*/
;;;513    int32_t DrvGPIO_EnableDigitalInputBit(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b530              PUSH     {r4,r5,lr}
;;;514    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;515        volatile uint32_t u32Reg = (uint32_t)&GPIOA->OFFD + (port*PORT_OFFSET);
000006  0190              LSLS     r0,r2,#6
000008  4c05              LDR      r4,|L11.32|
00000a  1901              ADDS     r1,r0,r4
;;;516    
;;;517        outpw(u32Reg, inpw(u32Reg) & ~(1 << (i32Bit+16)));
00000c  6808              LDR      r0,[r1,#0]
00000e  461c              MOV      r4,r3
000010  3410              ADDS     r4,r4,#0x10
000012  2501              MOVS     r5,#1
000014  40a5              LSLS     r5,r5,r4
000016  43a8              BICS     r0,r0,r5
000018  6008              STR      r0,[r1,#0]
;;;518    
;;;519        return E_SUCCESS;
00001a  2000              MOVS     r0,#0
;;;520    }
00001c  bd30              POP      {r4,r5,pc}
;;;521    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L11.32|
                          DCD      0x50004004

                          AREA ||i.DrvGPIO_EnableEINT0||, CODE, READONLY, ALIGN=2

                  DrvGPIO_EnableEINT0 PROC
;;;798    /*---------------------------------------------------------------------------------------------------------*/
;;;799    void DrvGPIO_EnableEINT0(E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode, GPIO_EINT0_CALLBACK pfEINT0Callback)
000000  b5f8              PUSH     {r3-r7,lr}
;;;800    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;801        volatile uint32_t u32Reg;
;;;802    
;;;803        if ((TriggerType == E_IO_BOTH_EDGE) && (Mode == E_MODE_LEVEL))
000008  2d02              CMP      r5,#2
00000a  d102              BNE      |L12.18|
00000c  2e01              CMP      r6,#1
00000e  d100              BNE      |L12.18|
                  |L12.16|
;;;804            return ;
;;;805    
;;;806        u32Reg = (uint32_t)&GPIOA->IEN + (E_GPB*PORT_OFFSET);
;;;807    	if (TriggerType == E_IO_RISING)
;;;808        {
;;;809            outpw(u32Reg, inpw(u32Reg) | (1UL<<(14+16)));	 
;;;810    	}
;;;811        else if (TriggerType == E_IO_FALLING)
;;;812    	{
;;;813            outpw(u32Reg, inpw(u32Reg) | (1UL<<(14)));	 
;;;814    	}
;;;815        else if (TriggerType == E_IO_BOTH_EDGE)
;;;816        {  
;;;817            outpw(u32Reg, inpw(u32Reg) | (1UL<<(14))|(1UL<<(14+16)));	 
;;;818    	}    	 
;;;819    
;;;820         /* Configure to be level trigger or edge trigger */
;;;821        u32Reg = (uint32_t)&GPIOA->IMD + (E_GPB*PORT_OFFSET);
;;;822    	if (Mode == E_MODE_EDGE)
;;;823    		outpw(u32Reg, inpw(u32Reg) & ~(1<<14));
;;;824    	else if(Mode == E_MODE_LEVEL)
;;;825    		outpw(u32Reg, inpw(u32Reg) | (1<<14));
;;;826    
;;;827       _pfEINT0Callback = pfEINT0Callback;
;;;828    
;;;829        NVIC_SetPriority(EINT0_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
;;;830        NVIC_EnableIRQ(EINT0_IRQn);
;;;831    }
000010  bdf8              POP      {r3-r7,pc}
                  |L12.18|
000012  4c18              LDR      r4,|L12.116|
000014  2d00              CMP      r5,#0                 ;807
000016  d105              BNE      |L12.36|
000018  6820              LDR      r0,[r4,#0]            ;809
00001a  2101              MOVS     r1,#1                 ;809
00001c  0789              LSLS     r1,r1,#30             ;809
00001e  4308              ORRS     r0,r0,r1              ;809
000020  6020              STR      r0,[r4,#0]            ;809
000022  e00c              B        |L12.62|
                  |L12.36|
000024  2d01              CMP      r5,#1                 ;811
000026  d104              BNE      |L12.50|
000028  6820              LDR      r0,[r4,#0]            ;813
00002a  03a9              LSLS     r1,r5,#14             ;813
00002c  4308              ORRS     r0,r0,r1              ;813
00002e  6020              STR      r0,[r4,#0]            ;813
000030  e005              B        |L12.62|
                  |L12.50|
000032  2d02              CMP      r5,#2                 ;815
000034  d103              BNE      |L12.62|
000036  6820              LDR      r0,[r4,#0]            ;817
000038  490f              LDR      r1,|L12.120|
00003a  4308              ORRS     r0,r0,r1              ;817
00003c  6020              STR      r0,[r4,#0]            ;817
                  |L12.62|
00003e  4c0d              LDR      r4,|L12.116|
000040  1f24              SUBS     r4,r4,#4              ;821
000042  2e00              CMP      r6,#0                 ;822
000044  d105              BNE      |L12.82|
000046  6820              LDR      r0,[r4,#0]            ;823
000048  2101              MOVS     r1,#1                 ;823
00004a  0389              LSLS     r1,r1,#14             ;823
00004c  4388              BICS     r0,r0,r1              ;823
00004e  6020              STR      r0,[r4,#0]            ;823
000050  e005              B        |L12.94|
                  |L12.82|
000052  2e01              CMP      r6,#1                 ;824
000054  d103              BNE      |L12.94|
000056  6820              LDR      r0,[r4,#0]            ;825
000058  03b1              LSLS     r1,r6,#14             ;825
00005a  4308              ORRS     r0,r0,r1              ;825
00005c  6020              STR      r0,[r4,#0]            ;825
                  |L12.94|
00005e  4807              LDR      r0,|L12.124|
000060  6007              STR      r7,[r0,#0]            ;827  ; _pfEINT0Callback
000062  2102              MOVS     r1,#2                 ;829
000064  4608              MOV      r0,r1                 ;829
000066  f7fffffe          BL       NVIC_SetPriority
00006a  2002              MOVS     r0,#2                 ;830
00006c  f7fffffe          BL       NVIC_EnableIRQ
000070  bf00              NOP      
000072  e7cd              B        |L12.16|
;;;832    
                          ENDP

                  |L12.116|
                          DCD      0x5000405c
                  |L12.120|
                          DCD      0x40004000
                  |L12.124|
                          DCD      _pfEINT0Callback

                          AREA ||i.DrvGPIO_EnableEINT1||, CODE, READONLY, ALIGN=2

                  DrvGPIO_EnableEINT1 PROC
;;;877    /*---------------------------------------------------------------------------------------------------------*/
;;;878    void DrvGPIO_EnableEINT1(E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode, GPIO_EINT1_CALLBACK pfEINT1Callback)
000000  b5f8              PUSH     {r3-r7,lr}
;;;879    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;880        volatile uint32_t u32Reg;
;;;881    
;;;882        if ((TriggerType == E_IO_BOTH_EDGE) && (Mode == E_MODE_LEVEL))
000008  2d02              CMP      r5,#2
00000a  d102              BNE      |L13.18|
00000c  2e01              CMP      r6,#1
00000e  d100              BNE      |L13.18|
                  |L13.16|
;;;883            return ;
;;;884    
;;;885        u32Reg = (uint32_t)&GPIOA->IEN + (E_GPB*PORT_OFFSET);
;;;886    	if (TriggerType == E_IO_RISING)
;;;887        {
;;;888            outpw(u32Reg, inpw(u32Reg) | (1UL<<(15+16)));	 
;;;889    	}
;;;890        else if (TriggerType == E_IO_FALLING)
;;;891    	{
;;;892            outpw(u32Reg, inpw(u32Reg) | (1UL<<(15)));	 
;;;893    	}
;;;894        else if (TriggerType == E_IO_BOTH_EDGE)
;;;895        {  
;;;896            outpw(u32Reg, inpw(u32Reg) | (1UL<<(15))|(1UL<<(15+16)));	 
;;;897    	}    	 
;;;898    
;;;899         /* Configure to be level trigger or edge trigger */
;;;900        u32Reg = (uint32_t)&GPIOA->IMD + (E_GPB*PORT_OFFSET);
;;;901    	if (Mode == E_MODE_EDGE)
;;;902    		outpw(u32Reg, inpw(u32Reg) & ~(1<<15));
;;;903    	else if(Mode == E_MODE_LEVEL)
;;;904    		outpw(u32Reg, inpw(u32Reg) | (1<<15));
;;;905    
;;;906        _pfEINT1Callback = pfEINT1Callback;
;;;907    
;;;908        NVIC_SetPriority(EINT1_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
;;;909        NVIC_EnableIRQ(EINT1_IRQn);
;;;910    }
000010  bdf8              POP      {r3-r7,pc}
                  |L13.18|
000012  4c18              LDR      r4,|L13.116|
000014  2d00              CMP      r5,#0                 ;886
000016  d104              BNE      |L13.34|
000018  6820              LDR      r0,[r4,#0]            ;888
00001a  0761              LSLS     r1,r4,#29             ;888
00001c  4308              ORRS     r0,r0,r1              ;888
00001e  6020              STR      r0,[r4,#0]            ;888
000020  e00c              B        |L13.60|
                  |L13.34|
000022  2d01              CMP      r5,#1                 ;890
000024  d104              BNE      |L13.48|
000026  6820              LDR      r0,[r4,#0]            ;892
000028  03e9              LSLS     r1,r5,#15             ;892
00002a  4308              ORRS     r0,r0,r1              ;892
00002c  6020              STR      r0,[r4,#0]            ;892
00002e  e005              B        |L13.60|
                  |L13.48|
000030  2d02              CMP      r5,#2                 ;894
000032  d103              BNE      |L13.60|
000034  6820              LDR      r0,[r4,#0]            ;896
000036  4910              LDR      r1,|L13.120|
000038  4308              ORRS     r0,r0,r1              ;896
00003a  6020              STR      r0,[r4,#0]            ;896
                  |L13.60|
00003c  4c0d              LDR      r4,|L13.116|
00003e  1f24              SUBS     r4,r4,#4              ;900
000040  2e00              CMP      r6,#0                 ;901
000042  d105              BNE      |L13.80|
000044  6820              LDR      r0,[r4,#0]            ;902
000046  2101              MOVS     r1,#1                 ;902
000048  03c9              LSLS     r1,r1,#15             ;902
00004a  4388              BICS     r0,r0,r1              ;902
00004c  6020              STR      r0,[r4,#0]            ;902
00004e  e005              B        |L13.92|
                  |L13.80|
000050  2e01              CMP      r6,#1                 ;903
000052  d103              BNE      |L13.92|
000054  6820              LDR      r0,[r4,#0]            ;904
000056  03f1              LSLS     r1,r6,#15             ;904
000058  4308              ORRS     r0,r0,r1              ;904
00005a  6020              STR      r0,[r4,#0]            ;904
                  |L13.92|
00005c  4807              LDR      r0,|L13.124|
00005e  6007              STR      r7,[r0,#0]            ;906  ; _pfEINT1Callback
000060  2102              MOVS     r1,#2                 ;908
000062  2003              MOVS     r0,#3                 ;908
000064  f7fffffe          BL       NVIC_SetPriority
000068  2003              MOVS     r0,#3                 ;909
00006a  f7fffffe          BL       NVIC_EnableIRQ
00006e  bf00              NOP      
000070  e7ce              B        |L13.16|
;;;911    
                          ENDP

000072  0000              DCW      0x0000
                  |L13.116|
                          DCD      0x5000405c
                  |L13.120|
                          DCD      0x80008000
                  |L13.124|
                          DCD      _pfEINT1Callback

                          AREA ||i.DrvGPIO_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvGPIO_EnableInt PROC
;;;671    /*---------------------------------------------------------------------------------------------------------*/
;;;672    int32_t DrvGPIO_EnableInt(E_DRVGPIO_PORT port, int32_t i32Bit, E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode)
000000  b5ff              PUSH     {r0-r7,lr}
;;;673    {
000002  b081              SUB      sp,sp,#4
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;674        volatile uint32_t u32Reg;
;;;675    
;;;676        if ((TriggerType == E_IO_BOTH_EDGE) && (Mode == E_MODE_LEVEL))
00000a  2f02              CMP      r7,#2
00000c  d105              BNE      |L14.26|
00000e  9804              LDR      r0,[sp,#0x10]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L14.26|
;;;677            return E_DRVGPIO_ARGUMENT;
000014  4830              LDR      r0,|L14.216|
                  |L14.22|
;;;678    
;;;679        if ((port == E_GPB) && ((i32Bit == 14) || (i32Bit == 15)))
;;;680        {
;;;681            /* GPB14 is EINT0, GPB15 is EINT1. Both of them can't be assigned to GPAB interrupt */
;;;682            return E_DRVGPIO_ARGUMENT;    
;;;683        }
;;;684        
;;;685        /* Configure the interrupt to be rising/falling when edge trigger or high/low level when level trigger */
;;;686        u32Reg = (uint32_t)&GPIOA->IEN + (port*PORT_OFFSET);
;;;687    	if (TriggerType == E_IO_RISING)
;;;688    		outpw(u32Reg, inpw(u32Reg) | (1<<(i32Bit+16)));	 
;;;689    	else if(TriggerType == E_IO_FALLING)
;;;690    		outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit));	 
;;;691    	else if(TriggerType == E_IO_BOTH_EDGE)  
;;;692    		outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit)| (1<<(i32Bit+16)));	 
;;;693    	else
;;;694    		return E_DRVGPIO_ARGUMENT;
;;;695    
;;;696        /* Configure to be level trigger or edge trigger */
;;;697        u32Reg = (uint32_t)&GPIOA->IMD + (port*PORT_OFFSET);
;;;698    	if(Mode == E_MODE_EDGE)
;;;699    		outpw(u32Reg, inpw(u32Reg) & ~(1<<i32Bit));
;;;700    	else if(Mode ==E_MODE_LEVEL)
;;;701    		outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit));
;;;702    	else
;;;703    		return E_DRVGPIO_ARGUMENT;
;;;704        
;;;705        /* Enable the relative interrupt of M0 */
;;;706        if ((port == E_GPA) || (port == E_GPB))
;;;707        {
;;;708            NVIC_SetPriority(GPAB_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
;;;709            NVIC_EnableIRQ(GPAB_IRQn);
;;;710        }
;;;711    
;;;712        if ((port == E_GPC) || (port == E_GPD) || (port == E_GPE))
;;;713        {
;;;714            NVIC_SetPriority(GPCDE_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
;;;715            NVIC_EnableIRQ(GPCDE_IRQn);
;;;716        }    
;;;717    
;;;718        return E_SUCCESS;
;;;719    }
000016  b005              ADD      sp,sp,#0x14
000018  bdf0              POP      {r4-r7,pc}
                  |L14.26|
00001a  2d01              CMP      r5,#1                 ;679
00001c  d105              BNE      |L14.42|
00001e  2e0e              CMP      r6,#0xe               ;679
000020  d001              BEQ      |L14.38|
000022  2e0f              CMP      r6,#0xf               ;679
000024  d101              BNE      |L14.42|
                  |L14.38|
000026  482c              LDR      r0,|L14.216|
000028  e7f5              B        |L14.22|
                  |L14.42|
00002a  482c              LDR      r0,|L14.220|
00002c  01a9              LSLS     r1,r5,#6              ;686
00002e  1844              ADDS     r4,r0,r1              ;686
000030  2f00              CMP      r7,#0                 ;687
000032  d107              BNE      |L14.68|
000034  6820              LDR      r0,[r4,#0]            ;688
000036  4631              MOV      r1,r6                 ;688
000038  3110              ADDS     r1,r1,#0x10           ;688
00003a  2201              MOVS     r2,#1                 ;688
00003c  408a              LSLS     r2,r2,r1              ;688
00003e  4310              ORRS     r0,r0,r2              ;688
000040  6020              STR      r0,[r4,#0]            ;688
000042  e016              B        |L14.114|
                  |L14.68|
000044  2f01              CMP      r7,#1                 ;689
000046  d105              BNE      |L14.84|
000048  6820              LDR      r0,[r4,#0]            ;690
00004a  2101              MOVS     r1,#1                 ;690
00004c  40b1              LSLS     r1,r1,r6              ;690
00004e  4308              ORRS     r0,r0,r1              ;690
000050  6020              STR      r0,[r4,#0]            ;690
000052  e00e              B        |L14.114|
                  |L14.84|
000054  2f02              CMP      r7,#2                 ;691
000056  d10a              BNE      |L14.110|
000058  6820              LDR      r0,[r4,#0]            ;692
00005a  2101              MOVS     r1,#1                 ;692
00005c  40b1              LSLS     r1,r1,r6              ;692
00005e  4308              ORRS     r0,r0,r1              ;692
000060  4631              MOV      r1,r6                 ;692
000062  3110              ADDS     r1,r1,#0x10           ;692
000064  2201              MOVS     r2,#1                 ;692
000066  408a              LSLS     r2,r2,r1              ;692
000068  4310              ORRS     r0,r0,r2              ;692
00006a  6020              STR      r0,[r4,#0]            ;692
00006c  e001              B        |L14.114|
                  |L14.110|
00006e  481a              LDR      r0,|L14.216|
000070  e7d1              B        |L14.22|
                  |L14.114|
000072  481a              LDR      r0,|L14.220|
000074  1f00              SUBS     r0,r0,#4              ;697
000076  01a9              LSLS     r1,r5,#6              ;697
000078  1844              ADDS     r4,r0,r1              ;697
00007a  9804              LDR      r0,[sp,#0x10]         ;698
00007c  2800              CMP      r0,#0                 ;698
00007e  d105              BNE      |L14.140|
000080  6820              LDR      r0,[r4,#0]            ;699
000082  2101              MOVS     r1,#1                 ;699
000084  40b1              LSLS     r1,r1,r6              ;699
000086  4388              BICS     r0,r0,r1              ;699
000088  6020              STR      r0,[r4,#0]            ;699
00008a  e00a              B        |L14.162|
                  |L14.140|
00008c  9804              LDR      r0,[sp,#0x10]         ;700
00008e  2801              CMP      r0,#1                 ;700
000090  d105              BNE      |L14.158|
000092  6820              LDR      r0,[r4,#0]            ;701
000094  2101              MOVS     r1,#1                 ;701
000096  40b1              LSLS     r1,r1,r6              ;701
000098  4308              ORRS     r0,r0,r1              ;701
00009a  6020              STR      r0,[r4,#0]            ;701
00009c  e001              B        |L14.162|
                  |L14.158|
00009e  480e              LDR      r0,|L14.216|
0000a0  e7b9              B        |L14.22|
                  |L14.162|
0000a2  2d00              CMP      r5,#0                 ;706
0000a4  d001              BEQ      |L14.170|
0000a6  2d01              CMP      r5,#1                 ;706
0000a8  d106              BNE      |L14.184|
                  |L14.170|
0000aa  2102              MOVS     r1,#2                 ;708
0000ac  2004              MOVS     r0,#4                 ;708
0000ae  f7fffffe          BL       NVIC_SetPriority
0000b2  2004              MOVS     r0,#4                 ;709
0000b4  f7fffffe          BL       NVIC_EnableIRQ
                  |L14.184|
0000b8  2d02              CMP      r5,#2                 ;712
0000ba  d003              BEQ      |L14.196|
0000bc  2d03              CMP      r5,#3                 ;712
0000be  d001              BEQ      |L14.196|
0000c0  2d04              CMP      r5,#4                 ;712
0000c2  d106              BNE      |L14.210|
                  |L14.196|
0000c4  2102              MOVS     r1,#2                 ;714
0000c6  2005              MOVS     r0,#5                 ;714
0000c8  f7fffffe          BL       NVIC_SetPriority
0000cc  2005              MOVS     r0,#5                 ;715
0000ce  f7fffffe          BL       NVIC_EnableIRQ
                  |L14.210|
0000d2  2000              MOVS     r0,#0                 ;718
0000d4  e79f              B        |L14.22|
;;;720    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L14.216|
                          DCD      0xffff8901
                  |L14.220|
                          DCD      0x5000401c

                          AREA ||i.DrvGPIO_GetBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetBit PROC
;;;223    /*---------------------------------------------------------------------------------------------------------*/
;;;224    int32_t DrvGPIO_GetBit(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;225    {
000002  4602              MOV      r2,r0
;;;226        volatile uint32_t u32Reg;
;;;227            
;;;228        if ((i32Bit < 0) || (i32Bit > 16))
000004  2900              CMP      r1,#0
000006  db01              BLT      |L15.12|
000008  2910              CMP      r1,#0x10
00000a  dd01              BLE      |L15.16|
                  |L15.12|
;;;229        {
;;;230            return E_DRVGPIO_ARGUMENT;
00000c  4804              LDR      r0,|L15.32|
                  |L15.14|
;;;231        }
;;;232    
;;;233        u32Reg = (uint32_t)&GPIOA->PIN + (port*PORT_OFFSET);    
;;;234    
;;;235        return ((inpw(u32Reg)>>i32Bit) & 0x1);
;;;236    }
00000e  bd10              POP      {r4,pc}
                  |L15.16|
000010  4804              LDR      r0,|L15.36|
000012  0194              LSLS     r4,r2,#6              ;233
000014  1903              ADDS     r3,r0,r4              ;233
000016  6818              LDR      r0,[r3,#0]            ;235
000018  40c8              LSRS     r0,r0,r1              ;235
00001a  07c0              LSLS     r0,r0,#31             ;235
00001c  0fc0              LSRS     r0,r0,#31             ;235
00001e  e7f6              B        |L15.14|
;;;237    
                          ENDP

                  |L15.32|
                          DCD      0xffff8901
                  |L15.36|
                          DCD      0x50004010

                          AREA ||i.DrvGPIO_GetBitMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetBitMask PROC
;;;404    /*---------------------------------------------------------------------------------------------------------*/
;;;405    int32_t DrvGPIO_GetBitMask(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;406    {
000002  4602              MOV      r2,r0
;;;407        volatile uint32_t u32Reg;
;;;408    
;;;409        u32Reg = (uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET);    
000004  4803              LDR      r0,|L16.20|
000006  0194              LSLS     r4,r2,#6
000008  1903              ADDS     r3,r0,r4
;;;410    
;;;411        return ((inpw(u32Reg)>>i32Bit) & 0x1);
00000a  6818              LDR      r0,[r3,#0]
00000c  40c8              LSRS     r0,r0,r1
00000e  07c0              LSLS     r0,r0,#31
000010  0fc0              LSRS     r0,r0,#31
;;;412    }
000012  bd10              POP      {r4,pc}
;;;413    
                          ENDP

                  |L16.20|
                          DCD      0x5000400c

                          AREA ||i.DrvGPIO_GetDebounceSampleCycle||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetDebounceSampleCycle PROC
;;;637    /*---------------------------------------------------------------------------------------------------------*/
;;;638    int32_t DrvGPIO_GetDebounceSampleCycle(void)
000000  4802              LDR      r0,|L17.12|
;;;639    {   
;;;640        return GPIO_DBNCECON->DBNCECON.DBCLKSEL;
000002  6800              LDR      r0,[r0,#0]
000004  0700              LSLS     r0,r0,#28
000006  0f00              LSRS     r0,r0,#28
;;;641    }
000008  4770              BX       lr
;;;642    
                          ENDP

00000a  0000              DCW      0x0000
                  |L17.12|
                          DCD      0x50004180

                          AREA ||i.DrvGPIO_GetDoutBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetDoutBit PROC
;;;329    /*---------------------------------------------------------------------------------------------------------*/
;;;330    int32_t DrvGPIO_GetDoutBit(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  4602              MOV      r2,r0
;;;331    {    
;;;332        if ((i32Bit < 0) || (i32Bit >= 15))
000002  2900              CMP      r1,#0
000004  db01              BLT      |L18.10|
000006  290f              CMP      r1,#0xf
000008  db01              BLT      |L18.14|
                  |L18.10|
;;;333        {
;;;334            return E_DRVGPIO_ARGUMENT;
00000a  4804              LDR      r0,|L18.28|
                  |L18.12|
;;;335        }
;;;336     
;;;337        return ((inpw((uint32_t)&GPIOA->DOUT + (port*PORT_OFFSET))>>i32Bit) & 0x1);
;;;338    }
00000c  4770              BX       lr
                  |L18.14|
00000e  4804              LDR      r0,|L18.32|
000010  0193              LSLS     r3,r2,#6              ;337
000012  58c0              LDR      r0,[r0,r3]            ;337
000014  40c8              LSRS     r0,r0,r1              ;337
000016  07c0              LSLS     r0,r0,#31             ;337
000018  0fc0              LSRS     r0,r0,#31             ;337
00001a  e7f7              B        |L18.12|
;;;339    
                          ENDP

                  |L18.28|
                          DCD      0xffff8901
                  |L18.32|
                          DCD      0x50004008

                          AREA ||i.DrvGPIO_GetIntStatus||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetIntStatus PROC
;;;945    /*---------------------------------------------------------------------------------------------------------*/
;;;946    int32_t DrvGPIO_GetIntStatus(E_DRVGPIO_PORT port)
000000  4601              MOV      r1,r0
;;;947    {
;;;948    	GPIO_T * tGPIO;
;;;949    
;;;950    	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
000002  0188              LSLS     r0,r1,#6
000004  4b01              LDR      r3,|L19.12|
000006  18c2              ADDS     r2,r0,r3
;;;951    
;;;952    	return tGPIO->ISRC;
000008  6a10              LDR      r0,[r2,#0x20]
;;;953    }
00000a  4770              BX       lr
;;;954    
                          ENDP

                  |L19.12|
                          DCD      0x50004000

                          AREA ||i.DrvGPIO_GetPortBits||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetPortBits PROC
;;;304    /*---------------------------------------------------------------------------------------------------------*/
;;;305    int32_t DrvGPIO_GetPortBits(E_DRVGPIO_PORT port)
000000  4601              MOV      r1,r0
;;;306    {
;;;307    	GPIO_T * tGPIO;
;;;308    
;;;309    	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
000002  0188              LSLS     r0,r1,#6
000004  4b01              LDR      r3,|L20.12|
000006  18c2              ADDS     r2,r0,r3
;;;310    
;;;311        return tGPIO->PIN;
000008  6910              LDR      r0,[r2,#0x10]
;;;312    }
00000a  4770              BX       lr
;;;313    
                          ENDP

                  |L20.12|
                          DCD      0x50004000

                          AREA ||i.DrvGPIO_GetPortDoutBits||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetPortDoutBits PROC
;;;353    /*---------------------------------------------------------------------------------------------------------*/
;;;354    int32_t DrvGPIO_GetPortDoutBits(E_DRVGPIO_PORT port)
000000  4601              MOV      r1,r0
;;;355    {
;;;356        if (port > 4)
000002  2904              CMP      r1,#4
000004  dd01              BLE      |L21.10|
;;;357        {
;;;358            return E_DRVGPIO_ARGUMENT;
000006  4803              LDR      r0,|L21.20|
                  |L21.8|
;;;359        }
;;;360    
;;;361        return inpw((uint32_t)&GPIOA->DOUT + (port*PORT_OFFSET));
;;;362    }
000008  4770              BX       lr
                  |L21.10|
00000a  4803              LDR      r0,|L21.24|
00000c  018a              LSLS     r2,r1,#6              ;361
00000e  5880              LDR      r0,[r0,r2]            ;361
000010  e7fa              B        |L21.8|
;;;363    
                          ENDP

000012  0000              DCW      0x0000
                  |L21.20|
                          DCD      0xffff8901
                  |L21.24|
                          DCD      0x50004008

                          AREA ||i.DrvGPIO_GetPortMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetPortMask PROC
;;;473    /*---------------------------------------------------------------------------------------------------------*/
;;;474    int32_t DrvGPIO_GetPortMask(E_DRVGPIO_PORT port)
000000  4601              MOV      r1,r0
;;;475    {
;;;476    	return inpw((uint32_t)&GPIOA->DMASK + (port* PORT_OFFSET)); 
000002  4802              LDR      r0,|L22.12|
000004  018a              LSLS     r2,r1,#6
000006  5880              LDR      r0,[r0,r2]
;;;477    }
000008  4770              BX       lr
;;;478    
                          ENDP

00000a  0000              DCW      0x0000
                  |L22.12|
                          DCD      0x5000400c

                          AREA ||i.DrvGPIO_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetVersion PROC
;;;1466   /*---------------------------------------------------------------------------------------------------------*/
;;;1467   int32_t DrvGPIO_GetVersion(void)
000000  4800              LDR      r0,|L23.4|
;;;1468   {
;;;1469      return DRVGPIO_VERSION_NUM;
;;;1470   }
000002  4770              BX       lr
;;;1471   
                          ENDP

                  |L23.4|
                          DCD      0x00010405

                          AREA ||i.DrvGPIO_InitFunction||, CODE, READONLY, ALIGN=2

                  DrvGPIO_InitFunction PROC
;;;1048   /*---------------------------------------------------------------------------------------------------------*/
;;;1049   int32_t DrvGPIO_InitFunction(E_DRVGPIO_FUNC function)
000000  b510              PUSH     {r4,lr}
;;;1050   {  
000002  4601              MOV      r1,r0
;;;1051       uint8_t u8Offset;
;;;1052   
;;;1053       switch ( function )
000004  460b              MOV      r3,r1
000006  f7fffffe          BL       __ARM_common_switch8
00000a  3e20              DCB      0x3e,0x20
00000c  2a414b5c          DCB      0x2a,0x41,0x4b,0x5c
000010  747d7e94          DCB      0x74,0x7d,0x7e,0x94
000014  a4b4f1ef          DCB      0xa4,0xb4,0xf1,0xef
000018  eeedeceb          DCB      0xee,0xed,0xec,0xeb
00001c  eae9e8e7          DCB      0xea,0xe9,0xe8,0xe7
000020  e6e5e4e3          DCB      0xe6,0xe5,0xe4,0xe3
000024  e2e1e0df          DCB      0xe2,0xe1,0xe0,0xdf
000028  dedddcdb          DCB      0xde,0xdd,0xdc,0xdb
00002c  dad9d8d7          DCB      0xda,0xd9,0xd8,0xd7
000030  d6d5d4d3          DCB      0xd6,0xd5,0xd4,0xd3
000034  d2d1d0cf          DCB      0xd2,0xd1,0xd0,0xcf
000038  cecdcccb          DCB      0xce,0xcd,0xcc,0xcb
00003c  cac9c8c7          DCB      0xca,0xc9,0xc8,0xc7
000040  c6c5c4c3          DCB      0xc6,0xc5,0xc4,0xc3
000044  c2c1c0bf          DCB      0xc2,0xc1,0xc0,0xbf
000048  bebd              DCB      0xbe,0xbd
;;;1054   	{
;;;1055   		/*---------------------------------------------------------------------------------------------------------*/
;;;1056   		/* GPIO                                                                                                    */
;;;1057   		/*---------------------------------------------------------------------------------------------------------*/
;;;1058   		case E_FUNC_GPIO:
;;;1059   		{
;;;1060   		  	outpw(&SYS->GPAMFP, 0);
00004a  2000              MOVS     r0,#0
00004c  2305              MOVS     r3,#5
00004e  071b              LSLS     r3,r3,#28
000050  6318              STR      r0,[r3,#0x30]
;;;1061   			outpw(&SYS->GPBMFP, 0);
000052  6358              STR      r0,[r3,#0x34]
;;;1062   			outpw(&SYS->GPCMFP, 0);
000054  6398              STR      r0,[r3,#0x38]
;;;1063   			outpw(&SYS->GPDMFP, 0);
000056  63d8              STR      r0,[r3,#0x3c]
;;;1064   			outpw(&SYS->GPEMFP, 0);		  	
000058  4bfa              LDR      r3,|L24.1092|
00005a  6018              STR      r0,[r3,#0]
;;;1065   		}break;
00005c  e371              B        |L24.1858|
;;;1066   
;;;1067   		/*---------------------------------------------------------------------------------------------------------*/
;;;1068   		/* Clock frequence output                                                                                        */
;;;1069   		/*---------------------------------------------------------------------------------------------------------*/
;;;1070   		case E_FUNC_CLKO:
;;;1071   		{
;;;1072   		  	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<12));
00005e  2005              MOVS     r0,#5
000060  0700              LSLS     r0,r0,#28
000062  6b40              LDR      r0,[r0,#0x34]
000064  2301              MOVS     r3,#1
000066  031b              LSLS     r3,r3,#12
000068  4318              ORRS     r0,r0,r3
00006a  2305              MOVS     r3,#5
00006c  071b              LSLS     r3,r3,#28
00006e  6358              STR      r0,[r3,#0x34]
;;;1073   		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<10));
000070  48f4              LDR      r0,|L24.1092|
000072  6900              LDR      r0,[r0,#0x10]
000074  2301              MOVS     r3,#1
000076  029b              LSLS     r3,r3,#10
000078  4318              ORRS     r0,r0,r3
00007a  4bf2              LDR      r3,|L24.1092|
00007c  6118              STR      r0,[r3,#0x10]
;;;1074   		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
00007e  4618              MOV      r0,r3
000080  6900              LDR      r0,[r0,#0x10]
000082  015b              LSLS     r3,r3,#5
000084  4398              BICS     r0,r0,r3
000086  4bef              LDR      r3,|L24.1092|
000088  6118              STR      r0,[r3,#0x10]
;;;1075   		}break;
00008a  e35a              B        |L24.1858|
;;;1076   
;;;1077   		/*---------------------------------------------------------------------------------------------------------*/
;;;1078   		/* I2C0                                                                                                    */
;;;1079   		/*---------------------------------------------------------------------------------------------------------*/
;;;1080   		case E_FUNC_I2C0:
;;;1081   		{
;;;1082   		  	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<8));
00008c  2005              MOVS     r0,#5
00008e  0700              LSLS     r0,r0,#28
000090  6b00              LDR      r0,[r0,#0x30]
000092  2303              MOVS     r3,#3
000094  021b              LSLS     r3,r3,#8
000096  4318              ORRS     r0,r0,r3
000098  2305              MOVS     r3,#5
00009a  071b              LSLS     r3,r3,#28
00009c  6318              STR      r0,[r3,#0x30]
;;;1083   		}break;		
00009e  e350              B        |L24.1858|
;;;1084   
;;;1085   		/*---------------------------------------------------------------------------------------------------------*/
;;;1086   		/* I2C1                                                                                                    */
;;;1087   		/*---------------------------------------------------------------------------------------------------------*/
;;;1088   		case E_FUNC_I2C1:
;;;1089   		{
;;;1090   		  	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<10));
0000a0  2005              MOVS     r0,#5
0000a2  0700              LSLS     r0,r0,#28
0000a4  6b00              LDR      r0,[r0,#0x30]
0000a6  2303              MOVS     r3,#3
0000a8  029b              LSLS     r3,r3,#10
0000aa  4318              ORRS     r0,r0,r3
0000ac  2305              MOVS     r3,#5
0000ae  071b              LSLS     r3,r3,#28
0000b0  6318              STR      r0,[r3,#0x30]
;;;1091   		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
0000b2  48e4              LDR      r0,|L24.1092|
0000b4  6900              LDR      r0,[r0,#0x10]
0000b6  2301              MOVS     r3,#1
0000b8  02db              LSLS     r3,r3,#11
0000ba  4398              BICS     r0,r0,r3
0000bc  4be1              LDR      r3,|L24.1092|
0000be  6118              STR      r0,[r3,#0x10]
;;;1092   		}break;
0000c0  e33f              B        |L24.1858|
;;;1093   
;;;1094   		/*---------------------------------------------------------------------------------------------------------*/
;;;1095   		/* I2S                                                                                                     */
;;;1096   		/*---------------------------------------------------------------------------------------------------------*/
;;;1097   		case E_FUNC_I2S:	
;;;1098   		{
;;;1099             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0xF<<0));
0000c2  2005              MOVS     r0,#5
0000c4  0700              LSLS     r0,r0,#28
0000c6  6b80              LDR      r0,[r0,#0x38]
0000c8  230f              MOVS     r3,#0xf
0000ca  4318              ORRS     r0,r0,r3
0000cc  2305              MOVS     r3,#5
0000ce  071b              LSLS     r3,r3,#28
0000d0  6398              STR      r0,[r3,#0x38]
;;;1100             	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x1<<15));
0000d2  4618              MOV      r0,r3
0000d4  6b00              LDR      r0,[r0,#0x30]
0000d6  2301              MOVS     r3,#1
0000d8  03db              LSLS     r3,r3,#15
0000da  4318              ORRS     r0,r0,r3
0000dc  2305              MOVS     r3,#5
0000de  071b              LSLS     r3,r3,#28
0000e0  6318              STR      r0,[r3,#0x30]
;;;1101             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1F<<5));			
0000e2  48d8              LDR      r0,|L24.1092|
0000e4  6900              LDR      r0,[r0,#0x10]
0000e6  231f              MOVS     r3,#0x1f
0000e8  015b              LSLS     r3,r3,#5
0000ea  4318              ORRS     r0,r0,r3
0000ec  4bd5              LDR      r3,|L24.1092|
0000ee  6118              STR      r0,[r3,#0x10]
;;;1102   		}break;
0000f0  e327              B        |L24.1858|
;;;1103   		
;;;1104   		/*---------------------------------------------------------------------------------------------------------*/
;;;1105   		/* CAN0                                                                                                    */
;;;1106   		/*---------------------------------------------------------------------------------------------------------*/
;;;1107   		case E_FUNC_CAN0:	
;;;1108   		{
;;;1109             	outpw(&SYS->GPDMFP, inpw(&SYS->GPDMFP) | (0x3<<6));
0000f2  2005              MOVS     r0,#5
0000f4  0700              LSLS     r0,r0,#28
0000f6  6bc0              LDR      r0,[r0,#0x3c]
0000f8  23c0              MOVS     r3,#0xc0
0000fa  4318              ORRS     r0,r0,r3
0000fc  2305              MOVS     r3,#5
0000fe  071b              LSLS     r3,r3,#28
000100  63d8              STR      r0,[r3,#0x3c]
;;;1110   		}break;	
000102  e31e              B        |L24.1858|
;;;1111   
;;;1112   		/*---------------------------------------------------------------------------------------------------------*/
;;;1113   		/* Analog Comparator                                                                                       */
;;;1114   		/*---------------------------------------------------------------------------------------------------------*/
;;;1115   		case E_FUNC_ACMP0:	
;;;1116   		case E_FUNC_ACMP1:
000104  bf00              NOP      
;;;1117   		{
;;;1118               if (function == E_FUNC_ACMP0)
000106  2906              CMP      r1,#6
000108  d101              BNE      |L24.270|
;;;1119                   u8Offset = 6;
00010a  2206              MOVS     r2,#6
00010c  e000              B        |L24.272|
                  |L24.270|
;;;1120               else
;;;1121                   u8Offset = 14;
00010e  220e              MOVS     r2,#0xe
                  |L24.272|
;;;1122             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0x3<<u8Offset));
000110  2005              MOVS     r0,#5
000112  0700              LSLS     r0,r0,#28
000114  6b80              LDR      r0,[r0,#0x38]
000116  2303              MOVS     r3,#3
000118  4093              LSLS     r3,r3,r2
00011a  4318              ORRS     r0,r0,r3
00011c  2305              MOVS     r3,#5
00011e  071b              LSLS     r3,r3,#28
000120  6398              STR      r0,[r3,#0x38]
;;;1123   		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
000122  48c8              LDR      r0,|L24.1092|
000124  6900              LDR      r0,[r0,#0x10]
000126  2301              MOVS     r3,#1
000128  02db              LSLS     r3,r3,#11
00012a  4398              BICS     r0,r0,r3
00012c  4bc5              LDR      r3,|L24.1092|
00012e  6118              STR      r0,[r3,#0x10]
;;;1124   		}break;
000130  e307              B        |L24.1858|
;;;1125   
;;;1126   		/*---------------------------------------------------------------------------------------------------------*/
;;;1127   		/* SPI                                                                                                     */
;;;1128   		/*---------------------------------------------------------------------------------------------------------*/
;;;1129   		case E_FUNC_SPI0:	
;;;1130   		{
;;;1131             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0xF<<0));
000132  2005              MOVS     r0,#5
000134  0700              LSLS     r0,r0,#28
000136  6b80              LDR      r0,[r0,#0x38]
000138  230f              MOVS     r3,#0xf
00013a  4318              ORRS     r0,r0,r3
00013c  2305              MOVS     r3,#5
00013e  071b              LSLS     r3,r3,#28
000140  6398              STR      r0,[r3,#0x38]
;;;1132             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0xF<<5));
000142  48c0              LDR      r0,|L24.1092|
000144  6900              LDR      r0,[r0,#0x10]
000146  23ff              MOVS     r3,#0xff
000148  33e1              ADDS     r3,r3,#0xe1
00014a  4398              BICS     r0,r0,r3
00014c  4bbd              LDR      r3,|L24.1092|
00014e  6118              STR      r0,[r3,#0x10]
;;;1133   
;;;1134   		}break;
000150  e2f7              B        |L24.1858|
;;;1135   
;;;1136   		case E_FUNC_SPI0_SS1:	
;;;1137   		{
;;;1138             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<10));
000152  2005              MOVS     r0,#5
000154  0700              LSLS     r0,r0,#28
000156  6b40              LDR      r0,[r0,#0x34]
000158  2301              MOVS     r3,#1
00015a  029b              LSLS     r3,r3,#10
00015c  4318              ORRS     r0,r0,r3
00015e  2305              MOVS     r3,#5
000160  071b              LSLS     r3,r3,#28
000162  6358              STR      r0,[r3,#0x34]
;;;1139             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<0));
000164  48b7              LDR      r0,|L24.1092|
000166  6900              LDR      r0,[r0,#0x10]
000168  2301              MOVS     r3,#1
00016a  4318              ORRS     r0,r0,r3
00016c  4bb5              LDR      r3,|L24.1092|
00016e  6118              STR      r0,[r3,#0x10]
;;;1140   		}break;
000170  e2e7              B        |L24.1858|
;;;1141   
;;;1142   		case E_FUNC_SPI0_2BIT_MODE:	
;;;1143   		{
;;;1144             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0x3<<4));
000172  2005              MOVS     r0,#5
000174  0700              LSLS     r0,r0,#28
000176  6b80              LDR      r0,[r0,#0x38]
000178  2330              MOVS     r3,#0x30
00017a  4318              ORRS     r0,r0,r3
00017c  2305              MOVS     r3,#5
00017e  071b              LSLS     r3,r3,#28
000180  6398              STR      r0,[r3,#0x38]
;;;1145   		}break;
000182  e2de              B        |L24.1858|
000184  e2db              B        |L24.1854|
000186  e264              B        |L24.1618|
000188  e282              B        |L24.1680|
00018a  e248              B        |L24.1566|
00018c  e246              B        |L24.1564|
00018e  e213              B        |L24.1464|
000190  e211              B        |L24.1462|
000192  e1d9              B        |L24.1352|
000194  e1d7              B        |L24.1350|
000196  e1b7              B        |L24.1288|
000198  e1b5              B        |L24.1286|
00019a  e241              B        |L24.1568|
00019c  e20d              B        |L24.1466|
00019e  e1d4              B        |L24.1354|
0001a0  e1b3              B        |L24.1290|
0001a2  e1a6              B        |L24.1266|
0001a4  e165              B        |L24.1138|
0001a6  e163              B        |L24.1136|
0001a8  e161              B        |L24.1134|
0001aa  e15f              B        |L24.1132|
0001ac  e15d              B        |L24.1130|
0001ae  e15b              B        |L24.1128|
0001b0  e14a              B        |L24.1096|
0001b2  e137              B        |L24.1060|
0001b4  e129              B        |L24.1034|
0001b6  e117              B        |L24.1000|
0001b8  e106              B        |L24.968|
0001ba  e0f5              B        |L24.936|
0001bc  e0e4              B        |L24.904|
0001be  e0d9              B        |L24.884|
0001c0  e0cc              B        |L24.860|
0001c2  e0c4              B        |L24.846|
0001c4  e0a3              B        |L24.782|
0001c6  e0ae              B        |L24.806|
0001c8  e0ac              B        |L24.804|
0001ca  e0aa              B        |L24.802|
0001cc  e0a8              B        |L24.800|
0001ce  e0a6              B        |L24.798|
0001d0  e0a4              B        |L24.796|
0001d2  e0b0              B        |L24.822|
0001d4  e092              B        |L24.764|
0001d6  e088              B        |L24.746|
0001d8  e07e              B        |L24.728|
0001da  e073              B        |L24.708|
0001dc  e062              B        |L24.676|
0001de  e057              B        |L24.656|
0001e0  e04d              B        |L24.638|
0001e2  e037              B        |L24.596|
0001e4  e02d              B        |L24.578|
0001e6  e022              B        |L24.558|
0001e8  e011              B        |L24.526|
0001ea  e7ff              B        |L24.492|
                  |L24.492|
;;;1146   
;;;1147   		case E_FUNC_SPI1:
;;;1148   		{
;;;1149             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0xF<<8));
0001ec  2005              MOVS     r0,#5
0001ee  0700              LSLS     r0,r0,#28
0001f0  6b80              LDR      r0,[r0,#0x38]
0001f2  230f              MOVS     r3,#0xf
0001f4  021b              LSLS     r3,r3,#8
0001f6  4318              ORRS     r0,r0,r3
0001f8  2305              MOVS     r3,#5
0001fa  071b              LSLS     r3,r3,#28
0001fc  6398              STR      r0,[r3,#0x38]
;;;1150   		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
0001fe  4891              LDR      r0,|L24.1092|
000200  6900              LDR      r0,[r0,#0x10]
000202  2301              MOVS     r3,#1
000204  02db              LSLS     r3,r3,#11
000206  4398              BICS     r0,r0,r3
000208  4b8e              LDR      r3,|L24.1092|
00020a  6118              STR      r0,[r3,#0x10]
;;;1151   		}break;
00020c  e299              B        |L24.1858|
                  |L24.526|
;;;1152   
;;;1153   		case E_FUNC_SPI1_SS1:	
;;;1154   		{
;;;1155             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<9));
00020e  2005              MOVS     r0,#5
000210  0700              LSLS     r0,r0,#28
000212  6b40              LDR      r0,[r0,#0x34]
000214  2301              MOVS     r3,#1
000216  025b              LSLS     r3,r3,#9
000218  4318              ORRS     r0,r0,r3
00021a  2305              MOVS     r3,#5
00021c  071b              LSLS     r3,r3,#28
00021e  6358              STR      r0,[r3,#0x34]
;;;1156             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<1));
000220  4888              LDR      r0,|L24.1092|
000222  6900              LDR      r0,[r0,#0x10]
000224  2302              MOVS     r3,#2
000226  4318              ORRS     r0,r0,r3
000228  4b86              LDR      r3,|L24.1092|
00022a  6118              STR      r0,[r3,#0x10]
;;;1157   		}break;
00022c  e289              B        |L24.1858|
                  |L24.558|
;;;1158   
;;;1159   		case E_FUNC_SPI1_2BIT_MODE:	
;;;1160   		{
;;;1161             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0x3<<12));
00022e  2005              MOVS     r0,#5
000230  0700              LSLS     r0,r0,#28
000232  6b80              LDR      r0,[r0,#0x38]
000234  2303              MOVS     r3,#3
000236  031b              LSLS     r3,r3,#12
000238  4318              ORRS     r0,r0,r3
00023a  2305              MOVS     r3,#5
00023c  071b              LSLS     r3,r3,#28
00023e  6398              STR      r0,[r3,#0x38]
;;;1162   		}break;
000240  e27f              B        |L24.1858|
                  |L24.578|
;;;1163   
;;;1164   		case E_FUNC_SPI2:	
;;;1165   		{
;;;1166             	outpw(&SYS->GPDMFP, inpw(&SYS->GPDMFP) | (0xF<<0));
000242  2005              MOVS     r0,#5
000244  0700              LSLS     r0,r0,#28
000246  6bc0              LDR      r0,[r0,#0x3c]
000248  230f              MOVS     r3,#0xf
00024a  4318              ORRS     r0,r0,r3
00024c  2305              MOVS     r3,#5
00024e  071b              LSLS     r3,r3,#28
000250  63d8              STR      r0,[r3,#0x3c]
;;;1167   		}break;				
000252  e276              B        |L24.1858|
                  |L24.596|
;;;1168   
;;;1169   		case E_FUNC_SPI2_SS1:	
;;;1170   		{
;;;1171              	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x1<<7));
000254  2005              MOVS     r0,#5
000256  0700              LSLS     r0,r0,#28
000258  6b00              LDR      r0,[r0,#0x30]
00025a  2380              MOVS     r3,#0x80
00025c  4318              ORRS     r0,r0,r3
00025e  2305              MOVS     r3,#5
000260  071b              LSLS     r3,r3,#28
000262  6318              STR      r0,[r3,#0x30]
;;;1172               outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<2));
000264  4877              LDR      r0,|L24.1092|
000266  6900              LDR      r0,[r0,#0x10]
000268  2304              MOVS     r3,#4
00026a  4318              ORRS     r0,r0,r3
00026c  4b75              LDR      r3,|L24.1092|
00026e  6118              STR      r0,[r3,#0x10]
;;;1173   		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
000270  4618              MOV      r0,r3
000272  6900              LDR      r0,[r0,#0x10]
000274  015b              LSLS     r3,r3,#5
000276  4398              BICS     r0,r0,r3
000278  4b72              LDR      r3,|L24.1092|
00027a  6118              STR      r0,[r3,#0x10]
;;;1174   		}break;
00027c  e261              B        |L24.1858|
                  |L24.638|
;;;1175   
;;;1176   		case E_FUNC_SPI2_2BIT_MODE:	
;;;1177   		{
;;;1178             	outpw(&SYS->GPDMFP, inpw(&SYS->GPDMFP) | (0x3<<4));
00027e  2005              MOVS     r0,#5
000280  0700              LSLS     r0,r0,#28
000282  6bc0              LDR      r0,[r0,#0x3c]
000284  2330              MOVS     r3,#0x30
000286  4318              ORRS     r0,r0,r3
000288  2305              MOVS     r3,#5
00028a  071b              LSLS     r3,r3,#28
00028c  63d8              STR      r0,[r3,#0x3c]
;;;1179   		}break;
00028e  e258              B        |L24.1858|
                  |L24.656|
;;;1180   
;;;1181   		case E_FUNC_SPI3:	
;;;1182   		{
;;;1183             	outpw(&SYS->GPDMFP, inpw(&SYS->GPDMFP) | (0xF<<8));
000290  2005              MOVS     r0,#5
000292  0700              LSLS     r0,r0,#28
000294  6bc0              LDR      r0,[r0,#0x3c]
000296  230f              MOVS     r3,#0xf
000298  021b              LSLS     r3,r3,#8
00029a  4318              ORRS     r0,r0,r3
00029c  2305              MOVS     r3,#5
00029e  071b              LSLS     r3,r3,#28
0002a0  63d8              STR      r0,[r3,#0x3c]
;;;1184    		}break;
0002a2  e24e              B        |L24.1858|
                  |L24.676|
;;;1185   
;;;1186   		case E_FUNC_SPI3_SS1:	
;;;1187   		{
;;;1188             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<14));
0002a4  2005              MOVS     r0,#5
0002a6  0700              LSLS     r0,r0,#28
0002a8  6b40              LDR      r0,[r0,#0x34]
0002aa  2301              MOVS     r3,#1
0002ac  039b              LSLS     r3,r3,#14
0002ae  4318              ORRS     r0,r0,r3
0002b0  2305              MOVS     r3,#5
0002b2  071b              LSLS     r3,r3,#28
0002b4  6358              STR      r0,[r3,#0x34]
;;;1189               outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<3));
0002b6  4863              LDR      r0,|L24.1092|
0002b8  6900              LDR      r0,[r0,#0x10]
0002ba  2308              MOVS     r3,#8
0002bc  4318              ORRS     r0,r0,r3
0002be  4b61              LDR      r3,|L24.1092|
0002c0  6118              STR      r0,[r3,#0x10]
;;;1190   		}break;
0002c2  e23e              B        |L24.1858|
                  |L24.708|
;;;1191   
;;;1192   		case E_FUNC_SPI3_2BIT_MODE:	
;;;1193   		{
;;;1194             	outpw(&SYS->GPDMFP, inpw(&SYS->GPDMFP) | (0x3<<12));
0002c4  2005              MOVS     r0,#5
0002c6  0700              LSLS     r0,r0,#28
0002c8  6bc0              LDR      r0,[r0,#0x3c]
0002ca  2303              MOVS     r3,#3
0002cc  031b              LSLS     r3,r3,#12
0002ce  4318              ORRS     r0,r0,r3
0002d0  2305              MOVS     r3,#5
0002d2  071b              LSLS     r3,r3,#28
0002d4  63d8              STR      r0,[r3,#0x3c]
;;;1195   		}break;
0002d6  e234              B        |L24.1858|
                  |L24.728|
;;;1196   
;;;1197   		/*---------------------------------------------------------------------------------------------------------*/
;;;1198   		/* SPI - QFN36PIN                                                                                          */
;;;1199   		/*---------------------------------------------------------------------------------------------------------*/
;;;1200   		case E_FUNC_SPI0_QFN36PIN:	
;;;1201   		{           		
;;;1202             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0xF<<0));
0002d8  2005              MOVS     r0,#5
0002da  0700              LSLS     r0,r0,#28
0002dc  6b80              LDR      r0,[r0,#0x38]
0002de  230f              MOVS     r3,#0xf
0002e0  4318              ORRS     r0,r0,r3
0002e2  2305              MOVS     r3,#5
0002e4  071b              LSLS     r3,r3,#28
0002e6  6398              STR      r0,[r3,#0x38]
;;;1203    		}break;
0002e8  e22b              B        |L24.1858|
                  |L24.746|
;;;1204   
;;;1205   		case E_FUNC_SPI0_SS1_QFN36PIN:	
;;;1206   		{
;;;1207             	outpw(&SYS->GPDMFP, inpw(&SYS->GPDMFP) | (0x1<<1));
0002ea  2005              MOVS     r0,#5
0002ec  0700              LSLS     r0,r0,#28
0002ee  6bc0              LDR      r0,[r0,#0x3c]
0002f0  2302              MOVS     r3,#2
0002f2  4318              ORRS     r0,r0,r3
0002f4  2305              MOVS     r3,#5
0002f6  071b              LSLS     r3,r3,#28
0002f8  63d8              STR      r0,[r3,#0x3c]
;;;1208   		}break;
0002fa  e222              B        |L24.1858|
                  |L24.764|
;;;1209   
;;;1210   		case E_FUNC_SPI0_2BIT_MODE_QFN36PIN:	
;;;1211   		{
;;;1212             	outpw(&SYS->GPDMFP, inpw(&SYS->GPDMFP) | (0x1<<2));
0002fc  2005              MOVS     r0,#5
0002fe  0700              LSLS     r0,r0,#28
000300  6bc0              LDR      r0,[r0,#0x3c]
000302  2304              MOVS     r3,#4
000304  4318              ORRS     r0,r0,r3
000306  2305              MOVS     r3,#5
000308  071b              LSLS     r3,r3,#28
00030a  63d8              STR      r0,[r3,#0x3c]
;;;1213   		}break;
00030c  e219              B        |L24.1858|
                  |L24.782|
;;;1214   
;;;1215   		/*---------------------------------------------------------------------------------------------------------*/
;;;1216   		/* ADC                                                                                                     */
;;;1217   		/*---------------------------------------------------------------------------------------------------------*/
;;;1218   		case E_FUNC_ADC7:
;;;1219   		{
;;;1220             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<2));
00030e  484d              LDR      r0,|L24.1092|
000310  6900              LDR      r0,[r0,#0x10]
000312  2304              MOVS     r3,#4
000314  4398              BICS     r0,r0,r3
000316  4b4b              LDR      r3,|L24.1092|
000318  6118              STR      r0,[r3,#0x10]
;;;1221           }
;;;1222   		case E_FUNC_ADC1:
00031a  bf00              NOP      
                  |L24.796|
;;;1223   		case E_FUNC_ADC2:
00031c  bf00              NOP      
                  |L24.798|
;;;1224   		case E_FUNC_ADC3:
00031e  bf00              NOP      
                  |L24.800|
;;;1225   		case E_FUNC_ADC4:
000320  bf00              NOP      
                  |L24.802|
;;;1226   		case E_FUNC_ADC5:
000322  bf00              NOP      
                  |L24.804|
;;;1227   		case E_FUNC_ADC6:
000324  bf00              NOP      
                  |L24.806|
;;;1228           {
;;;1229   		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
000326  4847              LDR      r0,|L24.1092|
000328  6900              LDR      r0,[r0,#0x10]
00032a  2301              MOVS     r3,#1
00032c  02db              LSLS     r3,r3,#11
00032e  4398              BICS     r0,r0,r3
000330  4b44              LDR      r3,|L24.1092|
000332  6118              STR      r0,[r3,#0x10]
;;;1230           }
;;;1231   		case E_FUNC_ADC0:
000334  bf00              NOP      
                  |L24.822|
;;;1232   		{
;;;1233             	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x1<<(function-E_FUNC_ADC0)));
000336  2005              MOVS     r0,#5
000338  0700              LSLS     r0,r0,#28
00033a  6b00              LDR      r0,[r0,#0x30]
00033c  460b              MOV      r3,r1
00033e  3b17              SUBS     r3,r3,#0x17
000340  2401              MOVS     r4,#1
000342  409c              LSLS     r4,r4,r3
000344  4320              ORRS     r0,r0,r4
000346  2305              MOVS     r3,#5
000348  071b              LSLS     r3,r3,#28
00034a  6318              STR      r0,[r3,#0x30]
;;;1234           }break;
00034c  e1f9              B        |L24.1858|
                  |L24.846|
;;;1235   
;;;1236     		/*---------------------------------------------------------------------------------------------------------*/
;;;1237   		/* External Interrupt                                                                                      */
;;;1238   		/*---------------------------------------------------------------------------------------------------------*/		
;;;1239   	  	case E_FUNC_EXTINT0:
;;;1240           {
;;;1241             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<3));
00034e  483d              LDR      r0,|L24.1092|
000350  6900              LDR      r0,[r0,#0x10]
000352  2308              MOVS     r3,#8
000354  4398              BICS     r0,r0,r3
000356  4b3b              LDR      r3,|L24.1092|
000358  6118              STR      r0,[r3,#0x10]
;;;1242           }
;;;1243   	  	case E_FUNC_EXTINT1:
00035a  bf00              NOP      
                  |L24.860|
;;;1244   		{	
;;;1245             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<(14+(function-E_FUNC_EXTINT0))));
00035c  2005              MOVS     r0,#5
00035e  0700              LSLS     r0,r0,#28
000360  6b43              LDR      r3,[r0,#0x34]
000362  4608              MOV      r0,r1
000364  3811              SUBS     r0,r0,#0x11
000366  2401              MOVS     r4,#1
000368  4084              LSLS     r4,r4,r0
00036a  4323              ORRS     r3,r3,r4
00036c  2005              MOVS     r0,#5
00036e  0700              LSLS     r0,r0,#28
000370  6343              STR      r3,[r0,#0x34]
;;;1246   		}break;
000372  e1e6              B        |L24.1858|
                  |L24.884|
;;;1247   
;;;1248   		/*---------------------------------------------------------------------------------------------------------*/
;;;1249   		/* TIMER - External Counter input or toggle output pins                                                    */
;;;1250   		/*---------------------------------------------------------------------------------------------------------*/
;;;1251   		case E_FUNC_TMR0:
;;;1252   		{
;;;1253             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<8));
000374  2005              MOVS     r0,#5
000376  0700              LSLS     r0,r0,#28
000378  6b40              LDR      r0,[r0,#0x34]
00037a  23ff              MOVS     r3,#0xff
00037c  3301              ADDS     r3,#1
00037e  4318              ORRS     r0,r0,r3
000380  2305              MOVS     r3,#5
000382  071b              LSLS     r3,r3,#28
000384  6358              STR      r0,[r3,#0x34]
;;;1254   		}break;
000386  e1dc              B        |L24.1858|
                  |L24.904|
;;;1255   	
;;;1256   		case E_FUNC_TMR1:
;;;1257   		{
;;;1258             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<9));
000388  2005              MOVS     r0,#5
00038a  0700              LSLS     r0,r0,#28
00038c  6b40              LDR      r0,[r0,#0x34]
00038e  2301              MOVS     r3,#1
000390  025b              LSLS     r3,r3,#9
000392  4318              ORRS     r0,r0,r3
000394  2305              MOVS     r3,#5
000396  071b              LSLS     r3,r3,#28
000398  6358              STR      r0,[r3,#0x34]
;;;1259             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<1));
00039a  482a              LDR      r0,|L24.1092|
00039c  6900              LDR      r0,[r0,#0x10]
00039e  2302              MOVS     r3,#2
0003a0  4398              BICS     r0,r0,r3
0003a2  4b28              LDR      r3,|L24.1092|
0003a4  6118              STR      r0,[r3,#0x10]
;;;1260   		}break;
0003a6  e1cc              B        |L24.1858|
                  |L24.936|
;;;1261   
;;;1262   		case E_FUNC_TMR2:
;;;1263   		{
;;;1264             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<10));
0003a8  2005              MOVS     r0,#5
0003aa  0700              LSLS     r0,r0,#28
0003ac  6b40              LDR      r0,[r0,#0x34]
0003ae  2301              MOVS     r3,#1
0003b0  029b              LSLS     r3,r3,#10
0003b2  4318              ORRS     r0,r0,r3
0003b4  2305              MOVS     r3,#5
0003b6  071b              LSLS     r3,r3,#28
0003b8  6358              STR      r0,[r3,#0x34]
;;;1265             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<0));
0003ba  4822              LDR      r0,|L24.1092|
0003bc  6900              LDR      r0,[r0,#0x10]
0003be  0840              LSRS     r0,r0,#1
0003c0  0040              LSLS     r0,r0,#1
0003c2  4b20              LDR      r3,|L24.1092|
0003c4  6118              STR      r0,[r3,#0x10]
;;;1266   		}break;
0003c6  e1bc              B        |L24.1858|
                  |L24.968|
;;;1267   
;;;1268   		case E_FUNC_TMR3:
;;;1269   		{
;;;1270             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<11));
0003c8  2005              MOVS     r0,#5
0003ca  0700              LSLS     r0,r0,#28
0003cc  6b40              LDR      r0,[r0,#0x34]
0003ce  2301              MOVS     r3,#1
0003d0  02db              LSLS     r3,r3,#11
0003d2  4318              ORRS     r0,r0,r3
0003d4  2305              MOVS     r3,#5
0003d6  071b              LSLS     r3,r3,#28
0003d8  6358              STR      r0,[r3,#0x34]
;;;1271             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<4));
0003da  481a              LDR      r0,|L24.1092|
0003dc  6900              LDR      r0,[r0,#0x10]
0003de  2310              MOVS     r3,#0x10
0003e0  4398              BICS     r0,r0,r3
0003e2  4b18              LDR      r3,|L24.1092|
0003e4  6118              STR      r0,[r3,#0x10]
;;;1272   		}break;
0003e6  e1ac              B        |L24.1858|
                  |L24.1000|
;;;1273   
;;;1274   		/*---------------------------------------------------------------------------------------------------------*/
;;;1275   		/* TIMER - External Capture input pins                                                                     */
;;;1276   		/*---------------------------------------------------------------------------------------------------------*/
;;;1277   		case E_FUNC_T0EX:
;;;1278   		{
;;;1279             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<15));
0003e8  2005              MOVS     r0,#5
0003ea  0700              LSLS     r0,r0,#28
0003ec  6b40              LDR      r0,[r0,#0x34]
0003ee  2301              MOVS     r3,#1
0003f0  03db              LSLS     r3,r3,#15
0003f2  4318              ORRS     r0,r0,r3
0003f4  2305              MOVS     r3,#5
0003f6  071b              LSLS     r3,r3,#28
0003f8  6358              STR      r0,[r3,#0x34]
;;;1280             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<24));
0003fa  4812              LDR      r0,|L24.1092|
0003fc  6900              LDR      r0,[r0,#0x10]
0003fe  2301              MOVS     r3,#1
000400  061b              LSLS     r3,r3,#24
000402  4318              ORRS     r0,r0,r3
000404  4b0f              LDR      r3,|L24.1092|
000406  6118              STR      r0,[r3,#0x10]
;;;1281   		}break;
000408  e19b              B        |L24.1858|
                  |L24.1034|
;;;1282   	
;;;1283   		case E_FUNC_T1EX:
;;;1284   		{
;;;1285             	outpw(&SYS->GPEMFP, inpw(&SYS->GPEMFP) | (0x1<<5));
00040a  480e              LDR      r0,|L24.1092|
00040c  6800              LDR      r0,[r0,#0]
00040e  2320              MOVS     r3,#0x20
000410  4318              ORRS     r0,r0,r3
000412  4b0c              LDR      r3,|L24.1092|
000414  6018              STR      r0,[r3,#0]
;;;1286             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<25));
000416  4618              MOV      r0,r3
000418  6900              LDR      r0,[r0,#0x10]
00041a  04db              LSLS     r3,r3,#19
00041c  4318              ORRS     r0,r0,r3
00041e  4b09              LDR      r3,|L24.1092|
000420  6118              STR      r0,[r3,#0x10]
;;;1287   		}break;
000422  e18e              B        |L24.1858|
                  |L24.1060|
;;;1288   
;;;1289   		case E_FUNC_T2EX:
;;;1290   		{
;;;1291             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<2));
000424  2005              MOVS     r0,#5
000426  0700              LSLS     r0,r0,#28
000428  6b40              LDR      r0,[r0,#0x34]
00042a  2304              MOVS     r3,#4
00042c  4318              ORRS     r0,r0,r3
00042e  2305              MOVS     r3,#5
000430  071b              LSLS     r3,r3,#28
000432  6358              STR      r0,[r3,#0x34]
;;;1292             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<26));
000434  4803              LDR      r0,|L24.1092|
000436  6900              LDR      r0,[r0,#0x10]
000438  2301              MOVS     r3,#1
00043a  069b              LSLS     r3,r3,#26
00043c  4318              ORRS     r0,r0,r3
00043e  4b01              LDR      r3,|L24.1092|
000440  6118              STR      r0,[r3,#0x10]
;;;1293   		}break;
000442  e17e              B        |L24.1858|
                  |L24.1092|
                          DCD      0x50000040
                  |L24.1096|
;;;1294   
;;;1295   		case E_FUNC_T3EX:
;;;1296   		{
;;;1297             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<3));
000448  2005              MOVS     r0,#5
00044a  0700              LSLS     r0,r0,#28
00044c  6b40              LDR      r0,[r0,#0x34]
00044e  2308              MOVS     r3,#8
000450  4318              ORRS     r0,r0,r3
000452  2305              MOVS     r3,#5
000454  071b              LSLS     r3,r3,#28
000456  6358              STR      r0,[r3,#0x34]
;;;1298             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<27));
000458  48bb              LDR      r0,|L24.1864|
00045a  6900              LDR      r0,[r0,#0x10]
00045c  2301              MOVS     r3,#1
00045e  06db              LSLS     r3,r3,#27
000460  4318              ORRS     r0,r0,r3
000462  4bb9              LDR      r3,|L24.1864|
000464  6118              STR      r0,[r3,#0x10]
;;;1299   		}break;
000466  e16c              B        |L24.1858|
                  |L24.1128|
;;;1300   
;;;1301   		/*---------------------------------------------------------------------------------------------------------*/
;;;1302   		/* UART                                                                                                    */
;;;1303   		/*--------------------------------------------------------------------------------------------------------*/
;;;1304   		case E_FUNC_UART0:
;;;1305   		case E_FUNC_UART0_RX_TX:
000468  bf00              NOP      
                  |L24.1130|
;;;1306   		case E_FUNC_UART0_RTS_CTS:
00046a  bf00              NOP      
                  |L24.1132|
;;;1307   		case E_FUNC_UART1:
00046c  bf00              NOP      
                  |L24.1134|
;;;1308   		case E_FUNC_UART1_RX_TX:
00046e  bf00              NOP      
                  |L24.1136|
;;;1309   		case E_FUNC_UART1_RTS_CTS:
000470  bf00              NOP      
                  |L24.1138|
;;;1310   		{
;;;1311               if ((function >= E_FUNC_UART0) && (function <= E_FUNC_UART0_RTS_CTS))
000472  2929              CMP      r1,#0x29
000474  db03              BLT      |L24.1150|
000476  292b              CMP      r1,#0x2b
000478  dc01              BGT      |L24.1150|
;;;1312                   u8Offset = 0;
00047a  2200              MOVS     r2,#0
00047c  e000              B        |L24.1152|
                  |L24.1150|
;;;1313               else
;;;1314                   u8Offset = 4;                                 
00047e  2204              MOVS     r2,#4
                  |L24.1152|
;;;1315               if ((function == E_FUNC_UART0) || (function == E_FUNC_UART1))
000480  2929              CMP      r1,#0x29
000482  d001              BEQ      |L24.1160|
000484  292c              CMP      r1,#0x2c
000486  d110              BNE      |L24.1194|
                  |L24.1160|
;;;1316             	{
;;;1317                   outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0xF<<(0+u8Offset)));
000488  2005              MOVS     r0,#5
00048a  0700              LSLS     r0,r0,#28
00048c  6b40              LDR      r0,[r0,#0x34]
00048e  230f              MOVS     r3,#0xf
000490  4093              LSLS     r3,r3,r2
000492  4318              ORRS     r0,r0,r3
000494  2305              MOVS     r3,#5
000496  071b              LSLS     r3,r3,#28
000498  6358              STR      r0,[r3,#0x34]
;;;1318   		  	    outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
00049a  48ab              LDR      r0,|L24.1864|
00049c  6900              LDR      r0,[r0,#0x10]
00049e  2301              MOVS     r3,#1
0004a0  02db              LSLS     r3,r3,#11
0004a2  4398              BICS     r0,r0,r3
0004a4  4ba8              LDR      r3,|L24.1864|
0004a6  6118              STR      r0,[r3,#0x10]
0004a8  e022              B        |L24.1264|
                  |L24.1194|
;;;1319               }else
;;;1320               if ((function == E_FUNC_UART0_RX_TX) || (function == E_FUNC_UART1_RX_TX))
0004aa  292a              CMP      r1,#0x2a
0004ac  d001              BEQ      |L24.1202|
0004ae  292d              CMP      r1,#0x2d
0004b0  d109              BNE      |L24.1222|
                  |L24.1202|
;;;1321               {
;;;1322                   outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x3<<(0+u8Offset)));
0004b2  2005              MOVS     r0,#5
0004b4  0700              LSLS     r0,r0,#28
0004b6  6b40              LDR      r0,[r0,#0x34]
0004b8  2303              MOVS     r3,#3
0004ba  4093              LSLS     r3,r3,r2
0004bc  4318              ORRS     r0,r0,r3
0004be  2305              MOVS     r3,#5
0004c0  071b              LSLS     r3,r3,#28
0004c2  6358              STR      r0,[r3,#0x34]
0004c4  e014              B        |L24.1264|
                  |L24.1222|
;;;1323               }else
;;;1324               if ((function == E_FUNC_UART0_RTS_CTS) || (function == E_FUNC_UART1_RTS_CTS))
0004c6  292b              CMP      r1,#0x2b
0004c8  d001              BEQ      |L24.1230|
0004ca  292e              CMP      r1,#0x2e
0004cc  d110              BNE      |L24.1264|
                  |L24.1230|
;;;1325               {
;;;1326                   outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x3<<(2+u8Offset)));
0004ce  2005              MOVS     r0,#5
0004d0  0700              LSLS     r0,r0,#28
0004d2  6b40              LDR      r0,[r0,#0x34]
0004d4  1c93              ADDS     r3,r2,#2
0004d6  2403              MOVS     r4,#3
0004d8  409c              LSLS     r4,r4,r3
0004da  4320              ORRS     r0,r0,r4
0004dc  2305              MOVS     r3,#5
0004de  071b              LSLS     r3,r3,#28
0004e0  6358              STR      r0,[r3,#0x34]
;;;1327   		  	    outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
0004e2  4899              LDR      r0,|L24.1864|
0004e4  6900              LDR      r0,[r0,#0x10]
0004e6  2301              MOVS     r3,#1
0004e8  02db              LSLS     r3,r3,#11
0004ea  4398              BICS     r0,r0,r3
0004ec  4b96              LDR      r3,|L24.1864|
0004ee  6118              STR      r0,[r3,#0x10]
                  |L24.1264|
;;;1328               }
;;;1329   		}break;
0004f0  e127              B        |L24.1858|
                  |L24.1266|
;;;1330   
;;;1331   		case E_FUNC_UART2:
;;;1332   		{
;;;1333             	outpw(&SYS->GPDMFP, inpw(&SYS->GPDMFP) | (0x3<<14));
0004f2  2005              MOVS     r0,#5
0004f4  0700              LSLS     r0,r0,#28
0004f6  6bc0              LDR      r0,[r0,#0x3c]
0004f8  2303              MOVS     r3,#3
0004fa  039b              LSLS     r3,r3,#14
0004fc  4318              ORRS     r0,r0,r3
0004fe  2305              MOVS     r3,#5
000500  071b              LSLS     r3,r3,#28
000502  63d8              STR      r0,[r3,#0x3c]
;;;1334           }break;
000504  e11d              B        |L24.1858|
                  |L24.1286|
;;;1335   
;;;1336   		/*---------------------------------------------------------------------------------------------------------*/
;;;1337   		/* PWM                                                                                                     */
;;;1338   		/*---------------------------------------------------------------------------------------------------------*/
;;;1339   		case E_FUNC_PWM0:
;;;1340   		case E_FUNC_PWM1:
000506  bf00              NOP      
                  |L24.1288|
;;;1341   		case E_FUNC_PWM01:
000508  bf00              NOP      
                  |L24.1290|
;;;1342   		{
;;;1343               if (function == E_FUNC_PWM01)
00050a  2930              CMP      r1,#0x30
00050c  d108              BNE      |L24.1312|
;;;1344               {
;;;1345       		  	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<12));
00050e  2005              MOVS     r0,#5
000510  0700              LSLS     r0,r0,#28
000512  6b00              LDR      r0,[r0,#0x30]
000514  020b              LSLS     r3,r1,#8
000516  4318              ORRS     r0,r0,r3
000518  2305              MOVS     r3,#5
00051a  071b              LSLS     r3,r3,#28
00051c  6318              STR      r0,[r3,#0x30]
00051e  e00a              B        |L24.1334|
                  |L24.1312|
;;;1346               }else
;;;1347               {
;;;1348       		  	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x1<<(12+(function-E_FUNC_PWM0))));
000520  2005              MOVS     r0,#5
000522  0700              LSLS     r0,r0,#28
000524  6b03              LDR      r3,[r0,#0x30]
000526  4608              MOV      r0,r1
000528  3828              SUBS     r0,r0,#0x28
00052a  2401              MOVS     r4,#1
00052c  4084              LSLS     r4,r4,r0
00052e  4323              ORRS     r3,r3,r4
000530  2005              MOVS     r0,#5
000532  0700              LSLS     r0,r0,#28
000534  6303              STR      r3,[r0,#0x30]
                  |L24.1334|
;;;1349               }
;;;1350   	        outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
000536  4884              LDR      r0,|L24.1864|
000538  6900              LDR      r0,[r0,#0x10]
00053a  2301              MOVS     r3,#1
00053c  02db              LSLS     r3,r3,#11
00053e  4398              BICS     r0,r0,r3
000540  4b81              LDR      r3,|L24.1864|
000542  6118              STR      r0,[r3,#0x10]
;;;1351   		}break;
000544  e0fd              B        |L24.1858|
                  |L24.1350|
;;;1352   
;;;1353   		case E_FUNC_PWM2:
;;;1354   		case E_FUNC_PWM3:
000546  bf00              NOP      
                  |L24.1352|
;;;1355   		case E_FUNC_PWM23:
000548  bf00              NOP      
                  |L24.1354|
;;;1356   		{
;;;1357               if (function == E_FUNC_PWM23)
00054a  2931              CMP      r1,#0x31
00054c  d116              BNE      |L24.1404|
;;;1358               {
;;;1359       		  	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<14));
00054e  2005              MOVS     r0,#5
000550  0700              LSLS     r0,r0,#28
000552  6b00              LDR      r0,[r0,#0x30]
000554  2303              MOVS     r3,#3
000556  039b              LSLS     r3,r3,#14
000558  4318              ORRS     r0,r0,r3
00055a  2305              MOVS     r3,#5
00055c  071b              LSLS     r3,r3,#28
00055e  6318              STR      r0,[r3,#0x30]
;;;1360       		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<9));
000560  4879              LDR      r0,|L24.1864|
000562  6900              LDR      r0,[r0,#0x10]
000564  2301              MOVS     r3,#1
000566  025b              LSLS     r3,r3,#9
000568  4398              BICS     r0,r0,r3
00056a  4b77              LDR      r3,|L24.1864|
00056c  6118              STR      r0,[r3,#0x10]
;;;1361       		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
00056e  4618              MOV      r0,r3
000570  6900              LDR      r0,[r0,#0x10]
000572  015b              LSLS     r3,r3,#5
000574  4398              BICS     r0,r0,r3
000576  4b74              LDR      r3,|L24.1864|
000578  6118              STR      r0,[r3,#0x10]
00057a  e01b              B        |L24.1460|
                  |L24.1404|
;;;1362               }else
;;;1363               {
;;;1364       		  	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x1<<(14+(function-E_FUNC_PWM2))));
00057c  2005              MOVS     r0,#5
00057e  0700              LSLS     r0,r0,#28
000580  6b03              LDR      r3,[r0,#0x30]
000582  4608              MOV      r0,r1
000584  3828              SUBS     r0,r0,#0x28
000586  2401              MOVS     r4,#1
000588  4084              LSLS     r4,r4,r0
00058a  4323              ORRS     r3,r3,r4
00058c  2005              MOVS     r0,#5
00058e  0700              LSLS     r0,r0,#28
000590  6303              STR      r3,[r0,#0x30]
;;;1365                   if (function == E_FUNC_PWM2)
000592  2936              CMP      r1,#0x36
000594  d107              BNE      |L24.1446|
;;;1366       		  	    outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<11));
000596  486c              LDR      r0,|L24.1864|
000598  6900              LDR      r0,[r0,#0x10]
00059a  2301              MOVS     r3,#1
00059c  02db              LSLS     r3,r3,#11
00059e  4398              BICS     r0,r0,r3
0005a0  4b69              LDR      r3,|L24.1864|
0005a2  6118              STR      r0,[r3,#0x10]
0005a4  e006              B        |L24.1460|
                  |L24.1446|
;;;1367                   else
;;;1368           		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x1<<9));
0005a6  4868              LDR      r0,|L24.1864|
0005a8  6900              LDR      r0,[r0,#0x10]
0005aa  2301              MOVS     r3,#1
0005ac  025b              LSLS     r3,r3,#9
0005ae  4398              BICS     r0,r0,r3
0005b0  4b65              LDR      r3,|L24.1864|
0005b2  6118              STR      r0,[r3,#0x10]
                  |L24.1460|
;;;1369               }
;;;1370   		}break;
0005b4  e0c5              B        |L24.1858|
                  |L24.1462|
;;;1371   
;;;1372   		case E_FUNC_PWM4:
;;;1373   		case E_FUNC_PWM5:
0005b6  bf00              NOP      
                  |L24.1464|
;;;1374   		case E_FUNC_PWM45:
0005b8  bf00              NOP      
                  |L24.1466|
;;;1375   		{
;;;1376               if (function == E_FUNC_PWM45)
0005ba  2932              CMP      r1,#0x32
0005bc  d115              BNE      |L24.1514|
;;;1377       		{
;;;1378                 	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<11));
0005be  2005              MOVS     r0,#5
0005c0  0700              LSLS     r0,r0,#28
0005c2  6b40              LDR      r0,[r0,#0x34]
0005c4  2301              MOVS     r3,#1
0005c6  02db              LSLS     r3,r3,#11
0005c8  4318              ORRS     r0,r0,r3
0005ca  2305              MOVS     r3,#5
0005cc  071b              LSLS     r3,r3,#28
0005ce  6358              STR      r0,[r3,#0x34]
;;;1379       		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<4));
0005d0  485d              LDR      r0,|L24.1864|
0005d2  6900              LDR      r0,[r0,#0x10]
0005d4  2310              MOVS     r3,#0x10
0005d6  4318              ORRS     r0,r0,r3
0005d8  4b5b              LDR      r3,|L24.1864|
0005da  6118              STR      r0,[r3,#0x10]
;;;1380                 	outpw(&SYS->GPEMFP, inpw(&SYS->GPEMFP) | (0x1<<5));
0005dc  4618              MOV      r0,r3
0005de  6800              LDR      r0,[r0,#0]
0005e0  2320              MOVS     r3,#0x20
0005e2  4318              ORRS     r0,r0,r3
0005e4  4b58              LDR      r3,|L24.1864|
0005e6  6018              STR      r0,[r3,#0]
0005e8  e017              B        |L24.1562|
                  |L24.1514|
;;;1381               }else
;;;1382               if (function == E_FUNC_PWM4)
0005ea  2938              CMP      r1,#0x38
0005ec  d10f              BNE      |L24.1550|
;;;1383               {
;;;1384                 	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x1<<11));
0005ee  2005              MOVS     r0,#5
0005f0  0700              LSLS     r0,r0,#28
0005f2  6b40              LDR      r0,[r0,#0x34]
0005f4  2301              MOVS     r3,#1
0005f6  02db              LSLS     r3,r3,#11
0005f8  4318              ORRS     r0,r0,r3
0005fa  2305              MOVS     r3,#5
0005fc  071b              LSLS     r3,r3,#28
0005fe  6358              STR      r0,[r3,#0x34]
;;;1385       		  	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x1<<4));
000600  4851              LDR      r0,|L24.1864|
000602  6900              LDR      r0,[r0,#0x10]
000604  2310              MOVS     r3,#0x10
000606  4318              ORRS     r0,r0,r3
000608  4b4f              LDR      r3,|L24.1864|
00060a  6118              STR      r0,[r3,#0x10]
00060c  e005              B        |L24.1562|
                  |L24.1550|
;;;1386               }else
;;;1387               {
;;;1388                 	outpw(&SYS->GPEMFP, inpw(&SYS->GPEMFP) | (0x1<<5));
00060e  484e              LDR      r0,|L24.1864|
000610  6800              LDR      r0,[r0,#0]
000612  2320              MOVS     r3,#0x20
000614  4318              ORRS     r0,r0,r3
000616  4b4c              LDR      r3,|L24.1864|
000618  6018              STR      r0,[r3,#0]
                  |L24.1562|
;;;1389               }
;;;1390   		}break;
00061a  e092              B        |L24.1858|
                  |L24.1564|
;;;1391   
;;;1392   		case E_FUNC_PWM6:
;;;1393   		case E_FUNC_PWM7:
00061c  bf00              NOP      
                  |L24.1566|
;;;1394   		case E_FUNC_PWM67:
00061e  bf00              NOP      
                  |L24.1568|
;;;1395   		{
;;;1396               if (function == E_FUNC_PWM67)
000620  2933              CMP      r1,#0x33
000622  d106              BNE      |L24.1586|
;;;1397   		  	{
;;;1398                   outpw(&SYS->GPEMFP, inpw(&SYS->GPEMFP) | (0x3<<0));
000624  4848              LDR      r0,|L24.1864|
000626  6800              LDR      r0,[r0,#0]
000628  2303              MOVS     r3,#3
00062a  4318              ORRS     r0,r0,r3
00062c  4b46              LDR      r3,|L24.1864|
00062e  6018              STR      r0,[r3,#0]
000630  e00e              B        |L24.1616|
                  |L24.1586|
;;;1399               }else
;;;1400               if (function == E_FUNC_PWM6)
000632  293a              CMP      r1,#0x3a
000634  d106              BNE      |L24.1604|
;;;1401               {
;;;1402                   outpw(&SYS->GPEMFP, inpw(&SYS->GPEMFP) | (0x1<<0));
000636  4844              LDR      r0,|L24.1864|
000638  6800              LDR      r0,[r0,#0]
00063a  2301              MOVS     r3,#1
00063c  4318              ORRS     r0,r0,r3
00063e  4b42              LDR      r3,|L24.1864|
000640  6018              STR      r0,[r3,#0]
000642  e005              B        |L24.1616|
                  |L24.1604|
;;;1403               }else
;;;1404               {
;;;1405                   outpw(&SYS->GPEMFP, inpw(&SYS->GPEMFP) | (0x1<<1));
000644  4840              LDR      r0,|L24.1864|
000646  6800              LDR      r0,[r0,#0]
000648  2302              MOVS     r3,#2
00064a  4318              ORRS     r0,r0,r3
00064c  4b3e              LDR      r3,|L24.1864|
00064e  6018              STR      r0,[r3,#0]
                  |L24.1616|
;;;1406               }
;;;1407   		}break;
000650  e077              B        |L24.1858|
                  |L24.1618|
;;;1408   
;;;1409   		/*---------------------------------------------------------------------------------------------------------*/
;;;1410   		/* EBI                                                                                                     */
;;;1411   		/*---------------------------------------------------------------------------------------------------------*/
;;;1412   		case E_FUNC_EBI_16B:	
;;;1413   		{
;;;1414   			// Enable nWRH & nWRL for support Byte-Write in 16bit Data Width Device(SRAM) 
;;;1415             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x3<<2));
000652  2005              MOVS     r0,#5
000654  0700              LSLS     r0,r0,#28
000656  6b40              LDR      r0,[r0,#0x34]
000658  230c              MOVS     r3,#0xc
00065a  4318              ORRS     r0,r0,r3
00065c  2305              MOVS     r3,#5
00065e  071b              LSLS     r3,r3,#28
000660  6358              STR      r0,[r3,#0x34]
;;;1416             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x3<<13));			
000662  4839              LDR      r0,|L24.1864|
000664  6900              LDR      r0,[r0,#0x10]
000666  2303              MOVS     r3,#3
000668  035b              LSLS     r3,r3,#13
00066a  4318              ORRS     r0,r0,r3
00066c  4b36              LDR      r3,|L24.1864|
00066e  6118              STR      r0,[r3,#0x10]
;;;1417   		
;;;1418   			// Enable EBI AD High-byte, bit 15~8
;;;1419             	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x703E));
000670  2005              MOVS     r0,#5
000672  0700              LSLS     r0,r0,#28
000674  6b00              LDR      r0,[r0,#0x30]
000676  4b35              LDR      r3,|L24.1868|
000678  4318              ORRS     r0,r0,r3
00067a  2305              MOVS     r3,#5
00067c  071b              LSLS     r3,r3,#28
00067e  6318              STR      r0,[r3,#0x30]
;;;1420             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0xFF<<16));			
000680  4831              LDR      r0,|L24.1864|
000682  6900              LDR      r0,[r0,#0x10]
000684  23ff              MOVS     r3,#0xff
000686  041b              LSLS     r3,r3,#16
000688  4318              ORRS     r0,r0,r3
00068a  4b2f              LDR      r3,|L24.1864|
00068c  6118              STR      r0,[r3,#0x10]
;;;1421   		}
;;;1422   				
;;;1423   		case E_FUNC_EBI_8B:	
00068e  bf00              NOP      
                  |L24.1680|
;;;1424   		{
;;;1425               if (function == E_FUNC_EBI_8B)
000690  293c              CMP      r1,#0x3c
000692  d11e              BNE      |L24.1746|
;;;1426               {
;;;1427       			// Disable nWRH & nWRL for support Byte-Write in 16bit Data Width Device(SRAM) 
;;;1428                 	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) & ~(0x3<<2));
000694  2005              MOVS     r0,#5
000696  0700              LSLS     r0,r0,#28
000698  6b40              LDR      r0,[r0,#0x34]
00069a  230c              MOVS     r3,#0xc
00069c  4398              BICS     r0,r0,r3
00069e  2305              MOVS     r3,#5
0006a0  071b              LSLS     r3,r3,#28
0006a2  6358              STR      r0,[r3,#0x34]
;;;1429                 	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0x3<<13));			
0006a4  4828              LDR      r0,|L24.1864|
0006a6  6900              LDR      r0,[r0,#0x10]
0006a8  2303              MOVS     r3,#3
0006aa  035b              LSLS     r3,r3,#13
0006ac  4398              BICS     r0,r0,r3
0006ae  4b26              LDR      r3,|L24.1864|
0006b0  6118              STR      r0,[r3,#0x10]
;;;1430       		
;;;1431       			// Disable EBI AD High-byte, bit 15~8
;;;1432                 	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) & ~(0x703E));
0006b2  2005              MOVS     r0,#5
0006b4  0700              LSLS     r0,r0,#28
0006b6  6b00              LDR      r0,[r0,#0x30]
0006b8  4b24              LDR      r3,|L24.1868|
0006ba  43db              MVNS     r3,r3
0006bc  4018              ANDS     r0,r0,r3
0006be  2305              MOVS     r3,#5
0006c0  071b              LSLS     r3,r3,#28
0006c2  6318              STR      r0,[r3,#0x30]
;;;1433                 	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) & ~(0xFF<<16));			
0006c4  4820              LDR      r0,|L24.1864|
0006c6  6900              LDR      r0,[r0,#0x10]
0006c8  23ff              MOVS     r3,#0xff
0006ca  041b              LSLS     r3,r3,#16
0006cc  4398              BICS     r0,r0,r3
0006ce  4b1e              LDR      r3,|L24.1864|
0006d0  6118              STR      r0,[r3,#0x10]
                  |L24.1746|
;;;1434               }
;;;1435   
;;;1436   			// Enable EBI_EN and EBI_MCLK_EN
;;;1437             	outpw(&SYS->ALTMFP, inpw(&SYS->ALTMFP) | (0x3<<11));			
0006d2  481d              LDR      r0,|L24.1864|
0006d4  6900              LDR      r0,[r0,#0x10]
0006d6  2303              MOVS     r3,#3
0006d8  02db              LSLS     r3,r3,#11
0006da  4318              ORRS     r0,r0,r3
0006dc  4b1a              LDR      r3,|L24.1864|
0006de  6118              STR      r0,[r3,#0x10]
;;;1438             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0x1<<8));
0006e0  2005              MOVS     r0,#5
0006e2  0700              LSLS     r0,r0,#28
0006e4  6b80              LDR      r0,[r0,#0x38]
0006e6  23ff              MOVS     r3,#0xff
0006e8  3301              ADDS     r3,#1
0006ea  4318              ORRS     r0,r0,r3
0006ec  2305              MOVS     r3,#5
0006ee  071b              LSLS     r3,r3,#28
0006f0  6398              STR      r0,[r3,#0x38]
;;;1439   			
;;;1440   			// Enable nRD/nWR/ALE/nCS for EBI
;;;1441             	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<10));
0006f2  4618              MOV      r0,r3
0006f4  6b00              LDR      r0,[r0,#0x30]
0006f6  2303              MOVS     r3,#3
0006f8  029b              LSLS     r3,r3,#10
0006fa  4318              ORRS     r0,r0,r3
0006fc  2305              MOVS     r3,#5
0006fe  071b              LSLS     r3,r3,#28
000700  6318              STR      r0,[r3,#0x30]
;;;1442             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x3<<6));
000702  4618              MOV      r0,r3
000704  6b40              LDR      r0,[r0,#0x34]
000706  23c0              MOVS     r3,#0xc0
000708  4318              ORRS     r0,r0,r3
00070a  2305              MOVS     r3,#5
00070c  071b              LSLS     r3,r3,#28
00070e  6358              STR      r0,[r3,#0x34]
;;;1443   			
;;;1444   			// Enable EBI AD Low-byte, bit 7~0
;;;1445             	outpw(&SYS->GPAMFP, inpw(&SYS->GPAMFP) | (0x3<<6));
000710  4618              MOV      r0,r3
000712  6b00              LDR      r0,[r0,#0x30]
000714  23c0              MOVS     r3,#0xc0
000716  4318              ORRS     r0,r0,r3
000718  2305              MOVS     r3,#5
00071a  071b              LSLS     r3,r3,#28
00071c  6318              STR      r0,[r3,#0x30]
;;;1446             	outpw(&SYS->GPCMFP, inpw(&SYS->GPCMFP) | (0x3<<6) | (0x3<<14));
00071e  4618              MOV      r0,r3
000720  6b80              LDR      r0,[r0,#0x38]
000722  4b0b              LDR      r3,|L24.1872|
000724  4318              ORRS     r0,r0,r3
000726  2305              MOVS     r3,#5
000728  071b              LSLS     r3,r3,#28
00072a  6398              STR      r0,[r3,#0x38]
;;;1447             	outpw(&SYS->GPBMFP, inpw(&SYS->GPBMFP) | (0x3<<12));
00072c  4618              MOV      r0,r3
00072e  6b40              LDR      r0,[r0,#0x34]
000730  2303              MOVS     r3,#3
000732  031b              LSLS     r3,r3,#12
000734  4318              ORRS     r0,r0,r3
000736  2305              MOVS     r3,#5
000738  071b              LSLS     r3,r3,#28
00073a  6358              STR      r0,[r3,#0x34]
;;;1448   		}break;
00073c  e001              B        |L24.1858|
                  |L24.1854|
;;;1449   
;;;1450   		default:
;;;1451   			return E_DRVGPIO_ARGUMENT;
00073e  4805              LDR      r0,|L24.1876|
                  |L24.1856|
;;;1452   	}
;;;1453   
;;;1454   	return E_SUCCESS;
;;;1455   }
000740  bd10              POP      {r4,pc}
                  |L24.1858|
000742  bf00              NOP                            ;1065
000744  2000              MOVS     r0,#0                 ;1454
000746  e7fb              B        |L24.1856|
;;;1456   
                          ENDP

                  |L24.1864|
                          DCD      0x50000040
                  |L24.1868|
                          DCD      0x0000703e
                  |L24.1872|
                          DCD      0x0000c0c0
                  |L24.1876|
                          DCD      0xffff8901

                          AREA ||i.DrvGPIO_Open||, CODE, READONLY, ALIGN=2

                  DrvGPIO_Open PROC
;;;115    /*---------------------------------------------------------------------------------------------------------*/
;;;116    int32_t DrvGPIO_Open(E_DRVGPIO_PORT port, int32_t i32Bit, E_DRVGPIO_IO mode)
000000  b570              PUSH     {r4-r6,lr}
;;;117    {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
;;;118        volatile uint32_t u32Reg;
;;;119        
;;;120        if ((i32Bit < 0) || (i32Bit > 16))
000006  2b00              CMP      r3,#0
000008  db01              BLT      |L25.14|
00000a  2b10              CMP      r3,#0x10
00000c  dd01              BLE      |L25.18|
                  |L25.14|
;;;121        {
;;;122            return E_DRVGPIO_ARGUMENT;
00000e  4818              LDR      r0,|L25.112|
                  |L25.16|
;;;123        }    
;;;124    
;;;125        u32Reg = (uint32_t)&GPIOA->PMD + (port*PORT_OFFSET);    
;;;126        if ((mode == E_IO_INPUT) || (mode == E_IO_OUTPUT) || (mode == E_IO_OPENDRAIN))
;;;127        {
;;;128            outpw(u32Reg, inpw(u32Reg) & ~(0x3<<(i32Bit*2)));
;;;129            if (mode == E_IO_OUTPUT)
;;;130            {
;;;131                outpw(u32Reg, inpw(u32Reg) | (0x1<<(i32Bit*2)));
;;;132            }else
;;;133            if (mode == E_IO_OPENDRAIN) 
;;;134            {
;;;135                outpw(u32Reg, inpw(u32Reg) | (0x2<<(i32Bit*2)));
;;;136            }
;;;137        }else
;;;138    	if (mode == E_IO_QUASI)
;;;139        {
;;;140            outpw(u32Reg, inpw(u32Reg) | (0x3<<(i32Bit*2)));
;;;141        }else
;;;142        {
;;;143            return E_DRVGPIO_ARGUMENT;
;;;144        }
;;;145            
;;;146    	return E_SUCCESS;
;;;147    }
000010  bd70              POP      {r4-r6,pc}
                  |L25.18|
000012  01a0              LSLS     r0,r4,#6              ;125
000014  4d17              LDR      r5,|L25.116|
000016  1941              ADDS     r1,r0,r5              ;125
000018  2a00              CMP      r2,#0                 ;126
00001a  d003              BEQ      |L25.36|
00001c  2a01              CMP      r2,#1                 ;126
00001e  d001              BEQ      |L25.36|
000020  2a02              CMP      r2,#2                 ;126
000022  d117              BNE      |L25.84|
                  |L25.36|
000024  6808              LDR      r0,[r1,#0]            ;128
000026  005e              LSLS     r6,r3,#1              ;128
000028  2503              MOVS     r5,#3                 ;128
00002a  40b5              LSLS     r5,r5,r6              ;128
00002c  43a8              BICS     r0,r0,r5              ;128
00002e  6008              STR      r0,[r1,#0]            ;128
000030  2a01              CMP      r2,#1                 ;129
000032  d106              BNE      |L25.66|
000034  6808              LDR      r0,[r1,#0]            ;131
000036  005e              LSLS     r6,r3,#1              ;131
000038  2501              MOVS     r5,#1                 ;131
00003a  40b5              LSLS     r5,r5,r6              ;131
00003c  4328              ORRS     r0,r0,r5              ;131
00003e  6008              STR      r0,[r1,#0]            ;131
000040  e013              B        |L25.106|
                  |L25.66|
000042  2a02              CMP      r2,#2                 ;133
000044  d111              BNE      |L25.106|
000046  6808              LDR      r0,[r1,#0]            ;135
000048  005e              LSLS     r6,r3,#1              ;135
00004a  2502              MOVS     r5,#2                 ;135
00004c  40b5              LSLS     r5,r5,r6              ;135
00004e  4328              ORRS     r0,r0,r5              ;135
000050  6008              STR      r0,[r1,#0]            ;135
000052  e00a              B        |L25.106|
                  |L25.84|
000054  2a03              CMP      r2,#3                 ;138
000056  d106              BNE      |L25.102|
000058  6808              LDR      r0,[r1,#0]            ;140
00005a  005e              LSLS     r6,r3,#1              ;140
00005c  2503              MOVS     r5,#3                 ;140
00005e  40b5              LSLS     r5,r5,r6              ;140
000060  4328              ORRS     r0,r0,r5              ;140
000062  6008              STR      r0,[r1,#0]            ;140
000064  e001              B        |L25.106|
                  |L25.102|
000066  4802              LDR      r0,|L25.112|
000068  e7d2              B        |L25.16|
                  |L25.106|
00006a  2000              MOVS     r0,#0                 ;146
00006c  e7d0              B        |L25.16|
;;;148    
                          ENDP

00006e  0000              DCW      0x0000
                  |L25.112|
                          DCD      0xffff8901
                  |L25.116|
                          DCD      0x50004000

                          AREA ||i.DrvGPIO_SetBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetBit PROC
;;;193    /*---------------------------------------------------------------------------------------------------------*/
;;;194    int32_t DrvGPIO_SetBit(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;195    {
000002  4603              MOV      r3,r0
;;;196    	GPIO_T * tGPIO;
;;;197    
;;;198        if ((i32Bit < 0) || (i32Bit > 16))
000004  2900              CMP      r1,#0
000006  db01              BLT      |L26.12|
000008  2910              CMP      r1,#0x10
00000a  dd01              BLE      |L26.16|
                  |L26.12|
;;;199        {
;;;200            return E_DRVGPIO_ARGUMENT;
00000c  4805              LDR      r0,|L26.36|
                  |L26.14|
;;;201        }
;;;202    
;;;203    	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
;;;204    
;;;205    	tGPIO->DOUT |= (1 << i32Bit);
;;;206    
;;;207    	return E_SUCCESS;
;;;208    }
00000e  bd10              POP      {r4,pc}
                  |L26.16|
000010  0198              LSLS     r0,r3,#6              ;203
000012  4c05              LDR      r4,|L26.40|
000014  1902              ADDS     r2,r0,r4              ;203
000016  6890              LDR      r0,[r2,#8]            ;205
000018  2401              MOVS     r4,#1                 ;205
00001a  408c              LSLS     r4,r4,r1              ;205
00001c  4320              ORRS     r0,r0,r4              ;205
00001e  6090              STR      r0,[r2,#8]            ;205
000020  2000              MOVS     r0,#0                 ;207
000022  e7f4              B        |L26.14|
;;;209    
                          ENDP

                  |L26.36|
                          DCD      0xffff8901
                  |L26.40|
                          DCD      0x50004000

                          AREA ||i.DrvGPIO_SetBitMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetBitMask PROC
;;;378    /*---------------------------------------------------------------------------------------------------------*/
;;;379    int32_t DrvGPIO_SetBitMask(E_DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;380    {
000002  4602              MOV      r2,r0
;;;381        volatile uint32_t u32Reg;
;;;382    
;;;383        u32Reg = (uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET);    
000004  4804              LDR      r0,|L27.24|
000006  0194              LSLS     r4,r2,#6
000008  1903              ADDS     r3,r0,r4
;;;384    
;;;385    	outpw(u32Reg, inpw(u32Reg) | (1<<i32Bit));
00000a  6818              LDR      r0,[r3,#0]
00000c  2401              MOVS     r4,#1
00000e  408c              LSLS     r4,r4,r1
000010  4320              ORRS     r0,r0,r4
000012  6018              STR      r0,[r3,#0]
;;;386    
;;;387    	return E_SUCCESS;
000014  2000              MOVS     r0,#0
;;;388    }
000016  bd10              POP      {r4,pc}
;;;389    
                          ENDP

                  |L27.24|
                          DCD      0x5000400c

                          AREA ||i.DrvGPIO_SetDebounceTime||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetDebounceTime PROC
;;;612    /*---------------------------------------------------------------------------------------------------------*/
;;;613    int32_t DrvGPIO_SetDebounceTime(uint32_t u32CycleSelection, E_DRVGPIO_DBCLKSRC ClockSource)
000000  b510              PUSH     {r4,lr}
;;;614    {
000002  4602              MOV      r2,r0
;;;615        /* Maximum debounce time is 2^(15)*(clk src) */
;;;616        if (u32CycleSelection > 15)
000004  2a0f              CMP      r2,#0xf
000006  d901              BLS      |L28.12|
;;;617        {
;;;618            return E_DRVGPIO_ARGUMENT;
000008  480b              LDR      r0,|L28.56|
                  |L28.10|
;;;619        }
;;;620        
;;;621    	GPIO_DBNCECON->DBNCECON.DBCLKSEL = u32CycleSelection ; 
;;;622    
;;;623    	GPIO_DBNCECON->DBNCECON.DBCLKSRC = ClockSource ; 
;;;624    
;;;625        return E_SUCCESS;
;;;626    }
00000a  bd10              POP      {r4,pc}
                  |L28.12|
00000c  480b              LDR      r0,|L28.60|
00000e  6800              LDR      r0,[r0,#0]            ;621
000010  0900              LSRS     r0,r0,#4              ;621
000012  0100              LSLS     r0,r0,#4              ;621
000014  0713              LSLS     r3,r2,#28             ;621
000016  0f1b              LSRS     r3,r3,#28             ;621
000018  4318              ORRS     r0,r0,r3              ;621
00001a  4b08              LDR      r3,|L28.60|
00001c  6018              STR      r0,[r3,#0]            ;621
00001e  4618              MOV      r0,r3                 ;623
000020  6800              LDR      r0,[r0,#0]            ;623
000022  2310              MOVS     r3,#0x10              ;623
000024  4398              BICS     r0,r0,r3              ;623
000026  010b              LSLS     r3,r1,#4              ;623
000028  2410              MOVS     r4,#0x10              ;623
00002a  4023              ANDS     r3,r3,r4              ;623
00002c  4318              ORRS     r0,r0,r3              ;623
00002e  4b03              LDR      r3,|L28.60|
000030  6018              STR      r0,[r3,#0]            ;623
000032  2000              MOVS     r0,#0                 ;625
000034  e7e9              B        |L28.10|
;;;627    
                          ENDP

000036  0000              DCW      0x0000
                  |L28.56|
                          DCD      0xffff8901
                  |L28.60|
                          DCD      0x50004180

                          AREA ||i.DrvGPIO_SetIntCallback||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetIntCallback PROC
;;;768    /*---------------------------------------------------------------------------------------------------------*/
;;;769    void DrvGPIO_SetIntCallback(GPIO_GPAB_CALLBACK pfGPABCallback, GPIO_GPCDE_CALLBACK pfGPCDECallback)
000000  4a02              LDR      r2,|L29.12|
;;;770    {
;;;771        _pfGPABCallback  = (void (*)(uint32_t, uint32_t))pfGPABCallback;
000002  6010              STR      r0,[r2,#0]  ; _pfGPABCallback
;;;772        _pfGPCDECallback = (void (*)(uint32_t, uint32_t, uint32_t))pfGPCDECallback;    
000004  4a02              LDR      r2,|L29.16|
000006  6011              STR      r1,[r2,#0]  ; _pfGPCDECallback
;;;773    }
000008  4770              BX       lr
;;;774    
                          ENDP

00000a  0000              DCW      0x0000
                  |L29.12|
                          DCD      _pfGPABCallback
                  |L29.16|
                          DCD      _pfGPCDECallback

                          AREA ||i.DrvGPIO_SetPortBits||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetPortBits PROC
;;;281    /*---------------------------------------------------------------------------------------------------------*/
;;;282    int32_t DrvGPIO_SetPortBits(E_DRVGPIO_PORT port,int32_t i32Data)
000000  b510              PUSH     {r4,lr}
;;;283    {
000002  4602              MOV      r2,r0
;;;284        GPIO_T * tGPIO;
;;;285    
;;;286    	tGPIO = (GPIO_T *)((uint32_t)GPIOA + (port*PORT_OFFSET));  
000004  0190              LSLS     r0,r2,#6
000006  4c02              LDR      r4,|L30.16|
000008  1903              ADDS     r3,r0,r4
;;;287    
;;;288    	tGPIO->DOUT = i32Data;
00000a  6099              STR      r1,[r3,#8]
;;;289    
;;;290        return E_SUCCESS;
00000c  2000              MOVS     r0,#0
;;;291    }
00000e  bd10              POP      {r4,pc}
;;;292    
                          ENDP

                  |L30.16|
                          DCD      0x50004000

                          AREA ||i.DrvGPIO_SetPortMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetPortMask PROC
;;;453    /*---------------------------------------------------------------------------------------------------------*/
;;;454    int32_t DrvGPIO_SetPortMask(E_DRVGPIO_PORT port, int32_t i32MaskData)
000000  b510              PUSH     {r4,lr}
;;;455    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;456        outpw((uint32_t)&GPIOA->DMASK + (port*PORT_OFFSET), DrvGPIO_GetPortMask(port) | i32MaskData);
000006  4618              MOV      r0,r3
000008  f7fffffe          BL       DrvGPIO_GetPortMask
00000c  4320              ORRS     r0,r0,r4
00000e  4902              LDR      r1,|L31.24|
000010  019a              LSLS     r2,r3,#6
000012  5088              STR      r0,[r1,r2]
;;;457    
;;;458        return E_SUCCESS;
000014  2000              MOVS     r0,#0
;;;459    }
000016  bd10              POP      {r4,pc}
;;;460    
                          ENDP

                  |L31.24|
                          DCD      0x5000400c

                          AREA ||i.EINT0_IRQHandler||, CODE, READONLY, ALIGN=2

                  EINT0_IRQHandler PROC
;;;74     /*---------------------------------------------------------------------------------------------------------*/
;;;75     void EINT0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77         /* EINT0 = GPB14. Clear the interrupt */
;;;78       	GPIOB->ISRC  = 1UL << 14;
000002  2001              MOVS     r0,#1
000004  0380              LSLS     r0,r0,#14
000006  4905              LDR      r1,|L32.28|
000008  6208              STR      r0,[r1,#0x20]
;;;79     	if ( _pfEINT0Callback )
00000a  4805              LDR      r0,|L32.32|
00000c  6800              LDR      r0,[r0,#0]  ; _pfEINT0Callback
00000e  2800              CMP      r0,#0
000010  d002              BEQ      |L32.24|
;;;80             _pfEINT0Callback();
000012  4803              LDR      r0,|L32.32|
000014  6800              LDR      r0,[r0,#0]  ; _pfEINT0Callback
000016  4780              BLX      r0
                  |L32.24|
;;;81     }
000018  bd10              POP      {r4,pc}
;;;82     
                          ENDP

00001a  0000              DCW      0x0000
                  |L32.28|
                          DCD      0x50004040
                  |L32.32|
                          DCD      _pfEINT0Callback

                          AREA ||i.EINT1_IRQHandler||, CODE, READONLY, ALIGN=2

                  EINT1_IRQHandler PROC
;;;85     /*---------------------------------------------------------------------------------------------------------*/
;;;86     void EINT1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;87     {
;;;88         /* EINT0 = GPB15. Clear the interrupt */
;;;89       	GPIOB->ISRC  = 1UL << 15;
000002  2001              MOVS     r0,#1
000004  03c0              LSLS     r0,r0,#15
000006  4905              LDR      r1,|L33.28|
000008  6208              STR      r0,[r1,#0x20]
;;;90     	if ( _pfEINT1Callback )
00000a  4805              LDR      r0,|L33.32|
00000c  6800              LDR      r0,[r0,#0]  ; _pfEINT1Callback
00000e  2800              CMP      r0,#0
000010  d002              BEQ      |L33.24|
;;;91             _pfEINT1Callback();
000012  4803              LDR      r0,|L33.32|
000014  6800              LDR      r0,[r0,#0]  ; _pfEINT1Callback
000016  4780              BLX      r0
                  |L33.24|
;;;92     }
000018  bd10              POP      {r4,pc}
;;;93     
                          ENDP

00001a  0000              DCW      0x0000
                  |L33.28|
                          DCD      0x50004040
                  |L33.32|
                          DCD      _pfEINT1Callback

                          AREA ||i.GPAB_IRQHandler||, CODE, READONLY, ALIGN=2

                  GPAB_IRQHandler PROC
;;;29     /*---------------------------------------------------------------------------------------------------------*/
;;;30     void GPAB_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;31     {
;;;32     	volatile uint32_t u32GPAStatus, u32GPBStatus;
;;;33     	
;;;34         /* Keep the interrupt source */
;;;35     	u32GPAStatus = GPIOA->ISRC;
000002  480c              LDR      r0,|L34.52|
000004  6a05              LDR      r5,[r0,#0x20]
;;;36     	u32GPBStatus = GPIOB->ISRC;
000006  480b              LDR      r0,|L34.52|
000008  3040              ADDS     r0,r0,#0x40
00000a  6a04              LDR      r4,[r0,#0x20]
;;;37     
;;;38         /* Avoid to clear EINT0/EINT1 INT flag */
;;;39         u32GPBStatus = u32GPBStatus & ~(0x3 << 14);
00000c  2103              MOVS     r1,#3
00000e  0389              LSLS     r1,r1,#14
000010  4620              MOV      r0,r4
000012  4388              BICS     r0,r0,r1
000014  4604              MOV      r4,r0
;;;40     
;;;41         /* Clear the interrupt */
;;;42         GPIOA->ISRC = u32GPAStatus;
000016  4807              LDR      r0,|L34.52|
000018  6205              STR      r5,[r0,#0x20]
;;;43         GPIOB->ISRC = u32GPBStatus;
00001a  4806              LDR      r0,|L34.52|
00001c  3040              ADDS     r0,r0,#0x40
00001e  6204              STR      r4,[r0,#0x20]
;;;44     
;;;45         /* Call the callback function of GPIOAB interrupt */
;;;46         if ( _pfGPABCallback )
000020  4805              LDR      r0,|L34.56|
000022  6800              LDR      r0,[r0,#0]  ; _pfGPABCallback
000024  2800              CMP      r0,#0
000026  d004              BEQ      |L34.50|
;;;47             _pfGPABCallback(u32GPAStatus, u32GPBStatus);    
000028  4621              MOV      r1,r4
00002a  4628              MOV      r0,r5
00002c  4a02              LDR      r2,|L34.56|
00002e  6812              LDR      r2,[r2,#0]  ; _pfGPABCallback
000030  4790              BLX      r2
                  |L34.50|
;;;48     }
000032  bd70              POP      {r4-r6,pc}
;;;49     
                          ENDP

                  |L34.52|
                          DCD      0x50004000
                  |L34.56|
                          DCD      _pfGPABCallback

                          AREA ||i.GPCDE_IRQHandler||, CODE, READONLY, ALIGN=2

                  GPCDE_IRQHandler PROC
;;;52     /*---------------------------------------------------------------------------------------------------------*/
;;;53     void GPCDE_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;54     {
;;;55     	volatile uint32_t u32GPCStatus, u32GPDStatus, u32GPEStatus;
;;;56     	
;;;57         /* Keep the interrupt source */
;;;58     	u32GPCStatus = GPIOC->ISRC;
000002  480d              LDR      r0,|L35.56|
000004  6a04              LDR      r4,[r0,#0x20]
;;;59     	u32GPDStatus = GPIOD->ISRC;
000006  480c              LDR      r0,|L35.56|
000008  3040              ADDS     r0,r0,#0x40
00000a  6a05              LDR      r5,[r0,#0x20]
;;;60     	u32GPEStatus = GPIOE->ISRC;
00000c  480a              LDR      r0,|L35.56|
00000e  3080              ADDS     r0,r0,#0x80
000010  6a06              LDR      r6,[r0,#0x20]
;;;61     
;;;62         /* Clear the interrupt */
;;;63         GPIOC->ISRC = u32GPCStatus;
000012  4809              LDR      r0,|L35.56|
000014  6204              STR      r4,[r0,#0x20]
;;;64         GPIOD->ISRC = u32GPDStatus;
000016  4808              LDR      r0,|L35.56|
000018  3040              ADDS     r0,r0,#0x40
00001a  6205              STR      r5,[r0,#0x20]
;;;65         GPIOE->ISRC = u32GPEStatus;
00001c  4806              LDR      r0,|L35.56|
00001e  3080              ADDS     r0,r0,#0x80
000020  6206              STR      r6,[r0,#0x20]
;;;66     
;;;67         /* Call the callback function of GPIOAB interrupt */
;;;68         if ( _pfGPCDECallback )
000022  4806              LDR      r0,|L35.60|
000024  6800              LDR      r0,[r0,#0]  ; _pfGPCDECallback
000026  2800              CMP      r0,#0
000028  d005              BEQ      |L35.54|
;;;69             _pfGPCDECallback(u32GPCStatus, u32GPDStatus, u32GPEStatus);    
00002a  4632              MOV      r2,r6
00002c  4629              MOV      r1,r5
00002e  4620              MOV      r0,r4
000030  4b02              LDR      r3,|L35.60|
000032  681b              LDR      r3,[r3,#0]  ; _pfGPCDECallback
000034  4798              BLX      r3
                  |L35.54|
;;;70     }
000036  bd70              POP      {r4-r6,pc}
;;;71     
                          ENDP

                  |L35.56|
                          DCD      0x50004080
                  |L35.60|
                          DCD      _pfGPCDECallback

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;809     */
;;;810    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;811    {
;;;812      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L36.16|
00000a  6011              STR      r1,[r2,#0]
;;;813    }
00000c  4770              BX       lr
;;;814    
                          ENDP

00000e  0000              DCW      0x0000
                  |L36.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L37.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L37.16|
                          DCD      0xe000e100

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;866     */
;;;867    static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;868    {
;;;869      if(IRQn < 0) {
000002  2800              CMP      r0,#0
000004  da19              BGE      |L38.58|
;;;870        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
000006  4a1a              LDR      r2,|L38.112|
000008  0703              LSLS     r3,r0,#28
00000a  0f1b              LSRS     r3,r3,#28
00000c  3b08              SUBS     r3,r3,#8
00000e  089b              LSRS     r3,r3,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4b11              LDR      r3,|L38.112|
00002c  0704              LSLS     r4,r0,#28
00002e  0f24              LSRS     r4,r4,#28
000030  3c08              SUBS     r4,r4,#8
000032  08a4              LSRS     r4,r4,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L38.108|
                  |L38.58|
;;;871            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;872      else {
;;;873        NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
00003a  4a0e              LDR      r2,|L38.116|
00003c  2303              MOVS     r3,#3
00003e  021b              LSLS     r3,r3,#8
000040  18d2              ADDS     r2,r2,r3
000042  0883              LSRS     r3,r0,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4b05              LDR      r3,|L38.116|
000060  2403              MOVS     r4,#3
000062  0224              LSLS     r4,r4,#8
000064  191b              ADDS     r3,r3,r4
000066  0884              LSRS     r4,r0,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L38.108|
;;;874            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;875    }
00006c  bd10              POP      {r4,pc}
;;;876    
                          ENDP

00006e  0000              DCW      0x0000
                  |L38.112|
                          DCD      0xe000ed1c
                  |L38.116|
                          DCD      0xe000e100

                          AREA ||.data||, DATA, ALIGN=2

                  _pfGPABCallback
                          DCD      0x00000000
                  _pfGPCDECallback
                          DCD      0x00000000
                  _pfEINT0Callback
                          DCD      0x00000000
                  _pfEINT1Callback
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L234.16|
00000e  461d              MOV      r5,r3
                  |L234.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

