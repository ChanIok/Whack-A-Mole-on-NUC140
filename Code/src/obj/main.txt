; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\main.o --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\ -I..\..\CMSIS -I..\..\Driver\Include -I..\..\Driver\Include\Driver -I..\..\Driver\Include\NUC1xx-LB_002 -I..\..\Driver\Include\System -IG:\Keil\ARM\INC -IG:\Keil\ARM\INC\Nuvoton\NUC1xx --omf_browse=.\obj\main.crf Main.c]
                          THUMB

                          AREA ||i.Delay||, CODE, READONLY, ALIGN=1

                  Delay PROC
;;;67     
;;;68     void Delay(int32_t count)
000000  bf00              NOP      
                  |L1.2|
;;;69     {
;;;70     	while (count--)
000002  4601              MOV      r1,r0
000004  1e40              SUBS     r0,r0,#1
000006  2900              CMP      r1,#0
000008  d1fb              BNE      |L1.2|
;;;71     	{
;;;72     		//		__NOP;
;;;73     	}
;;;74     }
00000a  4770              BX       lr
;;;75     int8_t GetRand(void)
                          ENDP


                          AREA ||i.GetRand||, CODE, READONLY, ALIGN=1

                  GetRand PROC
;;;74     }
;;;75     int8_t GetRand(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77     	return rand() % 6 + 1;
000002  f7fffffe          BL       rand
000006  4604              MOV      r4,r0
000008  2106              MOVS     r1,#6
00000a  f7fffffe          BL       __aeabi_idivmod
00000e  1c49              ADDS     r1,r1,#1
000010  b248              SXTB     r0,r1
;;;78     }
000012  bd10              POP      {r4,pc}
;;;79     
                          ENDP


                          AREA ||i.InitData||, CODE, READONLY, ALIGN=1

                  InitData PROC
;;;58     
;;;59     void InitData(void)
000000  b510              PUSH     {r4,lr}
;;;60     {
;;;61     	uint8_t i;
;;;62     	for (i = 1; i <= 6; i++)
000002  2401              MOVS     r4,#1
000004  e005              B        |L3.18|
                  |L3.6|
;;;63     	{
;;;64     		LoadImg(0, i);
000006  4621              MOV      r1,r4
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       LoadImg
00000e  1c60              ADDS     r0,r4,#1              ;62
000010  b2c4              UXTB     r4,r0                 ;62
                  |L3.18|
000012  2c06              CMP      r4,#6                 ;62
000014  ddf7              BLE      |L3.6|
;;;65     	}
;;;66     }
000016  bd10              POP      {r4,pc}
;;;67     
                          ENDP


                          AREA ||i.LoadBuf||, CODE, READONLY, ALIGN=2

                  LoadBuf PROC
;;;98     
;;;99     void LoadBuf(void)
000000  b510              PUSH     {r4,lr}
;;;100    {
;;;101    	uint8_t x, y;
;;;102    	for (y = 0; y < 128; y++)
000002  2000              MOVS     r0,#0
000004  e00f              B        |L4.38|
                  |L4.6|
;;;103    	{
;;;104    		for (x = 0; x < 8; x++)
000006  2100              MOVS     r1,#0
000008  e009              B        |L4.30|
                  |L4.10|
;;;105    		{
;;;106    			DisplayBuf[y * 8 + x] = Nuvoton[y + x * 128];
00000a  01ca              LSLS     r2,r1,#7
00000c  1812              ADDS     r2,r2,r0
00000e  4b07              LDR      r3,|L4.44|
000010  5c9a              LDRB     r2,[r3,r2]
000012  00c3              LSLS     r3,r0,#3
000014  185b              ADDS     r3,r3,r1
000016  4c06              LDR      r4,|L4.48|
000018  54e2              STRB     r2,[r4,r3]
00001a  1c4a              ADDS     r2,r1,#1              ;104
00001c  b2d1              UXTB     r1,r2                 ;104
                  |L4.30|
00001e  2908              CMP      r1,#8                 ;104
000020  dbf3              BLT      |L4.10|
000022  1c42              ADDS     r2,r0,#1              ;102
000024  b2d0              UXTB     r0,r2                 ;102
                  |L4.38|
000026  2880              CMP      r0,#0x80              ;102
000028  dbed              BLT      |L4.6|
;;;107    		}
;;;108    	}
;;;109    }
00002a  bd10              POP      {r4,pc}
;;;110    void LoadImg(uint8_t Img_num, uint8_t Img_location)
                          ENDP

                  |L4.44|
                          DCD      Nuvoton
                  |L4.48|
                          DCD      DisplayBuf

                          AREA ||i.LoadImg||, CODE, READONLY, ALIGN=2

                  LoadImg PROC
;;;109    }
;;;110    void LoadImg(uint8_t Img_num, uint8_t Img_location)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;111    {
000002  b081              SUB      sp,sp,#4
000004  460c              MOV      r4,r1
;;;112    	uint8_t x, y;
;;;113    
;;;114    	switch (Img_num)
000006  9801              LDR      r0,[sp,#4]
000008  2800              CMP      r0,#0
00000a  d004              BEQ      |L5.22|
00000c  2801              CMP      r0,#1
00000e  d02d              BEQ      |L5.108|
000010  2802              CMP      r0,#2
000012  d17e              BNE      |L5.274|
000014  e055              B        |L5.194|
                  |L5.22|
;;;115    	{
;;;116    	case 0:
;;;117    		for (y = 0; y < 4; y++)
000016  2600              MOVS     r6,#0
000018  e025              B        |L5.102|
                  |L5.26|
;;;118    		{
;;;119    			for (x = 0; x < 40; x++)
00001a  2700              MOVS     r7,#0
00001c  e01f              B        |L5.94|
                  |L5.30|
;;;120    			{
;;;121    				Nuvoton[y * 128 + 128 * 4 * (Img_location / 4) + 40 * ((Img_location - 1) % 3) + 2 * ((Img_location - 1) % 3 + 1) + x] = Img_mole_hole[y * 40 + x];
00001e  1e60              SUBS     r0,r4,#1
000020  2103              MOVS     r1,#3
000022  f7fffffe          BL       __aeabi_idivmod
000026  2028              MOVS     r0,#0x28
000028  4341              MULS     r1,r0,r1
00002a  17e0              ASRS     r0,r4,#31
00002c  0f80              LSRS     r0,r0,#30
00002e  1900              ADDS     r0,r0,r4
000030  1080              ASRS     r0,r0,#2
000032  0240              LSLS     r0,r0,#9
000034  01f2              LSLS     r2,r6,#7
000036  1880              ADDS     r0,r0,r2
000038  180d              ADDS     r5,r1,r0
00003a  1e60              SUBS     r0,r4,#1
00003c  2103              MOVS     r1,#3
00003e  9400              STR      r4,[sp,#0]
000040  f7fffffe          BL       __aeabi_idivmod
000044  1c49              ADDS     r1,r1,#1
000046  0048              LSLS     r0,r1,#1
000048  1828              ADDS     r0,r5,r0
00004a  19c1              ADDS     r1,r0,r7
00004c  4a35              LDR      r2,|L5.292|
00004e  2028              MOVS     r0,#0x28
000050  4370              MULS     r0,r6,r0
000052  19c0              ADDS     r0,r0,r7
000054  4b34              LDR      r3,|L5.296|
000056  5c18              LDRB     r0,[r3,r0]
000058  5450              STRB     r0,[r2,r1]
00005a  1c78              ADDS     r0,r7,#1              ;119
00005c  b2c7              UXTB     r7,r0                 ;119
                  |L5.94|
00005e  2f28              CMP      r7,#0x28              ;119
000060  dbdd              BLT      |L5.30|
000062  1c70              ADDS     r0,r6,#1              ;117
000064  b2c6              UXTB     r6,r0                 ;117
                  |L5.102|
000066  2e04              CMP      r6,#4                 ;117
000068  dbd7              BLT      |L5.26|
;;;122    			}
;;;123    		}
;;;124    		break;
00006a  e058              B        |L5.286|
                  |L5.108|
;;;125    	case 1:
;;;126    		for (y = 0; y < 4; y++)
00006c  2600              MOVS     r6,#0
00006e  e025              B        |L5.188|
                  |L5.112|
;;;127    		{
;;;128    			for (x = 0; x < 40; x++)
000070  2700              MOVS     r7,#0
000072  e01f              B        |L5.180|
                  |L5.116|
;;;129    			{
;;;130    				Nuvoton[y * 128 + 128 * 4 * (Img_location / 4) + 40 * ((Img_location - 1) % 3) + 2 * ((Img_location - 1) % 3 + 1) + x] = Img_mole_nor[y * 40 + x];
000074  1e60              SUBS     r0,r4,#1
000076  2103              MOVS     r1,#3
000078  f7fffffe          BL       __aeabi_idivmod
00007c  2028              MOVS     r0,#0x28
00007e  4341              MULS     r1,r0,r1
000080  17e0              ASRS     r0,r4,#31
000082  0f80              LSRS     r0,r0,#30
000084  1900              ADDS     r0,r0,r4
000086  1080              ASRS     r0,r0,#2
000088  0240              LSLS     r0,r0,#9
00008a  01f2              LSLS     r2,r6,#7
00008c  1880              ADDS     r0,r0,r2
00008e  180d              ADDS     r5,r1,r0
000090  1e60              SUBS     r0,r4,#1
000092  2103              MOVS     r1,#3
000094  9400              STR      r4,[sp,#0]
000096  f7fffffe          BL       __aeabi_idivmod
00009a  1c49              ADDS     r1,r1,#1
00009c  0048              LSLS     r0,r1,#1
00009e  1828              ADDS     r0,r5,r0
0000a0  19c1              ADDS     r1,r0,r7
0000a2  4a20              LDR      r2,|L5.292|
0000a4  2028              MOVS     r0,#0x28
0000a6  4370              MULS     r0,r6,r0
0000a8  19c0              ADDS     r0,r0,r7
0000aa  4b20              LDR      r3,|L5.300|
0000ac  5c18              LDRB     r0,[r3,r0]
0000ae  5450              STRB     r0,[r2,r1]
0000b0  1c78              ADDS     r0,r7,#1              ;128
0000b2  b2c7              UXTB     r7,r0                 ;128
                  |L5.180|
0000b4  2f28              CMP      r7,#0x28              ;128
0000b6  dbdd              BLT      |L5.116|
0000b8  1c70              ADDS     r0,r6,#1              ;126
0000ba  b2c6              UXTB     r6,r0                 ;126
                  |L5.188|
0000bc  2e04              CMP      r6,#4                 ;126
0000be  dbd7              BLT      |L5.112|
;;;131    			}
;;;132    		}
;;;133    		break;
0000c0  e02d              B        |L5.286|
                  |L5.194|
;;;134    	case 2:
;;;135    		for (y = 0; y < 4; y++)
0000c2  2600              MOVS     r6,#0
0000c4  e027              B        |L5.278|
                  |L5.198|
;;;136    		{
;;;137    			for (x = 0; x < 40; x++)
0000c6  2700              MOVS     r7,#0
0000c8  e01f              B        |L5.266|
                  |L5.202|
;;;138    			{
;;;139    				Nuvoton[y * 128 + 128 * 4 * (Img_location / 4) + 40 * ((Img_location - 1) % 3) + 2 * ((Img_location - 1) % 3 + 1) + x] = Img_mole_die[y * 40 + x];
0000ca  1e60              SUBS     r0,r4,#1
0000cc  2103              MOVS     r1,#3
0000ce  f7fffffe          BL       __aeabi_idivmod
0000d2  2028              MOVS     r0,#0x28
0000d4  4341              MULS     r1,r0,r1
0000d6  17e0              ASRS     r0,r4,#31
0000d8  0f80              LSRS     r0,r0,#30
0000da  1900              ADDS     r0,r0,r4
0000dc  1080              ASRS     r0,r0,#2
0000de  0240              LSLS     r0,r0,#9
0000e0  01f2              LSLS     r2,r6,#7
0000e2  1880              ADDS     r0,r0,r2
0000e4  180d              ADDS     r5,r1,r0
0000e6  1e60              SUBS     r0,r4,#1
0000e8  2103              MOVS     r1,#3
0000ea  9400              STR      r4,[sp,#0]
0000ec  f7fffffe          BL       __aeabi_idivmod
0000f0  1c49              ADDS     r1,r1,#1
0000f2  0048              LSLS     r0,r1,#1
0000f4  1828              ADDS     r0,r5,r0
0000f6  19c1              ADDS     r1,r0,r7
0000f8  4a0a              LDR      r2,|L5.292|
0000fa  2028              MOVS     r0,#0x28
0000fc  4370              MULS     r0,r6,r0
0000fe  19c0              ADDS     r0,r0,r7
000100  4b0b              LDR      r3,|L5.304|
000102  5c18              LDRB     r0,[r3,r0]
000104  5450              STRB     r0,[r2,r1]
000106  1c78              ADDS     r0,r7,#1              ;137
000108  b2c7              UXTB     r7,r0                 ;137
                  |L5.266|
00010a  2f28              CMP      r7,#0x28              ;137
00010c  dbdd              BLT      |L5.202|
00010e  1c70              ADDS     r0,r6,#1              ;135
000110  e000              B        |L5.276|
                  |L5.274|
000112  e003              B        |L5.284|
                  |L5.276|
000114  b2c6              UXTB     r6,r0                 ;135
                  |L5.278|
000116  2e04              CMP      r6,#4                 ;135
000118  dbd5              BLT      |L5.198|
;;;140    			}
;;;141    		}
;;;142    		break;
00011a  e000              B        |L5.286|
                  |L5.284|
;;;143    	default:
;;;144    		break;
00011c  bf00              NOP      
                  |L5.286|
00011e  bf00              NOP                            ;124
;;;145    	}
;;;146    }
000120  bdfe              POP      {r1-r7,pc}
;;;147    
                          ENDP

000122  0000              DCW      0x0000
                  |L5.292|
                          DCD      Nuvoton
                  |L5.296|
                          DCD      Img_mole_hole
                  |L5.300|
                          DCD      Img_mole_nor
                  |L5.304|
                          DCD      Img_mole_die

                          AREA ||i.LoadIndex||, CODE, READONLY, ALIGN=2

                  LoadIndex PROC
;;;79     
;;;80     void LoadIndex(void)
000000  b510              PUSH     {r4,lr}
;;;81     {
;;;82     	Initial_panel();
000002  f7fffffe          BL       Initial_panel
;;;83     	clr_all_panel();
000006  f7fffffe          BL       clr_all_panel
;;;84     	print_lcd(1, "Whack-A-Mole!");
00000a  a104              ADR      r1,|L6.28|
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       print_lcd
;;;85     	print_lcd(2, "Start ----> 1");
000012  a106              ADR      r1,|L6.44|
000014  2002              MOVS     r0,#2
000016  f7fffffe          BL       print_lcd
;;;86     }
00001a  bd10              POP      {r4,pc}
;;;87     void Loadres(uint8_t res)
                          ENDP

                  |L6.28|
00001c  57686163          DCB      "Whack-A-Mole!",0
000020  6b2d412d
000024  4d6f6c65
000028  2100    
00002a  00                DCB      0
00002b  00                DCB      0
                  |L6.44|
00002c  53746172          DCB      "Start ----> 1",0
000030  74202d2d
000034  2d2d3e20
000038  3100    
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.Loadres||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  Loadres PROC
;;;86     }
;;;87     void Loadres(uint8_t res)
000000  b51f              PUSH     {r0-r4,lr}
;;;88     {
000002  4604              MOV      r4,r0
;;;89     	char res_text[15] = "Your Score:";
000004  4b0f              LDR      r3,|L7.68|
000006  cb0f              LDM      r3,{r0-r3}
000008  9303              STR      r3,[sp,#0xc]
00000a  466b              MOV      r3,sp
00000c  c307              STM      r3!,{r0-r2}
;;;90     	Initial_panel();
00000e  f7fffffe          BL       Initial_panel
;;;91     	clr_all_panel();
000012  f7fffffe          BL       clr_all_panel
;;;92     	print_lcd(0, "Game Over");
000016  a10c              ADR      r1,|L7.72|
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       print_lcd
;;;93     	sprintf(res_text + 11, "%d", res);
00001e  4622              MOV      r2,r4
000020  a10c              ADR      r1,|L7.84|
000022  a802              ADD      r0,sp,#8
000024  3003              ADDS     r0,#3
000026  f7fffffe          BL       __2sprintf
;;;94     	print_lcd(1, res_text);
00002a  4669              MOV      r1,sp
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       print_lcd
;;;95     	print_lcd(2, "Continue? ---> 1");
000032  a109              ADR      r1,|L7.88|
000034  2002              MOVS     r0,#2
000036  f7fffffe          BL       print_lcd
;;;96     	print_lcd(3, "BackToHome --> 2");
00003a  a10c              ADR      r1,|L7.108|
00003c  2003              MOVS     r0,#3
00003e  f7fffffe          BL       print_lcd
;;;97     }
000042  bd1f              POP      {r0-r4,pc}
;;;98     
                          ENDP

                  |L7.68|
                          DCD      ||.constdata||
                  |L7.72|
000048  47616d65          DCB      "Game Over",0
00004c  204f7665
000050  7200    
000052  00                DCB      0
000053  00                DCB      0
                  |L7.84|
000054  256400            DCB      "%d",0
000057  00                DCB      0
                  |L7.88|
000058  436f6e74          DCB      "Continue? ---> 1",0
00005c  696e7565
000060  3f202d2d
000064  2d3e2031
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0
                  |L7.108|
00006c  4261636b          DCB      "BackToHome --> 2",0
000070  546f486f
000074  6d65202d
000078  2d3e2032
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;204      ----------------------------------------------------------------------------*/
;;;205    int32_t main(void)
000000  b08a              SUB      sp,sp,#0x28
;;;206    {
;;;207    	int8_t number;
;;;208    	float mole_speed = MOLE_SPEED_MAX;	  //地鼠刷新速度
000002  4877              LDR      r0,|L8.480|
000004  9009              STR      r0,[sp,#0x24]
;;;209    	int8_t mole_state = 1;				  //地鼠状态，1代表活的，0代表死的
000006  2001              MOVS     r0,#1
000008  9008              STR      r0,[sp,#0x20]
;;;210    	int16_t mole_rand_count = mole_speed; //地鼠刷新计时器
00000a  9809              LDR      r0,[sp,#0x24]
00000c  f7fffffe          BL       __aeabi_f2iz
000010  b200              SXTH     r0,r0
000012  9007              STR      r0,[sp,#0x1c]
;;;211    	int16_t seg_count = 2;
000014  2102              MOVS     r1,#2
000016  9106              STR      r1,[sp,#0x18]
;;;212    	int8_t seg_state = 0;
000018  2100              MOVS     r1,#0
00001a  9105              STR      r1,[sp,#0x14]
;;;213    	int8_t mole_now = 1; //获得一只地鼠
00001c  2401              MOVS     r4,#1
;;;214    	int8_t mole_now_get;
;;;215    	int8_t state = 0;
00001e  2000              MOVS     r0,#0
000020  9004              STR      r0,[sp,#0x10]
;;;216    	int8_t res = 0; //成绩，打中的地鼠
000022  2700              MOVS     r7,#0
;;;217    
;;;218    	UNLOCKREG();
000024  2059              MOVS     r0,#0x59
000026  496f              LDR      r1,|L8.484|
000028  6008              STR      r0,[r1,#0]
00002a  2016              MOVS     r0,#0x16
00002c  6008              STR      r0,[r1,#0]
00002e  2088              MOVS     r0,#0x88
000030  6008              STR      r0,[r1,#0]
;;;219    	SYSCLK->PWRCON.XTL32K_EN = 1;
000032  486d              LDR      r0,|L8.488|
000034  6800              LDR      r0,[r0,#0]
000036  2102              MOVS     r1,#2
000038  4388              BICS     r0,r0,r1
00003a  1c80              ADDS     r0,r0,#2
00003c  496a              LDR      r1,|L8.488|
00003e  6008              STR      r0,[r1,#0]
;;;220    	SYSCLK->PWRCON.XTL12M_EN = 1; //Enable 12Mhz and set HCLK->12Mhz
000040  4608              MOV      r0,r1
000042  6800              LDR      r0,[r0,#0]
000044  43a0              BICS     r0,r0,r4
000046  1c40              ADDS     r0,r0,#1
000048  6008              STR      r0,[r1,#0]
;;;221    	SYSCLK->CLKSEL0.HCLK_S = 0;
00004a  4608              MOV      r0,r1
00004c  6900              LDR      r0,[r0,#0x10]
00004e  08c0              LSRS     r0,r0,#3
000050  00c0              LSLS     r0,r0,#3
000052  6108              STR      r0,[r1,#0x10]
;;;222    	LOCKREG();
000054  2000              MOVS     r0,#0
000056  4963              LDR      r1,|L8.484|
000058  6008              STR      r0,[r1,#0]
;;;223    
;;;224    	OpenKeyPad();
00005a  f7fffffe          BL       OpenKeyPad
;;;225    	close_seven_segment();
00005e  f7fffffe          BL       close_seven_segment
;;;226    
;;;227    	LoadIndex();
000062  f7fffffe          BL       LoadIndex
;;;228    	while (1)
000066  e0ba              B        |L8.478|
                  |L8.104|
;;;229    	{
;;;230    		switch (state)
000068  9804              LDR      r0,[sp,#0x10]
00006a  2800              CMP      r0,#0
00006c  d004              BEQ      |L8.120|
00006e  2801              CMP      r0,#1
000070  d022              BEQ      |L8.184|
000072  2802              CMP      r0,#2
000074  d17d              BNE      |L8.370|
000076  e081              B        |L8.380|
                  |L8.120|
;;;231    		{
;;;232    		case 0:
;;;233    		{
;;;234    			number = Scankey(); //读取键盘
000078  f7fffffe          BL       Scankey
00007c  b245              SXTB     r5,r0
;;;235    			if (number == 1)
00007e  2d01              CMP      r5,#1
000080  d119              BNE      |L8.182|
;;;236    			{
;;;237    
;;;238    				state = 1;	//进入游戏状态
000082  2001              MOVS     r0,#1
000084  9004              STR      r0,[sp,#0x10]
;;;239    				InitData(); //游戏初始化数据
000086  f7fffffe          BL       InitData
;;;240    
;;;241    				res = 0;
00008a  2700              MOVS     r7,#0
;;;242    				mole_speed = MOLE_SPEED_MAX; //设置地鼠刷新速度
00008c  4854              LDR      r0,|L8.480|
00008e  9009              STR      r0,[sp,#0x24]
;;;243    
;;;244    				mole_now = GetRand();		  //刷新地鼠
000090  f7fffffe          BL       GetRand
000094  4604              MOV      r4,r0
;;;245    				LoadImg(1, mole_now);		  //加载地鼠图片
000096  b2e1              UXTB     r1,r4
000098  2001              MOVS     r0,#1
00009a  f7fffffe          BL       LoadImg
;;;246    				mole_state = 1;				  //活的地鼠
00009e  2001              MOVS     r0,#1
0000a0  9008              STR      r0,[sp,#0x20]
;;;247    				mole_rand_count = mole_speed; //地鼠刷新时间重置
0000a2  9809              LDR      r0,[sp,#0x24]
0000a4  f7fffffe          BL       __aeabi_f2iz
0000a8  b200              SXTH     r0,r0
0000aa  9007              STR      r0,[sp,#0x1c]
;;;248    
;;;249    				LoadBuf();
0000ac  f7fffffe          BL       LoadBuf
;;;250    				draw_LCD(DisplayBuf); // render to LCD
0000b0  484e              LDR      r0,|L8.492|
0000b2  f7fffffe          BL       draw_LCD
                  |L8.182|
;;;251    			}
;;;252    			break;
0000b6  e091              B        |L8.476|
                  |L8.184|
;;;253    		}
;;;254    		case 1:
;;;255    		{
;;;256    
;;;257    			seg_display(res, &seg_count, &seg_state);
0000b8  aa05              ADD      r2,sp,#0x14
0000ba  a906              ADD      r1,sp,#0x18
0000bc  4638              MOV      r0,r7
0000be  f7fffffe          BL       seg_display
;;;258    
;;;259    			// show_seven_segment(0, res); //数码管显示成绩
;;;260    			if (mole_rand_count) //判断地鼠是否要刷新
0000c2  9807              LDR      r0,[sp,#0x1c]
0000c4  2800              CMP      r0,#0
0000c6  d004              BEQ      |L8.210|
;;;261    			{
;;;262    				mole_rand_count--; //不用刷新，计数-1
0000c8  9807              LDR      r0,[sp,#0x1c]
0000ca  1e40              SUBS     r0,r0,#1
0000cc  b200              SXTH     r0,r0
0000ce  9007              STR      r0,[sp,#0x1c]
0000d0  e025              B        |L8.286|
                  |L8.210|
;;;263    			}
;;;264    			else
;;;265    			{
;;;266    				if (mole_state == 1) //超时没打中
0000d2  9808              LDR      r0,[sp,#0x20]
0000d4  2801              CMP      r0,#1
0000d6  d107              BNE      |L8.232|
;;;267    				{
;;;268    					state = 2; //游戏结束
0000d8  2002              MOVS     r0,#2
0000da  9004              STR      r0,[sp,#0x10]
;;;269    					clr_all_panel();
0000dc  f7fffffe          BL       clr_all_panel
;;;270    					Loadres(res); //加载游戏结束界面
0000e0  b2f8              UXTB     r0,r7
0000e2  f7fffffe          BL       Loadres
;;;271    					break;
0000e6  e079              B        |L8.476|
                  |L8.232|
;;;272    				}
;;;273    				LoadImg(0, mole_now); //刷走上一只地鼠
0000e8  b2e1              UXTB     r1,r4
0000ea  2000              MOVS     r0,#0
0000ec  f7fffffe          BL       LoadImg
;;;274    				do
0000f0  bf00              NOP      
                  |L8.242|
;;;275    				{
;;;276    					mole_now_get = GetRand();		//刷新地鼠
0000f2  f7fffffe          BL       GetRand
0000f6  4606              MOV      r6,r0
;;;277    				} while (mole_now_get == mole_now); //与上一只地鼠不重复
0000f8  42a6              CMP      r6,r4
0000fa  d0fa              BEQ      |L8.242|
;;;278    				mole_now = mole_now_get;
0000fc  4634              MOV      r4,r6
;;;279    
;;;280    				LoadImg(1, mole_now);		  //加载地鼠图片
0000fe  b2e1              UXTB     r1,r4
000100  2001              MOVS     r0,#1
000102  f7fffffe          BL       LoadImg
;;;281    				mole_state = 1;				  //活的地鼠
000106  2001              MOVS     r0,#1
000108  9008              STR      r0,[sp,#0x20]
;;;282    				mole_rand_count = mole_speed; //地鼠刷新时间重置
00010a  9809              LDR      r0,[sp,#0x24]
00010c  f7fffffe          BL       __aeabi_f2iz
000110  b200              SXTH     r0,r0
000112  9007              STR      r0,[sp,#0x1c]
;;;283    
;;;284    				LoadBuf();
000114  f7fffffe          BL       LoadBuf
;;;285    				draw_LCD(DisplayBuf); // 刷新LCD
000118  4834              LDR      r0,|L8.492|
00011a  f7fffffe          BL       draw_LCD
                  |L8.286|
;;;286    			}
;;;287    
;;;288    			number = Scankey(); //读取键盘
00011e  f7fffffe          BL       Scankey
000122  b245              SXTB     r5,r0
;;;289    
;;;290    			if ((mole_now == (number - 3)) && mole_state) //如果刚好打中当前地鼠
000124  1ee8              SUBS     r0,r5,#3
000126  42a0              CMP      r0,r4
000128  d11d              BNE      |L8.358|
00012a  9808              LDR      r0,[sp,#0x20]
00012c  2800              CMP      r0,#0
00012e  d01a              BEQ      |L8.358|
;;;291    			{
;;;292    				LoadImg(2, mole_now);				  //地鼠图变为死的
000130  b2e1              UXTB     r1,r4
000132  2002              MOVS     r0,#2
000134  f7fffffe          BL       LoadImg
;;;293    				mole_state = 0;						  //地鼠标记为死的
000138  2000              MOVS     r0,#0
00013a  9008              STR      r0,[sp,#0x20]
;;;294    				res++;								  //分数+1
00013c  1c78              ADDS     r0,r7,#1
00013e  b247              SXTB     r7,r0
;;;295    				mole_speed *= MOLE_SPEED_CHANGE_RATE; //加快速度
000140  9809              LDR      r0,[sp,#0x24]
000142  f7fffffe          BL       __aeabi_f2d
000146  4a2a              LDR      r2,|L8.496|
000148  4b2a              LDR      r3,|L8.500|
00014a  9101              STR      r1,[sp,#4]
00014c  9000              STR      r0,[sp,#0]
00014e  f7fffffe          BL       __aeabi_dmul
000152  9103              STR      r1,[sp,#0xc]
000154  9002              STR      r0,[sp,#8]
000156  f7fffffe          BL       __aeabi_d2f
00015a  9009              STR      r0,[sp,#0x24]
;;;296    
;;;297    				LoadBuf();
00015c  f7fffffe          BL       LoadBuf
;;;298    				draw_LCD(DisplayBuf); // 刷新LCD
000160  4822              LDR      r0,|L8.492|
000162  f7fffffe          BL       draw_LCD
                  |L8.358|
;;;299    			}
;;;300    			if (number == 3)
000166  2d03              CMP      r5,#3
000168  d107              BNE      |L8.378|
;;;301    			{
;;;302    				state = 2; //游戏结束
00016a  2002              MOVS     r0,#2
00016c  9004              STR      r0,[sp,#0x10]
;;;303    				Loadres(res); //加载游戏结束界面
00016e  b2f8              UXTB     r0,r7
000170  e000              B        |L8.372|
                  |L8.370|
000172  e032              B        |L8.474|
                  |L8.372|
000174  f7fffffe          BL       Loadres
;;;304    				break;
000178  e030              B        |L8.476|
                  |L8.378|
;;;305    			}
;;;306    			break;
00017a  e02f              B        |L8.476|
                  |L8.380|
;;;307    		}
;;;308    		case 2:
;;;309    		{
;;;310    
;;;311    			seg_display(res, &seg_count, &seg_state);
00017c  aa05              ADD      r2,sp,#0x14
00017e  a906              ADD      r1,sp,#0x18
000180  4638              MOV      r0,r7
000182  f7fffffe          BL       seg_display
;;;312    
;;;313    			number = Scankey(); //读取键盘
000186  f7fffffe          BL       Scankey
00018a  b245              SXTB     r5,r0
;;;314    			if (number == 1)
00018c  2d01              CMP      r5,#1
00018e  d11a              BNE      |L8.454|
;;;315    			{
;;;316    				state = 1;
000190  2001              MOVS     r0,#1
000192  9004              STR      r0,[sp,#0x10]
;;;317    				InitData();
000194  f7fffffe          BL       InitData
;;;318    				res = 0;
000198  2700              MOVS     r7,#0
;;;319    				mole_speed = MOLE_SPEED_MAX;
00019a  4811              LDR      r0,|L8.480|
00019c  9009              STR      r0,[sp,#0x24]
;;;320    
;;;321    				mole_now = GetRand();		  //刷新地鼠
00019e  f7fffffe          BL       GetRand
0001a2  4604              MOV      r4,r0
;;;322    				LoadImg(1, mole_now);		  //加载地鼠图片
0001a4  b2e1              UXTB     r1,r4
0001a6  2001              MOVS     r0,#1
0001a8  f7fffffe          BL       LoadImg
;;;323    				mole_state = 1;				  //活的地鼠
0001ac  2001              MOVS     r0,#1
0001ae  9008              STR      r0,[sp,#0x20]
;;;324    				mole_rand_count = mole_speed; //地鼠刷新时间重置
0001b0  9809              LDR      r0,[sp,#0x24]
0001b2  f7fffffe          BL       __aeabi_f2iz
0001b6  b200              SXTH     r0,r0
0001b8  9007              STR      r0,[sp,#0x1c]
;;;325    
;;;326    				LoadBuf();
0001ba  f7fffffe          BL       LoadBuf
;;;327    				draw_LCD(DisplayBuf); // 刷新LCD
0001be  480b              LDR      r0,|L8.492|
0001c0  f7fffffe          BL       draw_LCD
;;;328    				break;
0001c4  e00a              B        |L8.476|
                  |L8.454|
;;;329    			}
;;;330    			if (number == 2)
0001c6  2d02              CMP      r5,#2
0001c8  d106              BNE      |L8.472|
;;;331    			{
;;;332    				state = 0;
0001ca  2000              MOVS     r0,#0
0001cc  9004              STR      r0,[sp,#0x10]
;;;333    				close_seven_segment();
0001ce  f7fffffe          BL       close_seven_segment
;;;334    				LoadIndex();
0001d2  f7fffffe          BL       LoadIndex
;;;335    				break;
0001d6  e001              B        |L8.476|
                  |L8.472|
;;;336    			}
;;;337    		}
;;;338    		default:
0001d8  bf00              NOP      
                  |L8.474|
;;;339    			break;
0001da  bf00              NOP      
                  |L8.476|
0001dc  bf00              NOP                            ;252
                  |L8.478|
0001de  e743              B        |L8.104|
;;;340    		}
;;;341    	}
;;;342    }
                          ENDP

                  |L8.480|
                          DCD      0x44bb8000
                  |L8.484|
                          DCD      0x50000100
                  |L8.488|
                          DCD      0x50000200
                  |L8.492|
                          DCD      DisplayBuf
                  |L8.496|
                          DCD      0x70a3d70a
                  |L8.500|
                          DCD      0x3fef0a3d

                          AREA ||i.seg_display||, CODE, READONLY, ALIGN=1

                  seg_display PROC
;;;147    
;;;148    void seg_display(int8_t res, int16_t *seg_count, int8_t *seg_state)
000000  b5fe              PUSH     {r1-r7,lr}
;;;149    {
000002  4607              MOV      r7,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;150    
;;;151    	int8_t digit;
;;;152    	int8_t value = res;
000008  9702              STR      r7,[sp,#8]
;;;153    	int8_t bit = 0;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;154    
;;;155    	if (*seg_count)
00000e  8830              LDRH     r0,[r6,#0]
000010  2800              CMP      r0,#0
000012  d004              BEQ      |L9.30|
;;;156    	{
;;;157    		*seg_count = *seg_count - 1;
000014  8830              LDRH     r0,[r6,#0]
000016  1e40              SUBS     r0,r0,#1
000018  b200              SXTH     r0,r0
00001a  8030              STRH     r0,[r6,#0]
00001c  e066              B        |L9.236|
                  |L9.30|
;;;158    	}
;;;159    	else
;;;160    	{
;;;161    		while (value)
00001e  e009              B        |L9.52|
                  |L9.32|
;;;162    		{
;;;163    			bit++;
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  b240              SXTB     r0,r0
000026  9001              STR      r0,[sp,#4]
;;;164    			value /= 10;
000028  210a              MOVS     r1,#0xa
00002a  9802              LDR      r0,[sp,#8]
00002c  f7fffffe          BL       __aeabi_idivmod
000030  b240              SXTB     r0,r0
000032  9002              STR      r0,[sp,#8]
                  |L9.52|
000034  9802              LDR      r0,[sp,#8]            ;161
000036  2800              CMP      r0,#0                 ;161
000038  d1f2              BNE      |L9.32|
;;;165    		}
;;;166    		*seg_count = 1;
00003a  2001              MOVS     r0,#1
00003c  8030              STRH     r0,[r6,#0]
;;;167    		*seg_state = *seg_state + 1;
00003e  7828              LDRB     r0,[r5,#0]
000040  1c40              ADDS     r0,r0,#1
000042  b240              SXTB     r0,r0
000044  7028              STRB     r0,[r5,#0]
;;;168    		if (*seg_state > bit - 1)
000046  2100              MOVS     r1,#0
000048  5669              LDRSB    r1,[r5,r1]
00004a  9801              LDR      r0,[sp,#4]
00004c  1e40              SUBS     r0,r0,#1
00004e  4281              CMP      r1,r0
000050  dd01              BLE      |L9.86|
;;;169    		{
;;;170    			*seg_state = 0;
000052  2000              MOVS     r0,#0
000054  7028              STRB     r0,[r5,#0]
                  |L9.86|
;;;171    		}
;;;172    		value = res;
000056  9702              STR      r7,[sp,#8]
;;;173    
;;;174    		switch (*seg_state)
000058  2000              MOVS     r0,#0
00005a  5628              LDRSB    r0,[r5,r0]
00005c  2800              CMP      r0,#0
00005e  d006              BEQ      |L9.110|
000060  2801              CMP      r0,#1
000062  d010              BEQ      |L9.134|
000064  2802              CMP      r0,#2
000066  d01e              BEQ      |L9.166|
000068  2803              CMP      r0,#3
00006a  d13d              BNE      |L9.232|
00006c  e02b              B        |L9.198|
                  |L9.110|
;;;175    		{
;;;176    		case 0:
;;;177    			digit = value % 10;
00006e  210a              MOVS     r1,#0xa
000070  9802              LDR      r0,[sp,#8]
000072  f7fffffe          BL       __aeabi_idivmod
000076  b24c              SXTB     r4,r1
;;;178    			close_seven_segment();
000078  f7fffffe          BL       close_seven_segment
;;;179    			show_seven_segment(0, digit);
00007c  b2e1              UXTB     r1,r4
00007e  2000              MOVS     r0,#0
000080  f7fffffe          BL       show_seven_segment
;;;180    			break;
000084  e031              B        |L9.234|
                  |L9.134|
;;;181    		case 1:
;;;182    			digit = value / 10 % 10;
000086  210a              MOVS     r1,#0xa
000088  9802              LDR      r0,[sp,#8]
00008a  f7fffffe          BL       __aeabi_idivmod
00008e  210a              MOVS     r1,#0xa
000090  9000              STR      r0,[sp,#0]
000092  f7fffffe          BL       __aeabi_idivmod
000096  b24c              SXTB     r4,r1
;;;183    			close_seven_segment();
000098  f7fffffe          BL       close_seven_segment
;;;184    			show_seven_segment(1, digit);
00009c  b2e1              UXTB     r1,r4
00009e  2001              MOVS     r0,#1
0000a0  f7fffffe          BL       show_seven_segment
;;;185    			break;
0000a4  e021              B        |L9.234|
                  |L9.166|
;;;186    		case 2:
;;;187    			digit = value / 100 % 10;
0000a6  2164              MOVS     r1,#0x64
0000a8  9802              LDR      r0,[sp,#8]
0000aa  f7fffffe          BL       __aeabi_idivmod
0000ae  210a              MOVS     r1,#0xa
0000b0  9000              STR      r0,[sp,#0]
0000b2  f7fffffe          BL       __aeabi_idivmod
0000b6  b24c              SXTB     r4,r1
;;;188    			close_seven_segment();
0000b8  f7fffffe          BL       close_seven_segment
;;;189    			show_seven_segment(2, digit);
0000bc  b2e1              UXTB     r1,r4
0000be  2002              MOVS     r0,#2
0000c0  f7fffffe          BL       show_seven_segment
;;;190    			break;
0000c4  e011              B        |L9.234|
                  |L9.198|
;;;191    		case 3:
;;;192    			digit = value / 1000 % 10;
0000c6  217d              MOVS     r1,#0x7d
0000c8  00c9              LSLS     r1,r1,#3
0000ca  9802              LDR      r0,[sp,#8]
0000cc  f7fffffe          BL       __aeabi_idivmod
0000d0  210a              MOVS     r1,#0xa
0000d2  9000              STR      r0,[sp,#0]
0000d4  f7fffffe          BL       __aeabi_idivmod
0000d8  b24c              SXTB     r4,r1
;;;193    			close_seven_segment();
0000da  f7fffffe          BL       close_seven_segment
;;;194    			show_seven_segment(3, digit);
0000de  b2e1              UXTB     r1,r4
0000e0  2003              MOVS     r0,#3
0000e2  f7fffffe          BL       show_seven_segment
;;;195    			break;
0000e6  e000              B        |L9.234|
                  |L9.232|
;;;196    		default:
;;;197    			break;
0000e8  bf00              NOP      
                  |L9.234|
0000ea  bf00              NOP                            ;180
                  |L9.236|
;;;198    		}
;;;199    	}
;;;200    }
0000ec  bdfe              POP      {r1-r7,pc}
;;;201    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Nuvoton
                          %        1024
                  DisplayBuf
                          %        1024

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  596f7572          DCB      0x59,0x6f,0x75,0x72
000004  2053636f          DCB      0x20,0x53,0x63,0x6f
000008  72653a00          DCB      0x72,0x65,0x3a,0x00
00000c  000000            DCB      0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  Img_mole_nor
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  000000e0          DCB      0x00,0x00,0x00,0xe0
00000c  e0e0c0e0          DCB      0xe0,0xe0,0xc0,0xe0
000010  f0f0f8f8          DCB      0xf0,0xf0,0xf8,0xf8
000014  f8f8f0f0          DCB      0xf8,0xf8,0xf0,0xf0
000018  e0e0f070          DCB      0xe0,0xe0,0xf0,0x70
00001c  50000000          DCB      0x50,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  000000c0          DCB      0x00,0x00,0x00,0xc0
000034  fdffffe7          DCB      0xfd,0xff,0xff,0xe7
000038  e7ffffff          DCB      0xe7,0xff,0xff,0xff
00003c  ffffffe7          DCB      0xff,0xff,0xff,0xe7
000040  e7fffffc          DCB      0xe7,0xff,0xff,0xfc
000044  a0000000          DCB      0xa0,0x00,0x00,0x00
000048  00000000          DCB      0x00,0x00,0x00,0x00
00004c  00000000          DCB      0x00,0x00,0x00,0x00
000050  00008080          DCB      0x00,0x00,0x80,0x80
000054  c0406060          DCB      0xc0,0x40,0x60,0x60
000058  206020ff          DCB      0x20,0x60,0x20,0xff
00005c  ffffffff          DCB      0xff,0xff,0xff,0xff
000060  ffffe1f3          DCB      0xff,0xff,0xe1,0xf3
000064  f3e1ffff          DCB      0xf3,0xe1,0xff,0xff
000068  ffffffff          DCB      0xff,0xff,0xff,0xff
00006c  ff602060          DCB      0xff,0x60,0x20,0x60
000070  6040e0c0          DCB      0x60,0x40,0xe0,0xc0
000074  80800000          DCB      0x80,0x80,0x00,0x00
000078  00000303          DCB      0x00,0x00,0x03,0x03
00007c  0606040c          DCB      0x06,0x06,0x04,0x0c
000080  0c0c081d          DCB      0x0c,0x0c,0x08,0x1d
000084  1f3f3f3f          DCB      0x1f,0x3f,0x3f,0x3f
000088  7f3f7f7f          DCB      0x7f,0x3f,0x7f,0x7f
00008c  7f7f3f7f          DCB      0x7f,0x7f,0x3f,0x7f
000090  3f3f3f1f          DCB      0x3f,0x3f,0x3f,0x1f
000094  1d08080c          DCB      0x1d,0x08,0x08,0x0c
000098  0c0c0406          DCB      0x0c,0x0c,0x04,0x06
00009c  07010000          DCB      0x07,0x01,0x00,0x00
                  Img_mole_die
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  50688884          DCB      0x50,0x68,0x88,0x84
0000a8  040204e0          DCB      0x04,0x02,0x04,0xe0
0000ac  e6e0c2e4          DCB      0xe6,0xe0,0xc2,0xe4
0000b0  f0f0f8f8          DCB      0xf0,0xf0,0xf8,0xf8
0000b4  f8f8f8f0          DCB      0xf8,0xf8,0xf8,0xf0
0000b8  e0e0f0f0          DCB      0xe0,0xe0,0xf0,0xf0
0000bc  50040808          DCB      0x50,0x04,0x08,0x08
0000c0  50300000          DCB      0x50,0x30,0x00,0x00
0000c4  20e00000          DCB      0x20,0xe0,0x00,0x00
0000c8  00000000          DCB      0x00,0x00,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  000000a1          DCB      0x00,0x00,0x00,0xa1
0000d4  f8dfdee9          DCB      0xf8,0xdf,0xde,0xe9
0000d8  f3e5deff          DCB      0xf3,0xe5,0xde,0xff
0000dc  ffdee5fb          DCB      0xff,0xde,0xe5,0xfb
0000e0  f3ccdffc          DCB      0xf3,0xcc,0xdf,0xfc
0000e4  a0000000          DCB      0xa0,0x00,0x00,0x00
0000e8  00000402          DCB      0x00,0x00,0x04,0x02
0000ec  02010000          DCB      0x02,0x01,0x00,0x00
0000f0  00008080          DCB      0x00,0x00,0x80,0x80
0000f4  c0406060          DCB      0xc0,0x40,0x60,0x60
0000f8  606020ff          DCB      0x60,0x60,0x20,0xff
0000fc  ffffffff          DCB      0xff,0xff,0xff,0xff
000100  ffffe1f3          DCB      0xff,0xff,0xe1,0xf3
000104  f3e1ffff          DCB      0xf3,0xe1,0xff,0xff
000108  ffffffff          DCB      0xff,0xff,0xff,0xff
00010c  ff206060          DCB      0xff,0x20,0x60,0x60
000110  6040c040          DCB      0x60,0x40,0xc0,0x40
000114  c0800000          DCB      0xc0,0x80,0x00,0x00
000118  00000303          DCB      0x00,0x00,0x03,0x03
00011c  0604040c          DCB      0x06,0x04,0x04,0x0c
000120  0c08181d          DCB      0x0c,0x08,0x18,0x1d
000124  1f3f3f3f          DCB      0x1f,0x3f,0x3f,0x3f
000128  3f7f7f7f          DCB      0x3f,0x7f,0x7f,0x7f
00012c  7f7f3f7f          DCB      0x7f,0x7f,0x3f,0x7f
000130  3f3f3f1f          DCB      0x3f,0x3f,0x3f,0x1f
000134  1b08080c          DCB      0x1b,0x08,0x08,0x0c
000138  0c040606          DCB      0x0c,0x04,0x06,0x06
00013c  03030000          DCB      0x03,0x03,0x00,0x00
                  Img_mole_hole
000140  00000000          DCB      0x00,0x00,0x00,0x00
000144  00000000          DCB      0x00,0x00,0x00,0x00
000148  00000000          DCB      0x00,0x00,0x00,0x00
00014c  00000000          DCB      0x00,0x00,0x00,0x00
000150  00000000          DCB      0x00,0x00,0x00,0x00
000154  00000000          DCB      0x00,0x00,0x00,0x00
000158  00000000          DCB      0x00,0x00,0x00,0x00
00015c  00000000          DCB      0x00,0x00,0x00,0x00
000160  00000000          DCB      0x00,0x00,0x00,0x00
000164  00000000          DCB      0x00,0x00,0x00,0x00
000168  00000000          DCB      0x00,0x00,0x00,0x00
00016c  00000000          DCB      0x00,0x00,0x00,0x00
000170  00000000          DCB      0x00,0x00,0x00,0x00
000174  00000000          DCB      0x00,0x00,0x00,0x00
000178  00000000          DCB      0x00,0x00,0x00,0x00
00017c  00000000          DCB      0x00,0x00,0x00,0x00
000180  00000000          DCB      0x00,0x00,0x00,0x00
000184  00000000          DCB      0x00,0x00,0x00,0x00
000188  00000000          DCB      0x00,0x00,0x00,0x00
00018c  00000000          DCB      0x00,0x00,0x00,0x00
000190  00008080          DCB      0x00,0x00,0x80,0x80
000194  c0406060          DCB      0xc0,0x40,0x60,0x60
000198  20602070          DCB      0x20,0x60,0x20,0x70
00019c  30303038          DCB      0x30,0x30,0x30,0x38
0001a0  38181818          DCB      0x38,0x18,0x18,0x18
0001a4  18181818          DCB      0x18,0x18,0x18,0x18
0001a8  38303030          DCB      0x38,0x30,0x30,0x30
0001ac  30602060          DCB      0x30,0x60,0x20,0x60
0001b0  6040e0c0          DCB      0x60,0x40,0xe0,0xc0
0001b4  80800000          DCB      0x80,0x80,0x00,0x00
0001b8  00000303          DCB      0x00,0x00,0x03,0x03
0001bc  0606040c          DCB      0x06,0x06,0x04,0x0c
0001c0  0c0c081c          DCB      0x0c,0x0c,0x08,0x1c
0001c4  1c3c3830          DCB      0x1c,0x3c,0x38,0x30
0001c8  30303030          DCB      0x30,0x30,0x30,0x30
0001cc  30303030          DCB      0x30,0x30,0x30,0x30
0001d0  38383c1c          DCB      0x38,0x38,0x3c,0x1c
0001d4  1c08080c          DCB      0x1c,0x08,0x08,0x0c
0001d8  0c0c0406          DCB      0x0c,0x0c,0x04,0x06
0001dc  07010000          DCB      0x07,0x01,0x00,0x00

                  __ARM_use_no_argv EQU 0
