L 1 "..\..\Driver\Src\NUC1xx-LB_002\Seven_Segment.c"
N#include <stdio.h>
L 1 "C:\Keil_C51\ARM\RV31\Inc\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision: 137287 $
N * Checkin $Date: 2008-08-27 13:36:52 +0100 (Wed, 27 Aug 2008) $
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  typedef unsigned int size_t;   /* see <stddef.h> */
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined)
X#if 0L || !0L || !0L
N/* always defined in C++ and non-strict C for consistency of debug info */
N  typedef struct __va_list __va_list;
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#if !0L || (1L && 199901L <= 199409L)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#if !0L || (1L && 199901L <= 199409L)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#if !0L || (1L && 199901L <= 199409L)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
L 2 "..\..\Driver\Src\NUC1xx-LB_002\Seven_Segment.c" 2
N#include "NUC1xx.h"
L 1 "..\..\CMSIS\NUC1xx.h" 1
N/*---------------------------------------------------------------------------------------------------------*/
N/*                                                                                                         */
N/* Copyright (c) Nuvoton Technology Corp. All rights reserved.                                             */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N
N#ifndef __NUC1xx_H__
N#define __NUC1xx_H__
N
N              
N/*
N * ==========================================================================
N * ---------- Interrupt Number Definition -----------------------------------
N * ==========================================================================
N*/
N 
Ntypedef enum IRQn
N{
N/******  Cortex-M0 Processor Exceptions Numbers ***************************************************/
N  NonMaskableInt_IRQn         = -14,    /*!< 2 Non Maskable Interrupt                             */
N  HardFault_IRQn              = -13,    /*!< 3 Cortex-M0 Hard Fault Interrupt                     */
N  SVCall_IRQn                 = -5,     /*!< 11 Cortex-M0 SV Call Interrupt                       */
N  PendSV_IRQn                 = -2,     /*!< 14 Cortex-M0 Pend SV Interrupt                       */
N  SysTick_IRQn                = -1,     /*!< 15 Cortex-M0 System Tick Interrupt                   */
N
N/************************ NUC1xx Interrupt Numbers ************************************************/
N  BOD_IRQn                  = 0,
N  WDT_IRQn                  = 1,
N  EINT0_IRQn                = 2,
N  EINT1_IRQn                = 3,
N  GPAB_IRQn                 = 4,
N  GPCDE_IRQn                = 5,
N  PWMA_IRQn                 = 6,
N  PWMB_IRQn                 = 7,
N  TMR0_IRQn                 = 8,
N  TMR1_IRQn                 = 9,
N  TMR2_IRQn                 = 10,
N  TMR3_IRQn                 = 11,
N  UART0_IRQn                = 12,
N  UART1_IRQn                = 13,
N  SPI0_IRQn                 = 14,
N  SPI1_IRQn                 = 15,
N  SPI2_IRQn                 = 16,
N  SPI3_IRQn                 = 17,
N  I2C0_IRQn                 = 18,
N  I2C1_IRQn                 = 19,
N  CAN0_IRQn                 = 20,
N  CAN1_IRQn                 = 21,
N  SD_IRQn                   = 22,
N  USBD_IRQn                 = 23,
N  PS2_IRQn                  = 24,
N  ACMP_IRQn                 = 25,
N  PDMA_IRQn                 = 26,
N  I2S_IRQn                  = 27,
N  PWRWU_IRQn                = 28,
N  ADC_IRQn                  = 29,
N  DAC_IRQn                  = 30,
N  RTC_IRQn                  = 31
N} IRQn_Type;
N
N
N/*
N * ==========================================================================
N * ----------- Processor and Core Peripheral Section ------------------------
N * ==========================================================================
N */
N
N/* Configuration of the Cortex-M0 Processor and Core Peripherals */
N#define __MPU_PRESENT           0       /*!< armikcmu does not provide a MPU present or not       */
N#define __NVIC_PRIO_BITS        2       /*!< armikcmu Supports 2 Bits for the Priority Levels     */
N#define __Vendor_SysTickConfig  0       /*!< Set to 1 if different SysTick Config is used         */
N
N
N#include "core_cm0.h"                   /* Cortex-M0 processor and core peripherals               */
L 1 "..\..\CMSIS\core_cm0.h" 1
N/**************************************************************************//**
N * @file     core_cm0.h
N * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
N * @version  V1.30
N * @date     30. October 2009
N *
N * @note
N * Copyright (C) 2009 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N#ifndef __CM0_CORE_H__
N#define __CM0_CORE_H__
N
N/** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
N *
N * List of Lint messages which will be suppressed and not shown:
N *   - not yet checked
N * .
N * Note:  To re-enable a Message, insert a space before 'lint' *
N *
N */
N
N
N/** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
N  This file defines all structures and symbols for CMSIS core:
N    - CMSIS version number
N    - Cortex-M core registers and bitfields
N    - Cortex-M core peripheral base address
N  @{
N */
N
N#ifdef __cplusplus
S extern "C" {
N#endif 
N
N#define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!< [31:16] CMSIS HAL main version */
N#define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!< [15:0]  CMSIS HAL sub version  */
N#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!< CMSIS HAL version number       */
N
N#define __CORTEX_M                (0x00)                                                       /*!< Cortex core                    */
N
N#include <stdint.h>                           /* Include standard types */
L 1 "C:\Keil_C51\ARM\RV31\Inc\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 137748 $
N * Checkin $Date: 2008-09-11 17:34:24 +0100 (Thu, 11 Sep 2008) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N * '__int64' is used instead of 'long long' so that this header
N * can be used in --strict mode.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed       __int64 intmax_t;
Ntypedef unsigned       __int64 uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __ESCAPE__(~0x7fffffffffffffffll) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#define INTPTR_MIN (~0x7fffffff)
N
N    /* maximum value of pointer-holding signed integer type */
N#define INTPTR_MAX   2147483647
N
N    /* maximum value of pointer-holding unsigned integer type */
N#define UINTPTR_MAX  4294967295u
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#define PTRDIFF_MIN (~0x7fffffff)
N#define PTRDIFF_MAX   2147483647
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#define SIZE_MAX 4294967295u
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32)
X#if 0L
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __ESCAPE__(x ## ll)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __ESCAPE__(x ## ull)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
N
N
L 56 "..\..\CMSIS\core_cm0.h" 2
N
N#if defined (__ICCARM__)
X#if 0L
S  #include <intrinsics.h>                     /* IAR Intrinsics   */
N#endif
N
N
N#ifndef __NVIC_PRIO_BITS
S  #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
N#endif
N
N
N
N
N/**
N * IO definitions
N *
N * define access restrictions to peripheral registers
N */
N
N#ifdef __cplusplus
S  #define     __I     volatile                /*!< defines 'read only' permissions      */
N#else
N  #define     __I     volatile const          /*!< defines 'read only' permissions      */
N#endif
N#define     __O     volatile                  /*!< defines 'write only' permissions     */
N#define     __IO    volatile                  /*!< defines 'read / write' permissions   */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N ******************************************************************************/
N/** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
N @{
N*/
N
N
N/** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
N  memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
N  @{
N */
Ntypedef struct
N{
N  __IO uint32_t ISER[1];                      /*!< (Offset: 0x000) Interrupt Set Enable Register            */
X  volatile uint32_t ISER[1];                       
N       uint32_t RESERVED0[31];
N  __IO uint32_t ICER[1];                      /*!< (Offset: 0x080) Interrupt Clear Enable Register          */
X  volatile uint32_t ICER[1];                       
N       uint32_t RSERVED1[31];
N  __IO uint32_t ISPR[1];                      /*!< (Offset: 0x100) Interrupt Set Pending Register           */
X  volatile uint32_t ISPR[1];                       
N       uint32_t RESERVED2[31];
N  __IO uint32_t ICPR[1];                      /*!< (Offset: 0x180) Interrupt Clear Pending Register         */
X  volatile uint32_t ICPR[1];                       
N       uint32_t RESERVED3[31];
N       uint32_t RESERVED4[64];
N  __IO uint32_t IPR[8];                       /*!< (Offset: 0x3EC) Interrupt Priority Register              */
X  volatile uint32_t IPR[8];                        
N}  NVIC_Type;
N/*@}*/ /* end of group CMSIS_CM0_NVIC */
N
N
N/** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
N  memory mapped structure for System Control Block (SCB)
N  @{
N */
Ntypedef struct
N{
N  __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register                                  */
X  volatile const  uint32_t CPUID;                         
N  __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register                      */
X  volatile uint32_t ICSR;                          
N       uint32_t RESERVED0;                                      
N  __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Control Register        */
X  volatile uint32_t AIRCR;                         
N  __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register                               */
X  volatile uint32_t SCR;                           
N  __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register                        */
X  volatile uint32_t CCR;                           
N       uint32_t RESERVED1;                                      
N  __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers. [0] is RESERVED   */
X  volatile uint32_t SHP[2];                        
N  __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State Register             */
X  volatile uint32_t SHCSR;                         
N       uint32_t RESERVED2[2];                                   
N  __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register                           */
X  volatile uint32_t DFSR;                          
N} SCB_Type;                                                
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N/* SCB Debug Fault Status Register Definitions */
N#define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB DFSR: EXTERNAL Position */
N#define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
N
N#define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB DFSR: VCATCH Position */
N#define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
N
N#define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB DFSR: DWTTRAP Position */
N#define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
N
N#define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB DFSR: BKPT Position */
N#define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
N
N#define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB DFSR: HALTED Position */
N#define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB DFSR: HALTED Mask */
N/*@}*/ /* end of group CMSIS_CM0_SCB */
N
N
N/** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
N  memory mapped structure for SysTick
N  @{
N */
Ntypedef struct
N{
N  __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                          
N  __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register       */
X  volatile uint32_t LOAD;                          
N  __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register      */
X  volatile uint32_t VAL;                           
N  __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register        */
X  volatile const  uint32_t CALIB;                         
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysTick CALIB: TENMS Mask */
N/*@}*/ /* end of group CMSIS_CM0_SysTick */
N
N
N/** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
N  memory mapped structure for Core Debug Register
N  @{
N */
Ntypedef struct
N{
N  __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status Register    */
X  volatile uint32_t DHCSR;                         
N  __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Register        */
X  volatile  uint32_t DCRSR;                         
N  __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register            */
X  volatile uint32_t DCRDR;                         
N  __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Control Register */
X  volatile uint32_t DEMCR;                         
N} CoreDebug_Type;
N
N/* Debug Halting Control and Status Register */
N#define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< CoreDebug DHCSR: DBGKEY Position */
N#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
N
N#define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< CoreDebug DHCSR: S_RESET_ST Position */
N#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
N
N#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
N#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
N
N#define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< CoreDebug DHCSR: S_LOCKUP Position */
N#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
N
N#define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< CoreDebug DHCSR: S_SLEEP Position */
N#define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
N
N#define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< CoreDebug DHCSR: S_HALT Position */
N#define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
N
N#define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< CoreDebug DHCSR: S_REGRDY Position */
N#define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
N
N#define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< CoreDebug DHCSR: C_MASKINTS Position */
N#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
N
N#define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< CoreDebug DHCSR: C_STEP Position */
N#define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
N
N#define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< CoreDebug DHCSR: C_HALT Position */
N#define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
N
N#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< CoreDebug DHCSR: C_DEBUGEN Position */
N#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
N
N/* Debug Core Register Selector Register */
N#define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< CoreDebug DCRSR: REGWnR Position */
N#define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
N
N#define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< CoreDebug DCRSR: REGSEL Position */
N#define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< CoreDebug DCRSR: REGSEL Mask */
N
N/* Debug Exception and Monitor Control Register */
N#define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< CoreDebug DEMCR: DWTENA Position */
N#define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< CoreDebug DEMCR: DWTENA Mask */
N
N#define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< CoreDebug DEMCR: VC_HARDERR Position */
N#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
N
N#define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< CoreDebug DEMCR: VC_CORERESET Position */
N#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< CoreDebug DEMCR: VC_CORERESET Mask */
N/*@}*/ /* end of group CMSIS_CM0_CoreDebug */
N
N
N/* Memory mapping of Cortex-M0 Hardware */
N#define SCS_BASE            (0xE000E000)                              /*!< System Control Space Base Address */
N#define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address           */
N#define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address              */
N#define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address                 */
N#define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Base Address */
N
N#define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct          */
N#define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration struct      */
N#define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struct         */
N#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct   */
N
N/*@}*/ /* end of group CMSIS_CM0_core_register */
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N ******************************************************************************/
N
N#if defined ( __CC_ARM   )
X#if 1L
N  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler          */
N  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler       */
N
N#elif defined ( __ICCARM__ )
S  #define __ASM           __asm                                       /*!< asm keyword for IAR Compiler          */
S  #define __INLINE        inline                                      /*!< inline keyword for IAR Compiler. Only avaiable in High optimization mode! */
S
S#elif defined   (  __GNUC__  )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler          */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler       */
S
S#elif defined   (  __TASKING__  )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler      */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler   */
S
N#endif
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N
N#if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
X#if 1L  
N/* ARM armcc specific functions */
N
N#define __enable_fault_irq                __enable_fiq
N#define __disable_fault_irq               __disable_fiq
N
N#define __NOP                             __nop
N#define __WFI                             __wfi
N#define __WFE                             __wfe
N#define __SEV                             __sev
N#define __ISB()                           __isb(0)
N#define __DSB()                           __dsb(0)
N#define __DMB()                           __dmb(0)
N#define __REV                             __rev
N
N
N/* intrinsic void __enable_irq();     */
N/* intrinsic void __disable_irq();    */
N
N
N/**
N * @brief  Return the Process Stack Pointer
N *
N * @return ProcessStackPointer
N *
N * Return the actual process stack pointer
N */
Nextern uint32_t __get_PSP(void);
N
N/**
N * @brief  Set the Process Stack Pointer
N *
N * @param  topOfProcStack  Process Stack Pointer
N *
N * Assign the value ProcessStackPointer to the MSP 
N * (process stack pointer) Cortex processor register
N */
Nextern void __set_PSP(uint32_t topOfProcStack);
N
N/**
N * @brief  Return the Main Stack Pointer
N *
N * @return Main Stack Pointer
N *
N * Return the current value of the MSP (main stack pointer)
N * Cortex processor register
N */
Nextern uint32_t __get_MSP(void);
N
N/**
N * @brief  Set the Main Stack Pointer
N *
N * @param  topOfMainStack  Main Stack Pointer
N *
N * Assign the value mainStackPointer to the MSP 
N * (main stack pointer) Cortex processor register
N */
Nextern void __set_MSP(uint32_t topOfMainStack);
N
N/**
N * @brief  Reverse byte order in unsigned short value
N *
N * @param   value  value to reverse
N * @return         reversed value
N *
N * Reverse byte order in unsigned short value
N */
Nextern uint32_t __REV16(uint16_t value);
N
N/**
N * @brief  Reverse byte order in signed short value with sign extension to integer
N *
N * @param   value  value to reverse
N * @return         reversed value
N *
N * Reverse byte order in signed short value with sign extension to integer
N */
Nextern int32_t __REVSH(int16_t value);
N
N
N#if (__ARMCC_VERSION < 400000)
X#if (410894 < 400000)
S
S/**
S * @brief  Return the Priority Mask value
S *
S * @return PriMask
S *
S * Return state of the priority mask bit from the priority mask register
S */
Sextern uint32_t __get_PRIMASK(void);
S
S/**
S * @brief  Set the Priority Mask value
S *
S * @param   priMask  PriMask
S *
S * Set the priority mask bit in the priority mask register
S */
Sextern void __set_PRIMASK(uint32_t priMask);
S
S/**
S * @brief  Return the Control Register value
S * 
S * @return Control value
S *
S * Return the content of the control register
S */
Sextern uint32_t __get_CONTROL(void);
S
S/**
S * @brief  Set the Control Register value
S *
S * @param  control  Control value
S *
S * Set the control register
S */
Sextern void __set_CONTROL(uint32_t control);
S
N#else  /* (__ARMCC_VERSION >= 400000)  */
N
N
N/**
N * @brief  Return the Priority Mask value
N *
N * @return PriMask
N *
N * Return state of the priority mask bit from the priority mask register
N */
Nstatic __INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N/**
N * @brief  Set the Priority Mask value
N *
N * @param  priMask  PriMask
N *
N * Set the priority mask bit in the priority mask register
N */
Nstatic __INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N/**
N * @brief  Return the Control Register value
N * 
N * @return Control value
N *
N * Return the content of the control register
N */
Nstatic __INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N/**
N * @brief  Set the Control Register value
N *
N * @param  control  Control value
N *
N * Set the control register
N */
Nstatic __INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N#endif /* __ARMCC_VERSION  */ 
N
N
N
N#elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
S/* IAR iccarm specific functions */
S
S#define __enable_irq                              __enable_interrupt        /*!< global Interrupt enable */
S#define __disable_irq                             __disable_interrupt       /*!< global Interrupt disable */
S
Sstatic __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
Sstatic __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
S
S#define __NOP                                     __no_operation            /*!< no operation intrinsic in IAR Compiler */ 
Sstatic __INLINE  void __WFI()                     { __ASM ("wfi"); }
Sstatic __INLINE  void __WFE()                     { __ASM ("wfe"); }
Sstatic __INLINE  void __SEV()                     { __ASM ("sev"); }
S
S/* intrinsic void __ISB(void)                                     */
S/* intrinsic void __DSB(void)                                     */
S/* intrinsic void __DMB(void)                                     */
S/* intrinsic void __set_PRIMASK();                                */
S/* intrinsic void __get_PRIMASK();                                */
S
S
S/* intrinsic uint32_t __REV(uint32_t value);                      */
S/* intrinsic uint32_t __REVSH(uint32_t value);                    */
S
S
S/**
S * @brief  Return the Process Stack Pointer
S *
S * @return ProcessStackPointer
S *
S * Return the actual process stack pointer
S */
Sextern uint32_t __get_PSP(void);
S
S/**
S * @brief  Set the Process Stack Pointer
S *
S * @param  topOfProcStack  Process Stack Pointer
S *
S * Assign the value ProcessStackPointer to the MSP 
S * (process stack pointer) Cortex processor register
S */
Sextern void __set_PSP(uint32_t topOfProcStack);
S
S/**
S * @brief  Return the Main Stack Pointer
S *
S * @return Main Stack Pointer
S *
S * Return the current value of the MSP (main stack pointer)
S * Cortex processor register
S */
Sextern uint32_t __get_MSP(void);
S
S/**
S * @brief  Set the Main Stack Pointer
S *
S * @param  topOfMainStack  Main Stack Pointer
S *
S * Assign the value mainStackPointer to the MSP 
S * (main stack pointer) Cortex processor register
S */
Sextern void __set_MSP(uint32_t topOfMainStack);
S
S/**
S * @brief  Reverse byte order in unsigned short value
S *
S * @param  value  value to reverse
S * @return        reversed value
S *
S * Reverse byte order in unsigned short value
S */
Sextern uint32_t __REV16(uint16_t value);
S
S
S
S
S
S#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
Sstatic __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
Sstatic __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
S
Sstatic __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
Sstatic __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
S
Sstatic __INLINE void __NOP()                      { __ASM volatile ("nop"); }
Sstatic __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
Sstatic __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
Sstatic __INLINE void __SEV()                      { __ASM volatile ("sev"); }
Sstatic __INLINE void __ISB()                      { __ASM volatile ("isb"); }
Sstatic __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
Sstatic __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
S
S
S/**
S * @brief  Return the Process Stack Pointer
S *
S * @return ProcessStackPointer
S *
S * Return the actual process stack pointer
S */
Sextern uint32_t __get_PSP(void);
S
S/**
S * @brief  Set the Process Stack Pointer
S *
S * @param  topOfProcStack  Process Stack Pointer
S *
S * Assign the value ProcessStackPointer to the MSP 
S * (process stack pointer) Cortex processor register
S */
Sextern void __set_PSP(uint32_t topOfProcStack);
S
S/**
S * @brief  Return the Main Stack Pointer
S *
S * @return Main Stack Pointer
S *
S * Return the current value of the MSP (main stack pointer)
S * Cortex processor register
S */
Sextern uint32_t __get_MSP(void);
S
S/**
S * @brief  Set the Main Stack Pointer
S *
S * @param  topOfMainStack  Main Stack Pointer
S *
S * Assign the value mainStackPointer to the MSP 
S * (main stack pointer) Cortex processor register
S */
Sextern void __set_MSP(uint32_t topOfMainStack);
S
S/**
S * @brief  Return the Priority Mask value
S *
S * @return PriMask
S *
S * Return state of the priority mask bit from the priority mask register
S */
Sextern uint32_t  __get_PRIMASK(void);
S
S/**
S * @brief  Set the Priority Mask value
S *
S * @param  priMask  PriMask
S *
S * Set the priority mask bit in the priority mask register
S */
Sextern void __set_PRIMASK(uint32_t priMask);
S
S/**
S * @brief  Return the Control Register value
S* 
S*  @return Control value
S *
S * Return the content of the control register
S */
Sextern uint32_t __get_CONTROL(void);
S
S/**
S * @brief  Set the Control Register value
S *
S * @param  control  Control value
S *
S * Set the control register
S */
Sextern void __set_CONTROL(uint32_t control);
S
S/**
S * @brief  Reverse byte order in integer value
S *
S * @param  value  value to reverse
S * @return        reversed value
S *
S * Reverse byte order in integer value
S */
Sextern uint32_t __REV(uint32_t value);
S
S/**
S * @brief  Reverse byte order in unsigned short value
S *
S * @param  value  value to reverse
S * @return        reversed value
S *
S * Reverse byte order in unsigned short value
S */
Sextern uint32_t __REV16(uint16_t value);
S
S/**
S * @brief  Reverse byte order in signed short value with sign extension to integer
S *
S * @param  value  value to reverse
S * @return        reversed value
S *
S * Reverse byte order in signed short value with sign extension to integer
S */
Sextern int32_t __REVSH(int16_t value);
S
S
S#elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
S/* TASKING carm specific functions */
S
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all instrinsics,
S * Including the CMSIS ones.
S */
S
N#endif
N
N
N/** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
N  Core  Function Interface containing:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Reset Functions
N*/
N/*@{*/
N
N/* ##########################   NVIC functions  #################################### */
N
N/* Interrupt Priorities are WORD accessible only under ARMv6M                   */
N/* The following MACROS handle generation of the register offset and byte masks */
N#define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
N#define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
N#define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
N
N
N/**
N * @brief  Enable Interrupt in NVIC Interrupt Controller
N *
N * @param  IRQn   The positive number of the external interrupt to enable
N *
N * Enable a device specific interupt in the NVIC interrupt controller.
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Disable the interrupt line for external interrupt specified
N * 
N * @param  IRQn   The positive number of the external interrupt to disable
N * 
N * Disable a device specific interupt in the NVIC interrupt controller.
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Read the interrupt pending bit for a device specific interrupt source
N * 
N * @param  IRQn    The number of the device specifc interrupt
N * @return         1 = interrupt pending, 0 = interrupt not pending
N *
N * Read the pending register in NVIC and return 1 if its status is pending, 
N * otherwise it returns 0
N */
Nstatic __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
X  return((uint32_t) ((((NVIC_Type *) ((0xE000E000) + 0x0100))->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
N}
N
N/**
N * @brief  Set the pending bit for an external interrupt
N * 
N * @param  IRQn    The number of the interrupt for set pending
N *
N * Set the pending bit for the specified interrupt.
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Clear the pending bit for an external interrupt
N *
N * @param  IRQn    The number of the interrupt for clear pending
N *
N * Clear the pending bit for the specified interrupt. 
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Set the priority for an interrupt
N *
N * @param  IRQn      The number of the interrupt for set priority
N * @param  priority  The priority to set
N *
N * Set the priority for the specified interrupt. The interrupt 
N * number can be positive to specify an external (device specific) 
N * interrupt, or negative to specify an internal (core) interrupt.
N *
N * Note: The priority cannot be set for every core interrupt.
N */
Nstatic __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if(IRQn < 0) {
N    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
X    ((SCB_Type *) ((0xE000E000) + 0x0D00))->SHP[( ((((uint32_t)(IRQn) & 0x0F)-8) >> 2) )] = (((SCB_Type *) ((0xE000E000) + 0x0D00))->SHP[( ((((uint32_t)(IRQn) & 0x0F)-8) >> 2) )] & ~(0xFF << ( (((uint32_t)(IRQn) ) & 0x03) * 8 ))) | 
N        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
X        (((priority << (8 - 2)) & 0xFF) << ( (((uint32_t)(IRQn) ) & 0x03) * 8 )); }
N  else {
N    NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
X    ((NVIC_Type *) ((0xE000E000) + 0x0100))->IPR[( ((uint32_t)(IRQn) >> 2) )] = (((NVIC_Type *) ((0xE000E000) + 0x0100))->IPR[( ((uint32_t)(IRQn) >> 2) )] & ~(0xFF << ( (((uint32_t)(IRQn) ) & 0x03) * 8 ))) |
N        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
X        (((priority << (8 - 2)) & 0xFF) << ( (((uint32_t)(IRQn) ) & 0x03) * 8 )); }
N}
N
N/**
N * @brief  Read the priority for an interrupt
N *
N * @param  IRQn      The number of the interrupt for get priority
N * @return           The priority for the interrupt
N *
N * Read the priority for the specified interrupt. The interrupt 
N * number can be positive to specify an external (device specific) 
N * interrupt, or negative to specify an internal (core) interrupt.
N *
N * The returned priority value is automatically aligned to the implemented
N * priority bits of the microcontroller.
N *
N * Note: The priority cannot be set for every core interrupt.
N */
Nstatic __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if(IRQn < 0) {
N    return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M0 system interrupts */
X    return((uint32_t)((((SCB_Type *) ((0xE000E000) + 0x0D00))->SHP[( ((((uint32_t)(IRQn) & 0x0F)-8) >> 2) )] >> ( (((uint32_t)(IRQn) ) & 0x03) * 8 ) ) >> (8 - 2)));  }  
N  else {
N    return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
X    return((uint32_t)((((NVIC_Type *) ((0xE000E000) + 0x0100))->IPR[( ((uint32_t)(IRQn) >> 2) )] >> ( (((uint32_t)(IRQn) ) & 0x03) * 8 ) ) >> (8 - 2)));  }  
N}
N
N
N
N/* ##################################    SysTick function  ############################################ */
N
N#if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
X#if (!1L) || (0 == 0)
N
N/**
N * @brief  Initialize and start the SysTick counter and its interrupt.
N *
N * @param   ticks   number of ticks between two interrupts
N * @return  1 = failed, 0 = successful
N *
N * Initialise the system tick timer and its interrupt and start the
N * system tick timer / counter in free running mode to generate 
N * periodical interrupts.
N */
Nstatic __INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{ 
N  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
X  if (ticks > (0xFFFFFFul << 0))  return (1);             
N                                                               
N  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
X  ((SysTick_Type *) ((0xE000E000) + 0x0010))->LOAD  = (ticks & (0xFFFFFFul << 0)) - 1;       
N  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
X  NVIC_SetPriority (SysTick_IRQn, (1<<2) - 1);   
N  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000) + 0x0010))->VAL   = 0;                                           
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
X  ((SysTick_Type *) ((0xE000E000) + 0x0010))->CTRL  = (1ul << 2) | 
N                   SysTick_CTRL_TICKINT_Msk   | 
X                   (1ul << 1)   | 
N                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
X                   (1ul << 0);                     
N  return (0);                                                  /* Function successful */
N}
N
N#endif
N
N
N
N
N/* ##################################    Reset function  ############################################ */
N
N/**
N * @brief  Initiate a system reset request.
N *
N * Initiate a system reset request to reset the MCU
N */
Nstatic __INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
X  ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR  = ((0x5FA << 16)      | 
N                 SCB_AIRCR_SYSRESETREQ_Msk);
X                 (1ul << 2));
N  __DSB();                                                                             /* Ensure completion of memory access */              
X  __dsb(0);                                                                                            
N  while(1);                                                                            /* wait until reset */
N}
N
N/*@}*/ /* end of group CMSIS_CM0_Core_FunctionInterface */
N
N#ifdef __cplusplus
S}
N#endif
N
N/*@}*/ /* end of group CMSIS_CM0_core_definitions */
N
N#endif /* __CM0_CORE_H__ */
N
N/*lint -restore */
L 75 "..\..\CMSIS\NUC1xx.h" 2
N#include "system_NUC1xx.h"              /* NUC1xx System                                          */
L 1 "..\..\CMSIS\system_NUC1xx.h" 1
N/*---------------------------------------------------------------------------------------------------------*/
N/*                                                                                                         */
N/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#ifndef __SYSTEM_NUC1xx_H
N#define __SYSTEM_NUC1xx_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif 
N/*---------------------------------------------------------------------------------------------------------*/
N/* Macro Definition                                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
N
N//#define DEBUG_ENABLE_SEMIHOST   /* To enable semihosted. !!!The SEMIHOSTED of startup_NUC1xx.s must be {TRUE} */
N
N/* Using UART0 or UART1 */  
N#define DEBUG_PORT   0 		    /*0:UART0  1:UART1 2:UART2 */
N
N/*----------------------------------------------------------------------------
N  Define SYSCLK
N *----------------------------------------------------------------------------*/
N#define __XTAL      (12000000UL)
N#define __RTC_XTAL  (32768UL)
N#define __IRC22M    (22118400UL)
N#define __IRC10K    (10000UL)
N#define __HSI       (__IRC22M)      /* Factory Default is internal 22MHz */
N
Nextern uint32_t SystemCoreClock;                   /*!< System Clock Frequency (Core Clock) */
Nextern uint32_t CyclesPerUs;                       /* Cycles per micro second */
N
N/**
N * Initialize the system
N *
N * @param  none
N * @return none
N *
N * @brief  Setup the microcontroller system
N *         Initialise GPIO directions and values
N */
Nextern void SystemInit(void);
N
N
N/**
N * Update SystemCoreClock variable
N *
N * @param  none
N * @return none
N *
N * @brief  Updates the SystemCoreClock with current core Clock 
N *         retrieved from cpu registers.
N */
Nextern void SystemCoreClockUpdate (void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
L 76 "..\..\CMSIS\NUC1xx.h" 2
N#include "SysInfra.h"    
L 1 "..\..\Driver\Include\System\SysInfra.h" 1
N/*---------------------------------------------------------------------------------------------------------*/
N/*                                                                                                         */
N/* Copyright (c) Nuvoton Technology Corp. All rights reserved.                                             */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N
N
N#ifndef __SYSINFRA_H__
N#define __SYSINFRA_H__
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Includes of system headers                                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N#include "ModuleID.h"
L 1 "..\..\Driver\Include\System\ModuleID.h" 1
N/*---------------------------------------------------------------------------------------------------------*/
N/*                                                                                                         */
N/* Copyright (c) Nuvoton Technology Corp. All rights reserved.                                             */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N
N#ifndef __MODULE_ID_H__
N#define __MODULE_ID_H__
N
N
Ntypedef enum
N{
N	/* Module ID valid range: 0 ~ 255 */
N	
N	/* Driver: Module ID					Module Name */
N	MODULE_ID_DRVPROTECT		= 0,		/* DrvProtect */
N
N	MODULE_ID_DRVADC			= 2,		/* DrvADC  */
N	MODULE_ID_DRVAIC			= 4,		/* DrvAIC  */
N	MODULE_ID_DRVAPU			= 6,		/* DrvAPU  */
N	MODULE_ID_DRVAUDIOADC		= 8,		/* DrvAudioADC */
N	MODULE_ID_DRVCACHE			= 10,		/* DrvCache	*/
N	MODULE_ID_DRVCAN			= 11,		/* DrvCAN */
N	MODULE_ID_DRVEBI			= 12,		/* DrvEBI */
N	MODULE_ID_DRVEDMA			= 13,		/* DrvEDMA */
N	MODULE_ID_DRVGDMA			= 14,		/* DrvGDMA */
N	MODULE_ID_DRVFSC			= 15,		/* DrvFSC */
N	MODULE_ID_DRVGE				= 16,		/* DrvGE  */
N	MODULE_ID_DRVFMC			= 17,		/* DrvFMC */
N	MODULE_ID_DRVGPIO			= 18,		/* DrvGPIO */
N	
N	MODULE_ID_DRVGPU			= 20,		/* DrvGPU */
N	MODULE_ID_DRVI2C			= 22,		/* DrvI2C (S/W I2C for Non-UL; H/W I2C for UL) */
N	MODULE_ID_DRVI2S			= 24,		/* DrvI2S */
N	MODULE_ID_DRVI2SM			= 26,		/* DrvI2SM	*/
N	MODULE_ID_DRVMPU			= 28,		/* DrvMPU */
N	MODULE_ID_DRVNAND			= 30,		/* DrvNAND */
N	MODULE_ID_DRVNOR			= 32,		/* DrvNOR */
N	MODULE_ID_DRVPDMA     		= 33,       /* DrvPDMA */
N	MODULE_ID_DRVPWM			= 34,		/* DrvPWM */
N	MODULE_ID_DRVPS2			= 35,		/* DrvPS2 */
N	MODULE_ID_DRVRTC			= 36,		/* DrvRTC */
N	MODULE_ID_DRVSDCARD			= 38,		/* DrvSDCard */
N	MODULE_ID_DRVSIO			= 39,		/* DrvSerialIO */
N
N	MODULE_ID_DRVSPI			= 40,		/* DrvSPI */
N	MODULE_ID_DRVSPIMS			= 41,		/* DrvSPIMS	*/
N	MODULE_ID_DRVSPIFLASH		= 42,		/* DrvSPIFlash */
N	MODULE_ID_DRVSPIM			= 43,		/* DrvSPIM */
N	MODULE_ID_DRVSYS			= 44,		/* DrvSystem */
N	MODULE_ID_DRVSPU			= 45,		/* DrvSPU */
N	MODULE_ID_DRVTIMER			= 46,		/* DrvTimer	*/
N	MODULE_ID_DRVUART			= 48,		/* DrvUART */
N	MODULE_ID_DRVUSB			= 50,		/* DrvUSB */
N	MODULE_ID_DRVUSBH			= 52,		/* DrvUSBH */
N	MODULE_ID_DRVVDMA			= 54,		/* DrvVDMA */
N	MODULE_ID_DRVVIDEOIN		= 56,		/* DrvVideoIn */
N	MODULE_ID_DRVVPOST			= 58,		/* DrvVPOST	*/
N
N	MODULE_ID_DRVVRAM			= 60,		/* DrvVRAM	*/
N	MODULE_ID_DRVW55U02			= 62,		/* DrvW55U02 */
N	MODULE_ID_DRVI2CH			= 64,		/* DrvI2CH (H/W I2C for Non-UL) */
N	MODULE_ID_DRVWDT			= 66,		/* DrvWDT  */
N	MODULE_ID_DRVJPEG			= 68,		/* DrvJPEG */
N	
N	MODULE_ID_DRVZEROG			= 70,		/* DrvZeroG	 */
N	MODULE_ID_DRVSI2C			= 71,		/* DrvSI2C (S/W I2C for Non-UL) */
N
N	/* Audio: Module ID						Module Name */
N	MODULE_ID_AEC				= 81,		/* AEC	*/
N	MODULE_ID_BEATDET			= 82,		/* BeatDetection */
N	MODULE_ID_SNDEFF			= 83,		/* SoundEffect	*/
N	MODULE_ID_AUDIOSYN			= 84,		/* AudioSynthesizer */
N	MODULE_ID_G726ADPCM			= 85,		/* G726ADPCM  */
N	MODULE_ID_IMAADPCM			= 86,		/* IMAAdpcmCodec */
N	MODULE_ID_MP3DEC			= 88,		/* MP3Decoder */
N	MODULE_ID_PITCHCHANGE		= 90,		/* PitchChanger	*/
N	MODULE_ID_WAVFILEUTIL		= 92,		/* WavFileUtil */
N	MODULE_ID_WMADEC			= 96,		/* WMADecoder  */
N	MODULE_ID_WMADECDRM			= 98,		/* WMADecoderWithDrm */
N	MODULE_ID_AUDIOCTRL			= 100,		/* AudioCtrl */
N	MODULE_ID_EQ				= 106,		/* Equalizer */
N	MODULE_ID_OGGDEC			= 110,		/* OggDecoder */
N	MODULE_ID_MP3ENC			= 112,		/* MP3Encoder */
N	MODULE_ID_UADEC				= 114,		/* UltraAudioDec */
N	MODULE_ID_ULSPEECHDEC		= 115,		/* UltraLowSpeechDec */
N	MODULE_ID_USPEECHDEC		= 116,		/* UltraSpeechDec */
N	MODULE_ID_SPEECHRECOG		= 118,		/* SpeechRecog */
N
N	/* File System: Module ID				Module Name */
N	MODULE_ID_FS				= 120,		/* FileSystem */
N	
N	/* Flash Lite: Module ID				Module Name */
N	MODULE_ID_FL				= 128,		/* FlashLite */
N	
N	/* Communication: Module ID				Module Name */
N	MODULE_ID_KEYPAD			= 130,		/* Keypad  */
N	MODULE_ID_LWIP				= 132,		/* LwIP	  */
N	MODULE_ID_WLANMGR			= 134,		/* WLanMgr	*/
N	MODULE_ID_HTTPD				= 136,		/* HTTPD   */
N	MODULE_ID_VIRTUALCOM		= 139,		/* VirtualCOM */
N
N	/* Graphics: Module ID					Module Name */
N	MODULE_ID_GFXRESLDR			= 140,		/* GraphicsResLoader */
N	MODULE_ID_GFXLIB			= 141,		/* GraphicsLib */
N	MODULE_ID_IMGPROC			= 142,		/* ImageProcess	*/
N	MODULE_ID_JPEG				= 144,		/* JPEGCodec */
N	MODULE_ID_PNGDEC			= 146,		/* PNGCodec	*/
N	MODULE_ID_BARCODE2D			= 148,		/* BarCode2D */	 
N	MODULE_ID_PTNRECOG			= 150,		/* PtnRecog	*/
N	MODULE_ID_MOTIONDET			= 152,		/* MotionDection */
N	
N	/* Storage: Module ID					Module Name	*/
N	MODULE_ID_STORIF			= 160,		/* StorageInterface */
N	MODULE_ID_SDCARD			= 161,		/* SDCard */
N	MODULE_ID_SYSNAND			= 162,		/* SysNand */
N	MODULE_ID_SPIFLASH			= 163,		/* SPIFlash	*/
N	MODULE_ID_WTRIF				= 164,		/* WriterInterface */
N	MODULE_ID_NORFLASH			= 165,		/* NORFlash	*/
N	MODULE_ID_SYSNANDLITE		= 166,		/* SysNandLite */
N	
N	/* System: Module ID					Module Name */
N	MODULE_ID_INTMGR			= 180,		/* InterruptManager */
N	MODULE_ID_BLKLDR			= 181,		/* BlockLoader */
N	MODULE_ID_MEMMGR			= 182,		/* MemoryManager */
N	MODULE_ID_EVTMGR			= 183,		/* EventManager	*/
N	MODULE_ID_PROF				= 184,		/* Profiling  */
N	MODULE_ID_PROGLDR			= 186,		/* ProgramLoader */
N	MODULE_ID_SYSINFRA			= 188,		/* SysInfra	*/
N	MODULE_ID_TIMERCTRL			= 190,		/* TimerCtrl */
N	MODULE_ID_TIMEUTIL			= 192,		/* TimeUtil	*/
N	MODULE_ID_CONPROGLDR		= 194,		/* ConsoleProgramLoader */
N	
N	/* USB: Module ID						Module Name */
N	MODULE_ID_USBCOREH			= 78,		/* USBCoreH	*/
N	MODULE_ID_HID				= 220,		/* HID */
N	MODULE_ID_MASSSTOR			= 222,		/* MassStor */
N	MODULE_ID_MASSSTORHID		= 224,		/* MassStorHID */
N	MODULE_ID_MASSSTORLITE		= 226,		/* MassStorLite	*/
N	MODULE_ID_MTP				= 230,		/* MTP */
N	MODULE_ID_USBINFRA			= 232,		/* USBInfra */
N	MODULE_ID_UAC				= 234,		/* UAC */
N	MODULE_ID_UAVC				= 236,		/* UAVC	*/
N	MODULE_ID_UVC				= 238,		/* UVC */
N	MODULE_ID_MASSSTORH			= 252,		/* MassStorH */
N	MODULE_ID_HIDH				= 254,		/* HIDH	*/
N	MODULE_ID_VCOM				= 253,		/* VCOM	*/
N
N	/* Security: Module ID					Module Name */
N	MODULE_ID_MSDRMPD			= 228,		/* MsDrmPd */
N	
N	/* Video: Module ID						Module Name */
N	MODULE_ID_AVICODEC			= 240,		/* AVICodec	 */
N	MODULE_ID_MJPEG				= 242,		/* MJpegCodec  */
N	MODULE_ID_WIVICORE			= 244,		/* WiViCore	*/
N	MODULE_ID_WIVI				= 246,		/* WiViDec */	
N	MODULE_ID_AVCTRL			= 248,		/* AVControl */
N	MODULE_ID_AVIUTIL			= 250,		/* AVIUtility */
N	
N	/* Wireless Toy							Module Name */
N	MODULE_ID_WTCHAN			= 168,		/* WTChannel */
N	MODULE_ID_WTCMDSERV			= 170,		/* WTCMDService */
N	MODULE_ID_WTDISPLAY			= 172,		/* WTDisplay */
N	MODULE_ID_WTMEDIA			= 174,		/* WTMedia */
N	MODULE_ID_WTSYS				= 176,		/* WTSystem	 */
N	MODULE_ID_WTTRANS			= 178,		/* WTTransport */
N	
N	// Module ID valid range: 0 ~ 255	
N} E_SYSINFRA_MODULE_ID;
N
N
N#endif /* __MODULE_ID_H__ */
L 15 "..\..\Driver\Include\System\SysInfra.h" 2
N#include "stdint.h"
N#include "core_cm0.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Define Version number								                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N
N#define SYSINFRA_MAJOR_NUM		1
N#define SYSINFRA_MINOR_NUM		00
N#define SYSINFRA_BUILD_NUM		1
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Macro, type and constant definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define an error code composed of error bit, module ID, and error ID. */
N#define _SYSINFRA_ERRCODE(IS_ERROR, MODULE_ID_VALUE, ERROR_ID)      (((IS_ERROR) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_VALUE) & 0xFF) | ((IS_ERROR) ? 0x100 : 0x00)) << 7) | ((ERROR_ID) & 0x7F))
N#define _SYSINFRA_ERRCODE_DEF(MODULE_ID, ERROR_NAME, IS_ERROR, MODULE_ID_VALUE, ERROR_ID) enum {E_##MODULE_ID##_##ERROR_NAME = ((IS_ERROR) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_VALUE) & 0xFF) | ((IS_ERROR) ? 0x100 : 0x00)) << 7) | ((ERROR_ID) & 0x7F)};
N
N/* Define a module version composed of major number, minor number, and build number. */
N#define _SYSINFRA_VERSION(MAJOR_NUM, MINOR_NUM, BUILD_NUM)          (((MAJOR_NUM) << 16) | ((MINOR_NUM) << 8) | (BUILD_NUM))
N#define _SYSINFRA_VERSION_DEF(MODULE_ID, MAJOR_NUM, MINOR_NUM, BUILD_NUM)	enum {MODULE_ID##_VERSION_NUM = ((MAJOR_NUM) << 16) | ((MINOR_NUM) << 8) | (BUILD_NUM)};
N
N/* Test if this error code means an error by seeing its error bit (BIT31). */
N#define _SYSINFRA_ERRCODE_IS_ERROR(ERROR_CODE)	((ERROR_CODE) < 0)
N/* Extract module ID part of this error code. */
N#define _SYSINFRA_ERRCODE_EXTRACT_MODULE_ID(ERROR_CODE)	(((ERROR_CODE) >> 7) & 0xFF)
N/* Extract error ID part of this error code. */
N#define _SYSINFRA_ERRCODE_EXTRACT_ERROR_ID(ERROR_CODE)	((ERROR_CODE) & 0x7F)
N
N/* Define module version number.*/
N#define SYSINFRA_VERSION_NUM    _SYSINFRA_VERSION(SYSINFRA_MAJOR_NUM, SYSINFRA_MINOR_NUM, SYSINFRA_BUILD_NUM)
N
N#define E_SUCCESS		0
N#define S_OK			E_SUCCESS
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Define Error Code									                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N/* #define Error Code */
N//E_SYSINFRA_NOT_DEFINE					Un-defined error code	
N//E_SYSINFRA_NULL_POINTER				A NULL pointer is passed as an argument
N//E_SYSINFRA_BUFFER_OVERRUN				Buffer size is not enough
N
N#define E_SYSINFRA_NOT_DEFINE       _SYSINFRA_ERRCODE(TRUE, MODULE_ID_SYSINFRA, 0)
N#define E_SYSINFRA_NULL_POINTER     _SYSINFRA_ERRCODE(TRUE, MODULE_ID_SYSINFRA, 1)
N#define E_SYSINFRA_BUFFER_OVERRUN   _SYSINFRA_ERRCODE(TRUE, MODULE_ID_SYSINFRA, 2)
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __SYSINFRA_H__
N
N
N
L 77 "..\..\CMSIS\NUC1xx.h" 2
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/******************************************************************************/
N/*                Device Specific Peripheral registers structures             */
N/******************************************************************************/
N
N/*--------------------- General Purpose Input and Ouptut ---------------------*/
Ntypedef struct
N{
N    __IO uint32_t PMD0:2;
X    volatile uint32_t PMD0:2;
N    __IO uint32_t PMD1:2;
X    volatile uint32_t PMD1:2;
N    __IO uint32_t PMD2:2;
X    volatile uint32_t PMD2:2;
N    __IO uint32_t PMD3:2;
X    volatile uint32_t PMD3:2;
N    __IO uint32_t PMD4:2;
X    volatile uint32_t PMD4:2;
N    __IO uint32_t PMD5:2;
X    volatile uint32_t PMD5:2;
N    __IO uint32_t PMD6:2;
X    volatile uint32_t PMD6:2;
N    __IO uint32_t PMD7:2;
X    volatile uint32_t PMD7:2;
N    __IO uint32_t PMD8:2;
X    volatile uint32_t PMD8:2;
N    __IO uint32_t PMD9:2;
X    volatile uint32_t PMD9:2;
N    __IO uint32_t PMD10:2;
X    volatile uint32_t PMD10:2;
N    __IO uint32_t PMD11:2;
X    volatile uint32_t PMD11:2;
N    __IO uint32_t PMD12:2;
X    volatile uint32_t PMD12:2;
N    __IO uint32_t PMD13:2;
X    volatile uint32_t PMD13:2;
N    __IO uint32_t PMD14:2;
X    volatile uint32_t PMD14:2;
N    __IO uint32_t PMD15:2;
X    volatile uint32_t PMD15:2;
N} GPIO_PMD_T;
N
Ntypedef __IO uint32_t GPIO_OFFD_T;
Xtypedef volatile uint32_t GPIO_OFFD_T;
N
Ntypedef __IO uint32_t GPIO_DOUT_T;
Xtypedef volatile uint32_t GPIO_DOUT_T;
N
Ntypedef __IO uint32_t GPIO_DMASK_T;
Xtypedef volatile uint32_t GPIO_DMASK_T;
N
Ntypedef __IO uint32_t GPIO_PIN_T;
Xtypedef volatile uint32_t GPIO_PIN_T;
N
Ntypedef __IO uint32_t GPIO_DBEN_T;
Xtypedef volatile uint32_t GPIO_DBEN_T;
N
Ntypedef __IO uint32_t GPIO_IMD_T;
Xtypedef volatile uint32_t GPIO_IMD_T;
N
Ntypedef __IO uint32_t GPIO_IEN_T;
Xtypedef volatile uint32_t GPIO_IEN_T;
N
Ntypedef __IO uint32_t GPIO_ISRC_T;
Xtypedef volatile uint32_t GPIO_ISRC_T;
N
Ntypedef struct
N{
N    union {
N        __IO uint32_t u32PMD;
X        volatile uint32_t u32PMD;
N        struct {
N            __IO uint32_t PMD0:2;
X            volatile uint32_t PMD0:2;
N            __IO uint32_t PMD1:2;
X            volatile uint32_t PMD1:2;
N            __IO uint32_t PMD2:2;
X            volatile uint32_t PMD2:2;
N            __IO uint32_t PMD3:2;
X            volatile uint32_t PMD3:2;
N            __IO uint32_t PMD4:2;
X            volatile uint32_t PMD4:2;
N            __IO uint32_t PMD5:2;
X            volatile uint32_t PMD5:2;
N            __IO uint32_t PMD6:2;
X            volatile uint32_t PMD6:2;
N            __IO uint32_t PMD7:2;
X            volatile uint32_t PMD7:2;
N            __IO uint32_t PMD8:2;
X            volatile uint32_t PMD8:2;
N            __IO uint32_t PMD9:2;
X            volatile uint32_t PMD9:2;
N            __IO uint32_t PMD10:2;
X            volatile uint32_t PMD10:2;
N            __IO uint32_t PMD11:2;
X            volatile uint32_t PMD11:2;
N            __IO uint32_t PMD12:2;
X            volatile uint32_t PMD12:2;
N            __IO uint32_t PMD13:2;
X            volatile uint32_t PMD13:2;
N            __IO uint32_t PMD14:2;
X            volatile uint32_t PMD14:2;
N            __IO uint32_t PMD15:2;
X            volatile uint32_t PMD15:2;
N        } PMD;
N    };
N
N    union {
N        __IO uint32_t u32OFFD;
X        volatile uint32_t u32OFFD;
N        __IO uint32_t OFFD;
X        volatile uint32_t OFFD;
N    };
N
N    union {
N        __IO uint32_t u32DOUT;
X        volatile uint32_t u32DOUT;
N        __IO uint32_t DOUT;
X        volatile uint32_t DOUT;
N    };
N
N    union {
N        __IO uint32_t u32DMASK;
X        volatile uint32_t u32DMASK;
N        __IO uint32_t DMASK;
X        volatile uint32_t DMASK;
N    };
N
N    union {
N        __IO uint32_t u32PIN;
X        volatile uint32_t u32PIN;
N        __IO uint32_t PIN;
X        volatile uint32_t PIN;
N    };
N
N    union {
N        __IO uint32_t u32DBEN;
X        volatile uint32_t u32DBEN;
N        __IO uint32_t DBEN;
X        volatile uint32_t DBEN;
N    };
N
N    union {
N        __IO uint32_t u32IMD;
X        volatile uint32_t u32IMD;
N        __IO uint32_t IMD;
X        volatile uint32_t IMD;
N    };
N
N    union {
N        __IO uint32_t u32IEN;
X        volatile uint32_t u32IEN;
N        __IO uint32_t IEN;
X        volatile uint32_t IEN;
N    };
N
N    union {
N        __IO uint32_t u32ISRC;
X        volatile uint32_t u32ISRC;
N        __IO uint32_t ISRC;
X        volatile uint32_t ISRC;
N    };
N} GPIO_T;
N
Ntypedef struct
N{
N    union {
N        __IO uint32_t u32DBNCECON;
X        volatile uint32_t u32DBNCECON;
N        struct {
N            __IO uint32_t   DBCLKSEL:4;
X            volatile uint32_t   DBCLKSEL:4;
N            __IO uint32_t   DBCLKSRC:1;
X            volatile uint32_t   DBCLKSRC:1;
N            __IO uint32_t   ICLK_ON:1;
X            volatile uint32_t   ICLK_ON:1;
N            __I  uint32_t   RESERVE:26;    
X            volatile const  uint32_t   RESERVE:26;    
N        } DBNCECON;
N    };
N} GPIO_DBNCECON_T;
N
N/* GPIO PMD Bit Field Definitions */
N#define GPIO_PMD_PMD15_Pos          30
N#define GPIO_PMD_PMD15_Msk          (0x3ul << GPIO_PMD_PMD15_Pos)
N
N#define GPIO_PMD_PMD14_Pos          28
N#define GPIO_PMD_PMD14_Msk          (0x3ul << GPIO_PMD_PMD14_Pos)
N
N#define GPIO_PMD_PMD13_Pos          26
N#define GPIO_PMD_PMD13_Msk          (0x3ul << GPIO_PMD_PMD13_Pos)
N
N#define GPIO_PMD_PMD12_Pos          24
N#define GPIO_PMD_PMD12_Msk          (0x3ul << GPIO_PMD_PMD12_Pos)
N
N#define GPIO_PMD_PMD11_Pos          22
N#define GPIO_PMD_PMD11_Msk          (0x3ul << GPIO_PMD_PMD11_Pos)
N
N#define GPIO_PMD_PMD10_Pos          20
N#define GPIO_PMD_PMD10_Msk          (0x3ul << GPIO_PMD_PMD10_Pos)
N
N#define GPIO_PMD_PMD9_Pos           18
N#define GPIO_PMD_PMD9_Msk           (0x3ul << GPIO_PMD_PMD9_Pos)
N
N#define GPIO_PMD_PMD8_Pos           16
N#define GPIO_PMD_PMD8_Msk           (0x3ul << GPIO_PMD_PMD8_Pos)
N
N#define GPIO_PMD_PMD7_Pos           14
N#define GPIO_PMD_PMD7_Msk           (0x3ul << GPIO_PMD_PMD7_Pos)
N
N#define GPIO_PMD_PMD6_Pos           12
N#define GPIO_PMD_PMD6_Msk           (0x3ul << GPIO_PMD_PMD6_Pos)
N
N#define GPIO_PMD_PMD5_Pos           10
N#define GPIO_PMD_PMD5_Msk           (0x3ul << GPIO_PMD_PMD5_Pos)
N
N#define GPIO_PMD_PMD4_Pos           8
N#define GPIO_PMD_PMD4_Msk           (0x3ul << GPIO_PMD_PMD4_Pos)
N
N#define GPIO_PMD_PMD3_Pos           6
N#define GPIO_PMD_PMD3_Msk           (0x3ul << GPIO_PMD_PMD3_Pos)
N
N#define GPIO_PMD_PMD2_Pos           4
N#define GPIO_PMD_PMD2_Msk           (0x3ul << GPIO_PMD_PMD2_Pos)
N
N#define GPIO_PMD_PMD1_Pos           2
N#define GPIO_PMD_PMD1_Msk           (0x3ul << GPIO_PMD_PMD1_Pos)
N
N#define GPIO_PMD_PMD0_Pos           0
N#define GPIO_PMD_PMD0_Msk           (0x3ul << GPIO_PMD_PMD0_Pos)
N
N/* GPIO OFFD Bit Field Definitions */
N#define GPIO_OFFD_Pos               16
N#define GPIO_OFFD_Msk               (0xFFFFul << GPIO_OFFD_Pos)
N
N/* GPIO DOUT Bit Field Definitions */
N#define GPIO_DOUT_Pos               0
N#define GPIO_DOUT_Msk               (0xFFFFul << GPIO_DOUT_Pos)
N
N/* GPIO DMASK Bit Field Definitions */
N#define GPIO_DMASK_Pos              0
N#define GPIO_DMASK_Msk              (0xFFFFul << GPIO_DMASK_Pos)
N
N/* GPIO PIN Bit Field Definitions */
N#define GPIO_PIN_Pos                0
N#define GPIO_PIN_Msk                (0xFFFFul << GPIO_PIN_Pos)
N
N/* GPIO DBEN Bit Field Definitions */
N#define GPIO_DBEN_Pos               0
N#define GPIO_DBEN_Msk               (0xFFFFul << GPIO_DBEN_Pos)
N
N/* GPIO IMD Bit Field Definitions */
N#define GPIO_IMD_Pos                0
N#define GPIO_IMD_Msk                (0xFFFFul << GPIO_IMD_Pos)
N
N/* GPIO IEN Bit Field Definitions */
N#define GPIO_IEN_IR_EN_Pos          16
N#define GPIO_IEN_IR_EN_Msk          (0xFFFFul << GPIO_IEN_IR_EN_Pos)
N
N#define GPIO_IEN_IF_EN_Pos          0
N#define GPIO_IEN_IF_EN_Msk          (0xFFFFul << GPIO_IEN_IF_EN_Pos)
N
N/* GPIO ISRC Bit Field Definitions */
N#define GPIO_ISRC_Pos               0
N#define GPIO_ISRC_Msk               (0xFFFFul << GPIO_ISRC_Pos)
N
N/* GPIO DBNCECON Bit Field Definitions */
N#define GPIO_DBNCECON_ICLK_ON_Pos   5
N#define GPIO_DBNCECON_ICLK_ON_Msk   (1ul << GPIO_DBNCECON_ICLK_ON_Pos)
N
N#define GPIO_DBNCECON_DBCLKSRC_Pos  4
N#define GPIO_DBNCECON_DBCLKSRC_Msk  (1ul << GPIO_DBNCECON_DBCLKSRC_Pos)
N
N#define GPIO_DBNCECON_DBCLKSEL_Pos  0
N#define GPIO_DBNCECON_DBCLKSEL_Msk  (0xFul << GPIO_DBNCECON_DBCLKSEL_Pos)
N
N/* GPIO Port[x] Pin I/O Bit Output/Input Control Bit Field Definitions */
N#define GPIO_GPIOx_DOUT_Pos         0
N#define GPIO_GPIOx_DOUT_Msk         (1ul << GPIO_GPIOx_DOUT_Pos)
N
N/*------------------------- UART Interface Controller ------------------------*/
N
Ntypedef __IO uint32_t UART_DATA_T;
Xtypedef volatile uint32_t UART_DATA_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  RDA_IEN:1;
X    volatile uint32_t  RDA_IEN:1;
N    __IO uint32_t  THRE_IEN:1;
X    volatile uint32_t  THRE_IEN:1;
N    __IO uint32_t  RLS_IEN:1;
X    volatile uint32_t  RLS_IEN:1;
N    __IO uint32_t  MODEM_IEN:1;
X    volatile uint32_t  MODEM_IEN:1;
N    __IO uint32_t  RTO_IEN:1;     
X    volatile uint32_t  RTO_IEN:1;     
N    __IO uint32_t  BUF_ERR_IEN:1;
X    volatile uint32_t  BUF_ERR_IEN:1;
N    __IO uint32_t  WAKE_EN:1;
X    volatile uint32_t  WAKE_EN:1;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  LIN_RX_BRK_IEN:1;
X    volatile uint32_t  LIN_RX_BRK_IEN:1;
N    __I  uint32_t  RESERVE1:2;
X    volatile const  uint32_t  RESERVE1:2;
N    __IO uint32_t  TIME_OUT_EN:1;      /* Time-out counter enable */
X    volatile uint32_t  TIME_OUT_EN:1;       
N    __IO uint32_t  AUTO_RTS_EN:1;
X    volatile uint32_t  AUTO_RTS_EN:1;
N    __IO uint32_t  AUTO_CTS_EN:1;
X    volatile uint32_t  AUTO_CTS_EN:1;
N    __IO uint32_t  DMA_TX_EN:1;
X    volatile uint32_t  DMA_TX_EN:1;
N    __IO uint32_t  DMA_RX_EN:1;
X    volatile uint32_t  DMA_RX_EN:1;
N    __I  uint32_t  RESERVE2:16;    
X    volatile const  uint32_t  RESERVE2:16;    
N    
N} UART_IER_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  RFR:1;
X    volatile uint32_t  RFR:1;
N    __IO uint32_t  TFR:1;
X    volatile uint32_t  TFR:1;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __IO uint32_t  RFITL:4;             /* Rx FIFO Interrupt Trigger Level */
X    volatile uint32_t  RFITL:4;              
N    __IO uint32_t  RX_DIS:1;
X    volatile uint32_t  RX_DIS:1;
N    __I  uint32_t  RESERVE2:7;
X    volatile const  uint32_t  RESERVE2:7;
N    __IO uint32_t  RTS_TRI_LEV:4;
X    volatile uint32_t  RTS_TRI_LEV:4;
N    __I  uint32_t  RESERVE3:12;
X    volatile const  uint32_t  RESERVE3:12;
N} UART_FCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  WLS:2;               /* Word length select */
X    volatile uint32_t  WLS:2;                
N    __IO uint32_t  NSB:1;               /* Number of STOP bit */
X    volatile uint32_t  NSB:1;                
N    __IO uint32_t  PBE:1;               /* Parity bit enable  */
X    volatile uint32_t  PBE:1;                
N    __IO uint32_t  EPE:1;               /* Even parity enable */
X    volatile uint32_t  EPE:1;                
N    __IO uint32_t  SPE:1;               /* Stick parity enable*/
X    volatile uint32_t  SPE:1;                
N    __IO uint32_t  BCB:1;               /* Break control bit  */
X    volatile uint32_t  BCB:1;                
N    __I  uint32_t  RESERVE:25;
X    volatile const  uint32_t  RESERVE:25;
N} UART_LCR_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  RTS:1;
X    volatile uint32_t  RTS:1;
N    __I  uint32_t  RESERVE1:2;
X    volatile const  uint32_t  RESERVE1:2;
N    __IO uint32_t  LBME:1;
X    volatile uint32_t  LBME:1;
N    __I  uint32_t  RESERVE2:4;
X    volatile const  uint32_t  RESERVE2:4;
N    __IO uint32_t  LEV_RTS:1;
X    volatile uint32_t  LEV_RTS:1;
N    __I  uint32_t  RESERVE3:3;
X    volatile const  uint32_t  RESERVE3:3;
N    __I  uint32_t  RTS_ST:1;               /* RTS status */
X    volatile const  uint32_t  RTS_ST:1;                
N    __I  uint32_t  RESERVE4:18;
X    volatile const  uint32_t  RESERVE4:18;
N} UART_MCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  DCTSF:1;
X    volatile uint32_t  DCTSF:1;
N    __I  uint32_t  RESERVE0:3;
X    volatile const  uint32_t  RESERVE0:3;
N    __I  uint32_t  CTS_ST:1;               /* CTS status */
X    volatile const  uint32_t  CTS_ST:1;                
N    __I  uint32_t  RESERVE1:3;
X    volatile const  uint32_t  RESERVE1:3;
N    __IO uint32_t  LEV_CTS:1;
X    volatile uint32_t  LEV_CTS:1;
N    __I  uint32_t  RESERVE2:23;
X    volatile const  uint32_t  RESERVE2:23;
N} UART_MSR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  RX_OVER_IF:1;
X    volatile uint32_t  RX_OVER_IF:1;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  RS485_ADD_DETF:1;
X    volatile uint32_t  RS485_ADD_DETF:1;
N    __IO uint32_t  PEF:1;
X    volatile uint32_t  PEF:1;
N    __IO uint32_t  FEF:1;
X    volatile uint32_t  FEF:1;
N    __IO uint32_t  BIF:1;
X    volatile uint32_t  BIF:1;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __I  uint32_t  RX_POINTER:6;
X    volatile const  uint32_t  RX_POINTER:6;
N    __I  uint32_t  RX_EMPTY:1;
X    volatile const  uint32_t  RX_EMPTY:1;
N    __I  uint32_t  RX_FULL:1;
X    volatile const  uint32_t  RX_FULL:1;
N    __I  uint32_t  TX_POINTER:6;
X    volatile const  uint32_t  TX_POINTER:6;
N    __I  uint32_t  TX_EMPTY:1;
X    volatile const  uint32_t  TX_EMPTY:1;
N    __I  uint32_t  TX_FULL:1;
X    volatile const  uint32_t  TX_FULL:1;
N    __IO uint32_t  TX_OVER_IF:1;
X    volatile uint32_t  TX_OVER_IF:1;
N    __I  uint32_t  RESERVE2:3;
X    volatile const  uint32_t  RESERVE2:3;
N    __I  uint32_t  TE_FLAG:1;                /* Transmitter empty flag */
X    volatile const  uint32_t  TE_FLAG:1;                 
N    __I  uint32_t  RESERVE3:3;
X    volatile const  uint32_t  RESERVE3:3;
N} UART_FSR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  RDA_IF:1;
X    volatile uint32_t  RDA_IF:1;
N    __IO uint32_t  THRE_IF:1;
X    volatile uint32_t  THRE_IF:1;
N    __IO uint32_t  RLS_IF:1;
X    volatile uint32_t  RLS_IF:1;
N    __IO uint32_t  MODEM_IF:1;
X    volatile uint32_t  MODEM_IF:1;
N    __IO uint32_t  TOUT_IF:1;
X    volatile uint32_t  TOUT_IF:1;
N    __IO uint32_t  BUF_ERR_IF:1;
X    volatile uint32_t  BUF_ERR_IF:1;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  LIN_RX_BREAK_IF:1;
X    volatile uint32_t  LIN_RX_BREAK_IF:1;
N
N    __IO uint32_t  RDA_INT:1;
X    volatile uint32_t  RDA_INT:1;
N    __IO uint32_t  THRE_INT:1;
X    volatile uint32_t  THRE_INT:1;
N    __IO uint32_t  RLS_INT:1;
X    volatile uint32_t  RLS_INT:1;
N    __IO uint32_t  MODEM_INT:1;
X    volatile uint32_t  MODEM_INT:1;
N    __IO uint32_t  TOUT_INT:1;
X    volatile uint32_t  TOUT_INT:1;
N    __IO uint32_t  BUF_ERR_INT:1;
X    volatile uint32_t  BUF_ERR_INT:1;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __IO uint32_t  LIN_RX_BREAK_INT:1;
X    volatile uint32_t  LIN_RX_BREAK_INT:1;
N
N    __I  uint32_t  RESERVE2:2;
X    volatile const  uint32_t  RESERVE2:2;
N    __IO uint32_t  HW_RLS_IF:1;
X    volatile uint32_t  HW_RLS_IF:1;
N    __IO uint32_t  HW_MODEM_IF:1;
X    volatile uint32_t  HW_MODEM_IF:1;
N    __IO uint32_t  HW_TOUT_IF:1;
X    volatile uint32_t  HW_TOUT_IF:1;
N    __IO uint32_t  HW_BUF_ERR_IF:1;
X    volatile uint32_t  HW_BUF_ERR_IF:1;
N    __IO uint32_t  RESERVE3:1;
X    volatile uint32_t  RESERVE3:1;
N    __IO uint32_t  HW_LIN_RX_BREAK_IF:1;
X    volatile uint32_t  HW_LIN_RX_BREAK_IF:1;
N
N    __I  uint32_t  RESERVE4:2;
X    volatile const  uint32_t  RESERVE4:2;
N    __IO uint32_t  HW_RLS_INT:1;
X    volatile uint32_t  HW_RLS_INT:1;
N    __IO uint32_t  HW_MODEM_INT:1;
X    volatile uint32_t  HW_MODEM_INT:1;
N    __IO uint32_t  HW_TOUT_INT:1;
X    volatile uint32_t  HW_TOUT_INT:1;
N    __IO uint32_t  HW_BUF_ERR_INT:1;
X    volatile uint32_t  HW_BUF_ERR_INT:1;
N    __IO uint32_t  RESERVE5:1;
X    volatile uint32_t  RESERVE5:1;
N    __IO uint32_t  HW_LIN_RX_BREAK_INT:1;
X    volatile uint32_t  HW_LIN_RX_BREAK_INT:1;
N} UART_ISR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TOIC:7;
X    volatile uint32_t  TOIC:7;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  DLY:8;
X    volatile uint32_t  DLY:8;
N    __I  uint32_t  RESERVE1:16;
X    volatile const  uint32_t  RESERVE1:16;
N
N} UART_TOR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  BRD:16;
X    volatile uint32_t  BRD:16;
N    __I  uint32_t  RESERVE0:8;
X    volatile const  uint32_t  RESERVE0:8;
N    __IO uint32_t  DIVIDER_X:4;
X    volatile uint32_t  DIVIDER_X:4;
N    __IO uint32_t  DIV_X_ONE:1;            
X    volatile uint32_t  DIV_X_ONE:1;            
N    __IO uint32_t  DIV_X_EN:1;            
X    volatile uint32_t  DIV_X_EN:1;            
N    __I  uint32_t  RESERVE1:2;
X    volatile const  uint32_t  RESERVE1:2;
N} UART_BAUD_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  TX_SELECT:1;
X    volatile uint32_t  TX_SELECT:1;
N    __I  uint32_t  RESERVE1:3;
X    volatile const  uint32_t  RESERVE1:3;
N    __IO uint32_t  INV_TX:1;            
X    volatile uint32_t  INV_TX:1;            
N    __IO uint32_t  INV_RX:1;
X    volatile uint32_t  INV_RX:1;
N    __I  uint32_t  RESERVE2:25;
X    volatile const  uint32_t  RESERVE2:25;
N} UART_IRCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  LIN_BKFL:4;
X    volatile uint32_t  LIN_BKFL:4;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  LIN_RX_EN:1;
X    volatile uint32_t  LIN_RX_EN:1;
N    __IO uint32_t  LIN_TX_EN:1;            
X    volatile uint32_t  LIN_TX_EN:1;            
N    __IO uint32_t  RS485_NMM:1;
X    volatile uint32_t  RS485_NMM:1;
N    __IO uint32_t  RS485_AAD:1;
X    volatile uint32_t  RS485_AAD:1;
N    __IO uint32_t  RS485_AUD:1;
X    volatile uint32_t  RS485_AUD:1;
N    __I  uint32_t  RESERVE1:4;
X    volatile const  uint32_t  RESERVE1:4;
N    __IO uint32_t  RS485_ADD_EN:1;
X    volatile uint32_t  RS485_ADD_EN:1;
N    __I  uint32_t  RESERVE2:8;
X    volatile const  uint32_t  RESERVE2:8;
N    __IO uint32_t  ADDR_MATCH:8;
X    volatile uint32_t  ADDR_MATCH:8;
N} UART_ALTCON_T;
N
N
N
Ntypedef struct
N{
N    __IO uint32_t  FUN_SEL:2;
X    volatile uint32_t  FUN_SEL:2;
N    __I  uint32_t  RESERVE0:30;
X    volatile const  uint32_t  RESERVE0:30;
N
N} UART_FUNSEL_T;
N
N
Ntypedef struct
N{
N    
N    union {
N        __IO uint32_t u32DATA;
X        volatile uint32_t u32DATA;
N        __IO uint32_t DATA;
X        volatile uint32_t DATA;
N    };
N    union {
N        __IO uint32_t u32IER;
X        volatile uint32_t u32IER;
N        struct {
N            __IO uint32_t  RDA_IEN:1;
X            volatile uint32_t  RDA_IEN:1;
N            __IO uint32_t  THRE_IEN:1;
X            volatile uint32_t  THRE_IEN:1;
N            __IO uint32_t  RLS_IEN:1;
X            volatile uint32_t  RLS_IEN:1;
N            __IO uint32_t  MODEM_IEN:1;
X            volatile uint32_t  MODEM_IEN:1;
N            __IO uint32_t  RTO_IEN:1;          
X            volatile uint32_t  RTO_IEN:1;          
N            __IO uint32_t  BUF_ERR_IEN:1;        
X            volatile uint32_t  BUF_ERR_IEN:1;        
N            __IO uint32_t  WAKE_EN:1;
X            volatile uint32_t  WAKE_EN:1;
N            __I  uint32_t  RESERVE0:1; 
X            volatile const  uint32_t  RESERVE0:1; 
N            __IO uint32_t  LIN_RX_BRK_IEN:1;
X            volatile uint32_t  LIN_RX_BRK_IEN:1;
N            __I  uint32_t  RESERVE1:2;
X            volatile const  uint32_t  RESERVE1:2;
N            __IO uint32_t  TIME_OUT_EN:1;
X            volatile uint32_t  TIME_OUT_EN:1;
N            __IO uint32_t  AUTO_RTS_EN:1;
X            volatile uint32_t  AUTO_RTS_EN:1;
N            __IO uint32_t  AUTO_CTS_EN:1;
X            volatile uint32_t  AUTO_CTS_EN:1;
N            __IO uint32_t  DMA_TX_EN:1;
X            volatile uint32_t  DMA_TX_EN:1;
N            __IO uint32_t  DMA_RX_EN:1;
X            volatile uint32_t  DMA_RX_EN:1;
N            __I  uint32_t  RESERVE2:16;
X            volatile const  uint32_t  RESERVE2:16;
N        } IER;
N    };
N
N    union {
N        __IO uint32_t u32FCR;
X        volatile uint32_t u32FCR;
N        struct {
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  RFR:1;
X            volatile uint32_t  RFR:1;
N            __IO uint32_t  TFR:1;
X            volatile uint32_t  TFR:1;
N            __IO uint32_t  RESERVE1:1;
X            volatile uint32_t  RESERVE1:1;
N            __IO uint32_t  RFITL:4;          
X            volatile uint32_t  RFITL:4;          
N            __IO uint32_t  RX_DIS:1; 
X            volatile uint32_t  RX_DIS:1; 
N            __I  uint32_t  RESERVE2 :7;
X            volatile const  uint32_t  RESERVE2 :7;
N            __IO uint32_t  RTS_TRI_LEV:4;
X            volatile uint32_t  RTS_TRI_LEV:4;
N            __I  uint32_t  RESERVE3 :4;
X            volatile const  uint32_t  RESERVE3 :4;
N        } FCR;
N    };
N
N    union {
N        __IO uint32_t u32LCR;
X        volatile uint32_t u32LCR;
N        struct {
N            __IO uint32_t  WLS:2;
X            volatile uint32_t  WLS:2;
N            __IO uint32_t  NSB:1;
X            volatile uint32_t  NSB:1;
N            __IO uint32_t  PBE:1;
X            volatile uint32_t  PBE:1;
N            __IO uint32_t  EPE:1;
X            volatile uint32_t  EPE:1;
N            __IO uint32_t  SPE:1;          
X            volatile uint32_t  SPE:1;          
N            __IO uint32_t  BCB:1; 
X            volatile uint32_t  BCB:1; 
N            __I  uint32_t  RESERVE :25;
X            volatile const  uint32_t  RESERVE :25;
N        } LCR;
N    };
N
N    union {
N        __IO uint32_t u32MCR;
X        volatile uint32_t u32MCR;
N        struct {
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  RTS:1;
X            volatile uint32_t  RTS:1;
N            __I  uint32_t  RESERVE1:7;
X            volatile const  uint32_t  RESERVE1:7;
N            __IO uint32_t  LEV_RTS:1;
X            volatile uint32_t  LEV_RTS:1;
N            __I  uint32_t  RESERVE2:3;          
X            volatile const  uint32_t  RESERVE2:3;          
N            __IO uint32_t  RTS_ST:1; 
X            volatile uint32_t  RTS_ST:1; 
N            __I  uint32_t  RESERVE3:18;
X            volatile const  uint32_t  RESERVE3:18;
N        } MCR;
N    };
N
N
N    union {
N        __IO uint32_t u32MSR;
X        volatile uint32_t u32MSR;
N        struct {
N            __IO uint32_t  DCTSF:1;
X            volatile uint32_t  DCTSF:1;
N            __I  uint32_t  RESERVE0:3;
X            volatile const  uint32_t  RESERVE0:3;
N            __IO uint32_t  CTS_ST:1;
X            volatile uint32_t  CTS_ST:1;
N            __I  uint32_t  RESERVE1:3;
X            volatile const  uint32_t  RESERVE1:3;
N            __IO uint32_t  LEV_CTS:1;          
X            volatile uint32_t  LEV_CTS:1;          
N            __I  uint32_t  RESERVE2:23;
X            volatile const  uint32_t  RESERVE2:23;
N        } MSR;
N    };
N
N
N    union {
N        __IO uint32_t u32FSR;
X        volatile uint32_t u32FSR;
N        struct {
N            __IO uint32_t  RX_OVER_IF:1;
X            volatile uint32_t  RX_OVER_IF:1;
N            __I  uint32_t  RESERVE0:2;
X            volatile const  uint32_t  RESERVE0:2;
N            __IO uint32_t  RS485_ADD_DETF:1;
X            volatile uint32_t  RS485_ADD_DETF:1;
N            __IO uint32_t  PEF:1;
X            volatile uint32_t  PEF:1;
N            __IO uint32_t  FEF:1;
X            volatile uint32_t  FEF:1;
N            __IO uint32_t  BIF:1;
X            volatile uint32_t  BIF:1;
N            __I  uint32_t  RESERVE1:1;
X            volatile const  uint32_t  RESERVE1:1;
N            __IO uint32_t  RX_POINTER:6;
X            volatile uint32_t  RX_POINTER:6;
N            __IO uint32_t  RX_EMPTY:1;
X            volatile uint32_t  RX_EMPTY:1;
N            __IO uint32_t  RX_FULL:1;
X            volatile uint32_t  RX_FULL:1;
N            __IO uint32_t  TX_POINTER:6;
X            volatile uint32_t  TX_POINTER:6;
N            __IO uint32_t  TX_EMPTY:1;
X            volatile uint32_t  TX_EMPTY:1;
N            __IO uint32_t  TX_FULL:1;
X            volatile uint32_t  TX_FULL:1;
N            __IO uint32_t  TX_OVER_IF:1;
X            volatile uint32_t  TX_OVER_IF:1;
N            __I  uint32_t  RESERVE2:3;
X            volatile const  uint32_t  RESERVE2:3;
N            __IO uint32_t  TE_FLAG:1;
X            volatile uint32_t  TE_FLAG:1;
N            __I  uint32_t  RESERVE3:3;
X            volatile const  uint32_t  RESERVE3:3;
N        } FSR;
N    };
N
N    union {
N        __IO uint32_t u32ISR;
X        volatile uint32_t u32ISR;
N        struct {
N            __IO uint32_t  RDA_IF:1;
X            volatile uint32_t  RDA_IF:1;
N            __IO uint32_t  THRE_IF:1;
X            volatile uint32_t  THRE_IF:1;
N            __IO uint32_t  RLS_IF:1;
X            volatile uint32_t  RLS_IF:1;
N            __IO uint32_t  MODEM_IF:1;
X            volatile uint32_t  MODEM_IF:1;
N            __IO uint32_t  TOUT_IF:1;
X            volatile uint32_t  TOUT_IF:1;
N            __IO uint32_t  BUF_ERR_IF:1;
X            volatile uint32_t  BUF_ERR_IF:1;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  LIN_RX_BREAK_IF:1;
X            volatile uint32_t  LIN_RX_BREAK_IF:1;
N            __IO uint32_t  RDA_INT:1;
X            volatile uint32_t  RDA_INT:1;
N            __IO uint32_t  THRE_INT:1;
X            volatile uint32_t  THRE_INT:1;
N            __IO uint32_t  RLS_INT:1;
X            volatile uint32_t  RLS_INT:1;
N            __IO uint32_t  MODEM_INT:1;
X            volatile uint32_t  MODEM_INT:1;
N            __IO uint32_t  TOUT_INT:1;
X            volatile uint32_t  TOUT_INT:1;
N            __IO uint32_t  BUF_ERR_INT:1;
X            volatile uint32_t  BUF_ERR_INT:1;
N            __I  uint32_t  RESERVE1:1;
X            volatile const  uint32_t  RESERVE1:1;
N            __IO uint32_t  LIN_RX_BREAK_INT:1;
X            volatile uint32_t  LIN_RX_BREAK_INT:1;
N            __I  uint32_t  RESERVE2:2;
X            volatile const  uint32_t  RESERVE2:2;
N            __IO uint32_t  HW_RLS_IF:1;
X            volatile uint32_t  HW_RLS_IF:1;
N            __IO uint32_t  HW_MODEM_IF:1;
X            volatile uint32_t  HW_MODEM_IF:1;
N            __IO uint32_t  HW_TOUT_IF:1;
X            volatile uint32_t  HW_TOUT_IF:1;
N            __IO uint32_t  HW_BUF_ERR_IF:1;
X            volatile uint32_t  HW_BUF_ERR_IF:1;
N            __I  uint32_t  RESERVE3:1;
X            volatile const  uint32_t  RESERVE3:1;
N            __IO uint32_t  HW_LIN_RX_BREAK_IF:1;
X            volatile uint32_t  HW_LIN_RX_BREAK_IF:1;
N            __I  uint32_t  RESERVE4:2;
X            volatile const  uint32_t  RESERVE4:2;
N            __IO uint32_t  HW_RLS_INT:1;
X            volatile uint32_t  HW_RLS_INT:1;
N            __IO uint32_t  HW_MODEM_INT:1;
X            volatile uint32_t  HW_MODEM_INT:1;
N            __IO uint32_t  HW_TOUT_INT:1;
X            volatile uint32_t  HW_TOUT_INT:1;
N            __IO uint32_t  HW_BUF_ERR_INT:1;
X            volatile uint32_t  HW_BUF_ERR_INT:1;
N            __I  uint32_t  RESERVE5:1;
X            volatile const  uint32_t  RESERVE5:1;
N            __IO uint32_t  HW_LIN_RX_BREAK_INT:1;
X            volatile uint32_t  HW_LIN_RX_BREAK_INT:1;
N
N        } ISR;
N    };
N
N    union {
N        __IO uint32_t u32TOR;
X        volatile uint32_t u32TOR;
N        struct {
N            __IO uint32_t  TOIC:8;
X            volatile uint32_t  TOIC:8;
N            __IO uint32_t  DLY:8;
X            volatile uint32_t  DLY:8;
N            __I  uint32_t  RESERVE1:16;
X            volatile const  uint32_t  RESERVE1:16;
N        } TOR;
N    };
N
N    union {
N        __IO uint32_t u32BAUD;
X        volatile uint32_t u32BAUD;
N        struct {
N            __IO uint32_t  BRD:16;
X            volatile uint32_t  BRD:16;
N            __I  uint32_t  RESERVE0:8;
X            volatile const  uint32_t  RESERVE0:8;
N            __IO uint32_t  DIVIDER_X:4;
X            volatile uint32_t  DIVIDER_X:4;
N            __IO uint32_t  DIV_X_ONE:1;
X            volatile uint32_t  DIV_X_ONE:1;
N            __IO uint32_t  DIV_X_EN:1;
X            volatile uint32_t  DIV_X_EN:1;
N            __I  uint32_t  RESERVE1:2;
X            volatile const  uint32_t  RESERVE1:2;
N        } BAUD;
N    };
N
N    union {
N        __IO uint32_t u32IRCR;
X        volatile uint32_t u32IRCR;
N        struct {
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  TX_SELECT:1;
X            volatile uint32_t  TX_SELECT:1;
N            __I  uint32_t  RESERVE1:3;
X            volatile const  uint32_t  RESERVE1:3;
N            __IO uint32_t  INV_TX:1;
X            volatile uint32_t  INV_TX:1;
N            __IO uint32_t  INV_RX:1;
X            volatile uint32_t  INV_RX:1;
N            __I  uint32_t  RESERVE2:25;
X            volatile const  uint32_t  RESERVE2:25;
N        } IRCR;
N    };
N
N    union {
N        __IO uint32_t u32ALTCON;
X        volatile uint32_t u32ALTCON;
N        struct {
N            __IO uint32_t  LIN_BKFL:4;
X            volatile uint32_t  LIN_BKFL:4;
N            __I  uint32_t  RESERVE0:2;
X            volatile const  uint32_t  RESERVE0:2;
N            __IO uint32_t  LIN_RX_EN:1;
X            volatile uint32_t  LIN_RX_EN:1;
N            __IO uint32_t  LIN_TX_EN:1;
X            volatile uint32_t  LIN_TX_EN:1;
N            __IO uint32_t  RS485_NMM:1;
X            volatile uint32_t  RS485_NMM:1;
N            __IO uint32_t  RS485_AAD:1;
X            volatile uint32_t  RS485_AAD:1;
N            __IO uint32_t  RS485_AUD:1;
X            volatile uint32_t  RS485_AUD:1;
N            __I  uint32_t  RESERVE1:4;
X            volatile const  uint32_t  RESERVE1:4;
N            __IO uint32_t  RS485_ADD_EN :1;
X            volatile uint32_t  RS485_ADD_EN :1;
N            __I  uint32_t  RESERVE2 :8;
X            volatile const  uint32_t  RESERVE2 :8;
N            __IO uint32_t  ADDR_MATCH :8;
X            volatile uint32_t  ADDR_MATCH :8;
N        } ALTCON;
N    };
N
N
N    union {
N        __IO uint32_t u32FUNSEL;
X        volatile uint32_t u32FUNSEL;
N        struct {
N            __IO uint32_t  FUN_SEL:2;
X            volatile uint32_t  FUN_SEL:2;
N            __I  uint32_t  RESERVE0:30;
X            volatile const  uint32_t  RESERVE0:30;
N        } FUNSEL;
N    };
N} UART_T;
N
N
N
N
N/* UART THR Bit Field Definitions */
N#define UART_THR_THR_Pos         0
N#define UART_THR_THR_Msk        (0xFul << UART_THR_THR_Pos)
N
N/* UART RBR Bit Field Definitions */
N#define UART_RBR_RBR_Pos         0
N#define UART_RBR_RBR_Msk        (0xFul << UART_RBR_RBR_Pos)
N
N/* UART IER Bit Field Definitions */
N#define UART_IER_DMA_RX_EN_Pos      15
N#define UART_IER_DMA_RX_EN_Msk      (1ul << UART_IER_DMA_RX_EN_Pos)
N
N#define UART_IER_DMA_TX_EN_Pos      14
N#define UART_IER_DMA_TX_EN_Msk      (1ul << UART_IER_DMA_TX_EN_Pos)
N
N#define UART_IER_AUTO_CTS_EN_Pos    13
N#define UART_IER_AUTO_CTS_EN_Msk    (1ul << UART_IER_AUTO_CTS_EN_Pos)
N
N#define UART_IER_AUTO_RTS_EN_Pos    12
N#define UART_IER_AUTO_RTS_EN_Msk    (1ul << UART_IER_AUTO_RTS_EN_Pos)
N
N#define UART_IER_TIME_OUT_EN_Pos    11
N#define UART_IER_TIME_OUT_EN_Msk    (1ul << UART_IER_TIME_OUT_EN_Pos)
N
N#define UART_IER_LIN_RX_BRK_IEN_Pos 8
N#define UART_IER_LIN_RX_BRK_IEN_Msk (1ul << UART_IER_LIN_RX_BRK_IEN_Pos)
N
N#define UART_IER_WAKE_EN_Pos        6
N#define UART_IER_WAKE_EN_Msk        (1ul << UART_IER_WAKE_EN_Pos)
N
N#define UART_IER_BUF_ERR_IEN_Pos    5
N#define UART_IER_BUF_ERR_IEN_Msk    (1ul << UART_IER_BUF_ERR_IEN_Pos)
N
N#define UART_IER_RTO_IEN_Pos        4
N#define UART_IER_RTO_IEN_Msk        (1ul << UART_IER_RTO_IEN_Pos)
N
N#define UART_IER_MODEM_IEN_Pos      3
N#define UART_IER_MODEM_IEN_Msk      (1ul << UART_IER_MODEM_IEN_Pos)
N
N#define UART_IER_RLS_IEN_Pos        2
N#define UART_IER_RLS_IEN_Msk        (1ul << UART_IER_RLS_IENN_Pos)
N
N#define UART_IER_THRE_IEN_Pos       1
N#define UART_IER_THRE_IEN_Msk       (1ul << UART_IER_THRE_IEN_Pos)
N
N#define UART_IER_RDA_IEN_Pos        0
N#define UART_IER_RDA_IEN_Msk        (1ul << UART_IER_RDA_IEN_Pos)
N
N/* UART FCR Bit Field Definitions */
N#define UART_FCR_RTS_TRI_LEV_Pos    16
N#define UART_FCR_RTS_TRI_LEV_Msk    (0xFul << UART_FCR_RTS_TRI_LEV_Pos)
N
N#define UART_FCR_RX_DIS_Pos         8
N#define UART_FCR_RX_DIS_Msk         (1ul << UART_FCR_RX_DIS_Pos)
N
N#define UART_FCR_RFITL_Pos          4
N#define UART_FCR_RFITL_Msk          (0xFul << UART_FCR_RFITL_Pos)
N
N#define UART_FCR_TFR_Pos            2
N#define UART_FCR_TFR_Msk            (1ul << UART_FCR_TFR_Pos)
N
N#define UART_FCR_RFR_Pos            1
N#define UART_FCR_RFR_Msk            (1ul << UART_FCR_RFR_Pos)
N
N/* UART LCR Bit Field Definitions */
N#define UART_LCR_BCB_Pos            6
N#define UART_LCR_BCB_Msk            (1ul << UART_LCR_BCB_Pos)
N
N#define UART_LCR_SPE_Pos            5
N#define UART_LCR_SPE_Msk            (1ul << UART_LCR_SPE_Pos)
N
N#define UART_LCR_EPE_Pos            4
N#define UART_LCR_EPE_Msk            (1ul << UART_LCR_EPE_Pos)
N
N#define UART_LCR_PBE_Pos            3
N#define UART_LCR_PBE_Msk            (1ul << UART_LCR_PBE_Pos)
N
N#define UART_LCR_NSB_Pos            2
N#define UART_LCR_NSB_Msk            (1ul << UART_LCR_NSB_Pos)
N
N#define UART_LCR_WLS_Pos            0
N#define UART_LCR_WLS_Msk            (0x3ul << UART_LCR_WLS_Pos)
N
N/* UART MCR Bit Field Definitions */
N#define UART_MCR_RTS_ST_Pos         13
N#define UART_MCR_RTS_ST_Msk         (1ul << UART_MCR_RTS_ST_Pos)
N
N#define UART_MCR_LEV_RTS_Pos        9
N#define UART_MCR_LEV_RTS_Msk        (1ul << UART_MCR_LEV_RTS_Pos)
N
N#define UART_MCR_RTS_Pos            1
N#define UART_MCR_RTS_Msk            (1ul << UART_MCR_RTS_Pos)
N
N
N/* UART MSR Bit Field Definitions */
N#define UART_MSR_LEV_CTS_Pos        8
N#define UART_MSR_LEV_CTS_Msk        (1ul << UART_MSR_LEV_CTS_Pos)
N
N#define UART_MSR_CTS_ST_Pos         4
N#define UART_MSR_CTS_ST_Msk         (1ul << UART_MSR_CTS_ST_Pos)
N
N#define UART_MSR_DCTSF_Pos          0
N#define UART_MSR_DCTSF_Msk          (1ul << UART_MSR_DCTSF_Pos)
N
N
N/* UART FSR Bit Field Definitions */
N#define UART_FSR_TE_FLAG_Pos        28
N#define UART_FSR_TE_FLAG_Msk        (1ul << UART_FSR_TE_FLAG_Pos)
N
N#define UART_FSR_TX_OVER_IF_Pos     24
N#define UART_FSR_TX_OVER_IF_Msk     (1ul << UART_FSR_TX_OVER_IF_Pos)
N
N#define UART_FSR_TX_FULL_Pos        23
N#define UART_FSR_TX_FULL_Msk        (1ul << UART_FSR_TX_FULL_Pos)
N
N#define UART_FSR_TX_EMPTY_Pos       22
N#define UART_FSR_TX_EMPTY_Msk       (1ul << UART_FSR_TX_EMPTY_Pos)
N
N#define UART_FSR_TX_POINTER_Pos     16
N#define UART_FSR_TX_POINTER_Msk     (0x3Ful << UART_FSR_TX_POINTER_Pos)
N
N#define UART_FSR_RX_FULL_Pos        15
N#define UART_FSR_RX_FULL_Msk        (1ul << UART_FSR_RX_FULL_Pos)
N
N#define UART_FSR_RX_EMPTY_Pos       14
N#define UART_FSR_RX_EMPTY_Msk       (1ul << UART_FSR_RX_EMPTY_Pos)
N
N#define UART_FSR_RX_POINTER_Pos     8
N#define UART_FSR_RX_POINTER_Msk     (0x3Ful << UART_FSR_RX_POINTER_Pos)
N
N#define UART_FSR_BIF_Pos            6
N#define UART_FSR_BIF_Msk            (1ul << UART_FSR_BIF_Pos)
N
N#define UART_FSR_FEF_Pos            5
N#define UART_FSR_FEF_Msk            (1ul << UART_FSR_FEF_Pos)
N
N#define UART_FSR_PEF_Pos            4
N#define UART_FSR_PEF_Msk            (1ul << UART_FSR_PEF_Pos)
N
N#define UART_FSR_RS485_ADD_DETF_Pos 3
N#define UART_FSR_RS485_ADD_DETF_Msk (1ul << UART_FSR_RS485_ADD_DETF_Pos)
N
N#define UART_FSR_RX_OVER_IF_Pos     0
N#define UART_FSR_RX_OVER_IF_Msk     (1ul << UART_FSR_RX_OVER_IF_Pos)
N
N/* UART ISR Bit Field Definitions */
N#define UART_ISR_HW_LIN_RX_BREAK_INT_Pos   31
N#define UART_ISR_HW_LIN_RX_BREAK_INT_Msk   (1ul << UART_ISR_HW_LIN_RX_BREAK_INT_Pos)
N
N#define UART_ISR_HW_BUF_ERR_INT_Pos        29
N#define UART_ISR_HW_BUF_ERR_INT_Msk        (1ul << UART_ISR_HW_BUF_ERR_INT_Pos)
N
N#define UART_ISR_HW_TOUT_INT_Pos           28
N#define UART_ISR_HW_TOUT_INT_Msk           (1ul << UART_ISR_HW_TOUT_INT_Pos)
N
N#define UART_ISR_HW_MODEM_INT_Pos          27
N#define UART_ISR_HW_MODEM_INT_Msk          (1ul << UART_ISR_HW_MODEM_INT_Pos)
N
N#define UART_ISR_HW_RLS_INT_Pos            26
N#define UART_ISR_HW_RLS_INT_Msk            (1ul << UART_ISR_HW_RLS_INT_Pos)
N
N#define UART_ISR_HW_LIN_RX_BREAK_IF_Pos    23
N#define UART_ISR_HW_LIN_RX_BREAK_IF_Msk    (1ul << UART_ISR_HW_LIN_RX_BREAK_IF_Pos)
N
N#define UART_ISR_HW_BUF_ERR_IF_Pos         21
N#define UART_ISR_HW_BUF_ERR_IF_Msk         (1ul << UART_ISR_HW_BUF_ERR_IF_Pos)
N
N#define UART_ISR_HW_TOUT_IF_Pos            20
N#define UART_ISR_HW_TOUT_IF_Msk            (1ul << UART_ISR_HW_TOUT_IFF_Pos)
N
N#define UART_ISR_HW_MODEM_IF_Pos           19
N#define UART_ISR_HW_MODEM_IF_Msk           (1ul << UART_ISR_HW_MODEM_IF_Pos)
N
N#define UART_ISR_HW_RLS_IF_Pos             18
N#define UART_ISR_HW_RLS_IF_Msk             (1ul << UART_ISR_HW_RLS_IF_Pos)
N
N#define UART_ISR_LIN_RX_BREAK_INT_Pos      15
N#define UART_ISR_LIN_RX_BREAK_INT_Msk      (1ul << UART_ISR_LIN_RX_BREAK_INT_Pos)
N
N#define UART_ISR_BUF_ERR_INT_Pos           13
N#define UART_ISR_BUF_ERR_INT_Msk           (1ul << UART_ISR_BUF_ERR_INT_Pos)
N
N#define UART_ISR_TOUT_INT_Pos              12
N#define UART_ISR_TOUT_INT_Msk              (1ul << UART_ISR_TOUT_INT_Pos)
N
N#define UART_ISR_MODEM_INT_Pos             11    
N#define UART_ISR_MODEM_INT_Msk             (1ul << UART_ISR_MODEM_INT_Pos)
N
N#define UART_ISR_RLS_INT_Pos               10    
N#define UART_ISR_RLS_INT_Msk               (1ul << UART_ISR_RLS_INT_Pos)
N
N#define UART_ISR_THRE_INT_Pos              9    
N#define UART_ISR_THRE_INT_Msk              (1ul << UART_ISR_THRE_INT_Pos)
N
N#define UART_ISR_RDA_INT_Pos               8    
N#define UART_ISR_RDA_INT_Msk               (1ul << UART_ISR_RDA_INT_Pos)
N
N#define UART_ISR_LIN_RX_BREAK_IF_Pos       7    
N#define UART_ISR_LIN_RX_BREAK_IF_Msk       (1ul << UART_ISR_LIN_RX_BREAK_IF_Pos)
N
N#define UART_ISR_BUF_ERR_IF_Pos            5    
N#define UART_ISR_BUF_ERR_IF_Msk            (1ul << UART_ISR_BUF_ERR_IF_Pos)
N
N#define UART_ISR_TOUT_IF_Pos               4    
N#define UART_ISR_TOUT_IF_Msk               (1ul << UART_ISR_TOUT_IF_Pos)
N
N#define UART_ISR_MODEM_IF_Pos              3    
N#define UART_ISR_MODEM_IF_Msk              (1ul << UART_ISR_MODEM_IF_Pos)
N
N#define UART_ISR_RLS_IF_Pos                2    
N#define UART_ISR_RLS_IF_Msk                (1ul << UART_ISR_RLS_IF_Pos)
N
N#define UART_ISR_THRE_IF_Pos               1    
N#define UART_ISR_THRE_IF_Msk               (1ul << UART_ISR_THRE_IF_Pos)
N
N#define UART_ISR_RDA_IF_Pos                0    
N#define UART_ISR_RDA_IF_Msk                (1ul << UART_ISR_RDA_IF_Pos)
N
N
N/* UART TOR Bit Field Definitions */
N#define UART_TOR_DLY_Pos          8
N#define UART_TOR_DLY_Msk          (0xFFul << UART_TOR_DLY_Pos)
N
N#define UART_TOR_TOIC_Pos         0
N#define UART_TOR_TOIC_Msk         (0xFFul << UART_TOR_TOIC_Pos)
N
N/* UART BAUD Bit Field Definitions */
N#define UART_BAUD_DIV_X_EN_Pos    29
N#define UART_BAUD_DIV_X_EN_Msk    (1ul << UART_BAUD_DIV_X_EN_Pos)
N
N#define UART_BAUD_DIV_X_ONE_Pos   28
N#define UART_BAUD_DIV_X_ONE_Msk   (1ul << UART_BAUD_DIV_X_ONE_Pos)
N
N#define UART_BAUD_DIVIDER_X_Pos   24
N#define UART_BAUD_DIVIDER_X_Msk   (0xFul << UART_BAUD_DIVIDER_X_Pos)
N
N#define UART_BAUD_BRD_Pos         0
N#define UART_BAUD_BRD_Msk         (0xFFul << UART_BAUD_BRD_Pos)
N
N/* UART IRCR Bit Field Definitions */
N#define UART_IRCR_INV_RX_Pos      6
N#define UART_IRCR_INV_RX_Msk     (1ul << UART_IRCR_INV_RX_Pos)
N
N#define UART_IRCR_INV_TX_Pos      5
N#define UART_IRCR_INV_TX_Msk     (1ul << UART_IRCR_INV_TX_Pos)
N
N#define UART_IRCR_TX_SELECT_Pos   1
N#define UART_IRCR_TX_SELECT_Msk   (1ul << UART_IRCR_TX_SELECT_Pos)
N
N/* UART ALT_CSR Bit Field Definitions */
N#define UART_ALT_CSR_ADDR_MATCH_Pos      24
N#define UART_ALT_CSR_ADDR_MATCH_Msk     (0xFFul << UART_ALT_CSR_ADDR_MATCH_Pos)
N
N#define UART_ALT_CSR_RS485_ADD_EN_Pos   15
N#define UART_ALT_CSR_RS485_ADD_EN_Msk   (1ul << UART_ALT_CSR_RS485_ADD_EN_Pos)
N
N#define UART_ALT_CSR_RS485_AUD_Pos      10
N#define UART_ALT_CSR_RS485_AUD_Msk      (1ul << UART_ALT_CSR_RS485_AUD_Pos)
N
N#define UART_ALT_CSR_RS485_AAD_Pos      9
N#define UART_ALT_CSR_RS485_AAD_Msk      (1ul << UART_ALT_CSR_RS485_AAD_Pos)
N
N#define UART_ALT_CSR_RS485_NMM_Pos      8
N#define UART_ALT_CSR_RS485_NMM_Msk      (1ul << UART_ALT_CSR_RS485_NMM_Pos)
N
N#define UART_ALT_CSR_LIN_TX_EN_Pos      7
N#define UART_ALT_CSR_LIN_TX_EN_Msk      (1ul << UART_ALT_CSR_LIN_TX_EN_Pos)
N
N#define UART_ALT_CSR_LIN_RX_EN_Pos      6
N#define UART_ALT_CSR_LIN_RX_EN_Msk      (1ul << UART_ALT_CSR_LIN_RX_EN_Pos)
N
N#define UART_ALT_CSR_LIN_BKFL_Pos       0
N#define UART_ALT_CSR_LIN_BKFL_Msk       (0xFul << UART_ALT_CSR_LIN_BKFL_Pos)
N
N/* UART FUN_SEL Bit Field Definitions */
N#define UART_FUN_SEL_FUN_SEL_Pos        0
N#define UART_FUN_SEL_FUN_SEL_Msk       (0x3ul << UART_FUN_SEL_FUN_SEL_Pos)
N
N
N/*----------------------------- Timer Controller -----------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  PRESCALE:8;
X    volatile uint32_t  PRESCALE:8;
N    __I  uint32_t  RESERVE0:8;
X    volatile const  uint32_t  RESERVE0:8;
N    __IO uint32_t  TDR_EN:1;
X    volatile uint32_t  TDR_EN:1;
N    __I  uint32_t  RESERVE1:7;
X    volatile const  uint32_t  RESERVE1:7;
N    __IO uint32_t  CTB:1;          
X    volatile uint32_t  CTB:1;          
N    __IO uint32_t  CACT:1;        
X    volatile uint32_t  CACT:1;        
N    __IO uint32_t  CRST:1;
X    volatile uint32_t  CRST:1;
N    __IO uint32_t  MODE:2;
X    volatile uint32_t  MODE:2;
N    __IO uint32_t  IE:1;
X    volatile uint32_t  IE:1;
N    __IO uint32_t  CEN:1;
X    volatile uint32_t  CEN:1;
N    __IO uint32_t  DBGACK_TMR:1;
X    volatile uint32_t  DBGACK_TMR:1;
N} TIMER_TCSR_T;
N
Ntypedef __IO uint32_t TIMER_TCMPR_T;
Xtypedef volatile uint32_t TIMER_TCMPR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TIF:1;
X    volatile uint32_t  TIF:1;
N    __I  uint32_t  RESERVE:31;
X    volatile const  uint32_t  RESERVE:31;
N} TIMER_TISR_T;
N
Ntypedef __IO uint32_t TIMER_TDR_T;
Xtypedef volatile uint32_t TIMER_TDR_T;
N
Ntypedef __IO uint32_t TIMER_TCAP_T;
Xtypedef volatile uint32_t TIMER_TCAP_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TX_PHASE:1;
X    volatile uint32_t  TX_PHASE:1;
N    __IO uint32_t  TEX_EDGE:2;
X    volatile uint32_t  TEX_EDGE:2;
N    __IO uint32_t  TEXEN:1;
X    volatile uint32_t  TEXEN:1;
N    __IO uint32_t  RSTCAPSEL:1;
X    volatile uint32_t  RSTCAPSEL:1;
N    __IO uint32_t  TEXIEN:1;
X    volatile uint32_t  TEXIEN:1;
N    __IO uint32_t  TEXDB:1;
X    volatile uint32_t  TEXDB:1;
N    __IO uint32_t  TCDB:1;
X    volatile uint32_t  TCDB:1;
N    __I  uint32_t  RESERVE:24;
X    volatile const  uint32_t  RESERVE:24;
N} TIMER_TEXCON_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TEXIF:1;
X    volatile uint32_t  TEXIF:1;
N    __I  uint32_t  RESERVE:31;
X    volatile const  uint32_t  RESERVE:31;
N} TIMER_TEXISR;
N
Ntypedef struct
N{
N    union {
N        __IO uint32_t u32TCSR;
X        volatile uint32_t u32TCSR;
N        struct {
N            __IO uint32_t  PRESCALE:8;
X            volatile uint32_t  PRESCALE:8;
N            __I  uint32_t  RESERVE0:8;
X            volatile const  uint32_t  RESERVE0:8;
N            __IO uint32_t  TDR_EN:1;
X            volatile uint32_t  TDR_EN:1;
N            __I  uint32_t  RESERVE1:7;
X            volatile const  uint32_t  RESERVE1:7;
N            __IO uint32_t  CTB:1;          
X            volatile uint32_t  CTB:1;          
N            __IO uint32_t  CACT:1;        
X            volatile uint32_t  CACT:1;        
N            __IO uint32_t  CRST:1;
X            volatile uint32_t  CRST:1;
N            __IO uint32_t  MODE:2;
X            volatile uint32_t  MODE:2;
N            __IO uint32_t  IE:1;
X            volatile uint32_t  IE:1;
N            __IO uint32_t  CEN:1;
X            volatile uint32_t  CEN:1;
N            __IO uint32_t  DBGACK_TMR:1;
X            volatile uint32_t  DBGACK_TMR:1;
N        } TCSR;
N    };
N
N    union {
N        __IO uint32_t u32TCMPR;
X        volatile uint32_t u32TCMPR;
N        __IO uint32_t TCMPR;
X        volatile uint32_t TCMPR;
N    };
N
N    union {
N        __IO uint32_t u32TISR;
X        volatile uint32_t u32TISR;
N        struct {
N            __IO uint32_t  TIF:1;
X            volatile uint32_t  TIF:1;
N            __I  uint32_t  RESERVE:31;
X            volatile const  uint32_t  RESERVE:31;
N        } TISR;
N    };
N
N    union {
N        __IO uint32_t u32TDR;
X        volatile uint32_t u32TDR;
N        __IO uint32_t TDR;
X        volatile uint32_t TDR;
N    };
N
N    union {
N        __IO uint32_t u32TCAP;
X        volatile uint32_t u32TCAP;
N        __IO uint32_t TCAP;
X        volatile uint32_t TCAP;
N    };
N
N    union {
N        __IO uint32_t u32TEXCON;
X        volatile uint32_t u32TEXCON;
N        struct {
N            __IO uint32_t  TX_PHASE:1;
X            volatile uint32_t  TX_PHASE:1;
N            __IO uint32_t  TEX_EDGE:2;
X            volatile uint32_t  TEX_EDGE:2;
N            __IO uint32_t  TEXEN:1;
X            volatile uint32_t  TEXEN:1;
N            __IO uint32_t  RSTCAPSEL:1;
X            volatile uint32_t  RSTCAPSEL:1;
N            __IO uint32_t  TEXIEN:1;
X            volatile uint32_t  TEXIEN:1;
N            __IO uint32_t  TEXDB:1;
X            volatile uint32_t  TEXDB:1;
N            __IO uint32_t  TCDB:1;
X            volatile uint32_t  TCDB:1;
N            __I  uint32_t  RESERVE:24;
X            volatile const  uint32_t  RESERVE:24;
N        } TEXCON;
N    };
N
N    union {
N        __IO uint32_t u32TEXISR;
X        volatile uint32_t u32TEXISR;
N        struct {
N            __IO uint32_t  TEXIF:1;
X            volatile uint32_t  TEXIF:1;
N            __I  uint32_t  RESERVE:31;
X            volatile const  uint32_t  RESERVE:31;
N        } TEXISR;
N    };
N} TIMER_T;
N
N/* Timer TCSR Bit Field Definitions */
N#define TIMER_TCSR_DBGACK_TMR_Pos   31
N#define TIMER_TCSR_DBGACK_TMR_Msk   (1ul << TIMER_TCSR_DBGACK_TMR_Pos)
N
N#define TIMER_TCSR_CEN_Pos          30
N#define TIMER_TCSR_CEN_Msk          (1ul << TIMER_TCSR_CEN_Pos)
N
N#define TIMER_TCSR_IE_Pos           29
N#define TIMER_TCSR_IE_Msk           (1ul << TIMER_TCSR_IE_Pos)
N
N#define TIMER_TCSR_MODE_Pos         27
N#define TIMER_TCSR_MODE_Msk         (0x3ul << TIMER_TCSR_MODE_Pos)
N
N#define TIMER_TCSR_CRST_Pos         26
N#define TIMER_TCSR_CRST_Msk         (1ul << TIMER_TCSR_CRST_Pos)
N
N#define TIMER_TCSR_CACT_Pos         25
N#define TIMER_TCSR_CACT_Msk         (1ul << TIMER_TCSR_CACT_Pos)
N
N#define TIMER_TCSR_CTB_Pos          24
N#define TIMER_TCSR_CTB_Msk          (1ul << TIMER_TCSR_CTB_Pos)
N
N#define TIMER_TCSR_TDR_EN_Pos       16
N#define TIMER_TCSR_TDR_EN_Msk       (1ul << TIMER_TCSR_TDR_EN_Pos)
N
N#define TIMER_TCSR_PRESCALE_Pos     0
N#define TIMER_TCSR_PRESCALE_Msk     (0xFFul << TIMER_TCSR_PRESCALE_Pos)
N
N/* Timer TCMPR Bit Field Definitions */
N#define TIMER_TCMP_Pos              0
N#define TIMER_TCMP_Msk              (0xFFFFFFul << TIMER_TCMP_Pos)
N
N/* Timer TISR Bit Field Definitions */
N#define TIMER_TISR_TIF_Pos          0
N#define TIMER_TISR_TIF_Msk          (1ul << TIMER_TISR_TIF_Pos)
N
N/* Timer TDR Bit Field Definitions */
N#define TIMER_TDR_Pos               0
N#define TIMER_TDR_Msk               (0xFFFFFFul << TIMER_TDR_Pos)
N
N/* Timer TCAP Bit Field Definitions */
N#define TIMER_TCAP_Pos              0
N#define TIMER_TCAP_Msk              (0xFFFFFFul << TIMER_TCAP_Pos)
N
N/* Timer TEXCON Bit Field Definitions */
N#define TIMER_TEXCON_TCDB_Pos       7
N#define TIMER_TEXCON_TCDB_Msk       (1ul << TIMER_TEXCON_TCDB_Pos)
N
N#define TIMER_TEXCON_TEXDB_Pos      6
N#define TIMER_TEXCON_TEXDB_Msk      (1ul << TIMER_TEXCON_TEXDB_Pos)
N
N#define TIMER_TEXCON_TEXIEN_Pos     5
N#define TIMER_TEXCON_TEXIEN_Msk     (1ul << TIMER_TEXCON_TEXIEN_Pos)
N
N#define TIMER_TEXCON_RSTCAPSEL_Pos  4
N#define TIMER_TEXCON_RSTCAPSEL_Msk  (1ul << TIMER_TEXCON_RSTCAPSEL_Pos)
N
N#define TIMER_TEXCON_TEXEN_Pos      3
N#define TIMER_TEXCON_TEXEN_Msk      (1ul << TIMER_TEXCON_TEXEN_Pos)
N
N#define TIMER_TEXCON_TEX_EDGE_Pos   1
N#define TIMER_TEXCON_TEX_EDGE_Msk   (0x3ul << TIMER_TEXCON_TEX_EDGE_Pos)
N
N#define TIMER_TEXCON_TX_PHASE_Pos   0
N#define TIMER_TEXCON_TX_PHASE_Msk   (1ul << TIMER_TEXCON_TX_PHASE_Pos)
N
N/* Timer TEXISR Bit Field Definitions */
N#define TIMER_TEXISR_TEXIF_Pos      0
N#define TIMER_TEXISR_TEXIF_Msk      (1ul << TIMER_TEXISR_TEXIF_Pos)
N
N
N/*----------------------------- WDT Controller -----------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  WTR:1;
X    volatile uint32_t  WTR:1;
N    __IO uint32_t  WTRE:1;
X    volatile uint32_t  WTRE:1;
N    __IO uint32_t  WTRF:1;
X    volatile uint32_t  WTRF:1;
N    __IO uint32_t  WTIF:1;
X    volatile uint32_t  WTIF:1;
N    __IO uint32_t  WTWKE:1;
X    volatile uint32_t  WTWKE:1;
N    __IO uint32_t  WTWKF:1;
X    volatile uint32_t  WTWKF:1;
N    __IO uint32_t  WTIE:1;
X    volatile uint32_t  WTIE:1;
N    __IO uint32_t  WTE:1;
X    volatile uint32_t  WTE:1;
N    __IO uint32_t  WTIS:3;
X    volatile uint32_t  WTIS:3;
N    __I  uint32_t  RESERVE1:20;
X    volatile const  uint32_t  RESERVE1:20;
N    __IO uint32_t  DBGACK_WDT:1;
X    volatile uint32_t  DBGACK_WDT:1;
N} WDT_WTCR_T;
N
Ntypedef struct
N{
N    union {
N        __IO uint32_t u32WTCR;
X        volatile uint32_t u32WTCR;
N        struct {
N            __IO uint32_t  WTR:1;
X            volatile uint32_t  WTR:1;
N            __IO uint32_t  WTRE:1;
X            volatile uint32_t  WTRE:1;
N            __IO uint32_t  WTRF:1;
X            volatile uint32_t  WTRF:1;
N            __IO uint32_t  WTIF:1;
X            volatile uint32_t  WTIF:1;
N            __IO uint32_t  WTWKE:1;
X            volatile uint32_t  WTWKE:1;
N            __IO uint32_t  WTWKF:1;
X            volatile uint32_t  WTWKF:1;
N            __IO uint32_t  WTIE:1;
X            volatile uint32_t  WTIE:1;
N            __IO uint32_t  WTE:1;
X            volatile uint32_t  WTE:1;
N            __IO uint32_t  WTIS:3;
X            volatile uint32_t  WTIS:3;
N            __I  uint32_t  RESERVE1:20;
X            volatile const  uint32_t  RESERVE1:20;
N            __IO uint32_t  DBGACK_WDT:1;
X            volatile uint32_t  DBGACK_WDT:1;
N        } WTCR;
N    };
N} WDT_T;
N
N/* WDT WTCR Bit Field Definitions */
N#define WDT_WTCR_DBGACK_WDT_Pos 31
N#define WDT_WTCR_DBGACK_WDT_Msk (1ul << WDT_WTCR_DBGACK_WDT_Pos)
N
N#define WDT_WTCR_WTIS_Pos       8  
N#define WDT_WTCR_WTIS_Msk       (0x3ul << WDT_WTCR_WTIS_Pos)
N
N#define WDT_WTCR_WTE_Pos        7  
N#define WDT_WTCR_WTE_Msk        (1ul << WDT_WTCR_WTE_Pos)
N
N#define WDT_WTCR_WTIE_Pos       6  
N#define WDT_WTCR_WTIE_Msk       (1ul << WDT_WTCR_WTIE_Pos)
N
N#define WDT_WTCR_WTWKF_Pos      5  
N#define WDT_WTCR_WTWKF_Msk      (1ul << WDT_WTCR_WTWKF_Pos)
N
N#define WDT_WTCR_WTWKE_Pos      4  
N#define WDT_WTCR_WTWKE_Msk      (1ul << WDT_WTCR_WTWKE_Pos)
N
N#define WDT_WTCR_WTIF_Pos       3  
N#define WDT_WTCR_WTIF_Msk       (1ul << WDT_WTCR_WTIF_Pos)
N
N#define WDT_WTCR_WTRF_Pos       2  
N#define WDT_WTCR_WTRF_Msk       (1ul << WDT_WTCR_WTRF_Pos)
N
N#define WDT_WTCR_WTRE_Pos       1  
N#define WDT_WTCR_WTRE_Msk       (1ul << WDT_WTCR_WTRE_Pos)
N
N#define WDT_WTCR_WTR_Pos        0  
N#define WDT_WTCR_WTR_Msk        (1ul << WDT_WTCR_WTR_Pos)
N
N
N/*------------------------- SPI Interface Controller -------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  GO_BUSY:1;
X    volatile uint32_t  GO_BUSY:1;
N    __IO uint32_t  RX_NEG:1;
X    volatile uint32_t  RX_NEG:1;
N    __IO uint32_t  TX_NEG:1;
X    volatile uint32_t  TX_NEG:1;
N    __IO uint32_t  TX_BIT_LEN:5;
X    volatile uint32_t  TX_BIT_LEN:5;
N    __IO uint32_t  TX_NUM:2;
X    volatile uint32_t  TX_NUM:2;
N    __IO uint32_t  LSB:1;
X    volatile uint32_t  LSB:1;
N    __IO uint32_t  CLKP:1;
X    volatile uint32_t  CLKP:1;
N    __IO uint32_t  SP_CYCLE:4;
X    volatile uint32_t  SP_CYCLE:4;
N    __IO uint32_t  IF:1;
X    volatile uint32_t  IF:1;
N    __IO uint32_t  IE:1;
X    volatile uint32_t  IE:1;
N    __IO uint32_t  SLAVE:1;
X    volatile uint32_t  SLAVE:1;
N    __IO uint32_t  REORDER:2;
X    volatile uint32_t  REORDER:2;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  TWOB:1;
X    volatile uint32_t  TWOB:1;
N    __IO uint32_t  VARCLK_EN:1;
X    volatile uint32_t  VARCLK_EN:1;
N    __I  uint32_t  RESERVE1:8;
X    volatile const  uint32_t  RESERVE1:8;
N} SPI_CNTRL_T;
N
Ntypedef struct
N{
N    __IO uint32_t  DIVIDER:16;
X    volatile uint32_t  DIVIDER:16;
N    __IO uint32_t  DIVIDER2:16;
X    volatile uint32_t  DIVIDER2:16;
N} SPI_DIVIDER_T;
N
Ntypedef struct
N{
N    __IO uint32_t  SSR:2;
X    volatile uint32_t  SSR:2;
N    __IO uint32_t  SS_LVL:1;
X    volatile uint32_t  SS_LVL:1;
N    __IO uint32_t  AUTOSS:1;
X    volatile uint32_t  AUTOSS:1;
N    __IO uint32_t  SS_LTRIG:1;
X    volatile uint32_t  SS_LTRIG:1;
N    __I  uint32_t  LTRIG_FLAG:1;
X    volatile const  uint32_t  LTRIG_FLAG:1;
N    __I  uint32_t  RESERVE:26;
X    volatile const  uint32_t  RESERVE:26;
N} SPI_SSR_T;
N
N
Ntypedef __I  uint32_t   SPI_RX_T;
Xtypedef volatile const  uint32_t   SPI_RX_T;
Ntypedef __O  uint32_t   SPI_TX_T;
Xtypedef volatile  uint32_t   SPI_TX_T;
Ntypedef __IO uint32_t   SPI_VARCLK_T;
Xtypedef volatile uint32_t   SPI_VARCLK_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TX_DMA_GO:1;
X    volatile uint32_t  TX_DMA_GO:1;
N    __IO uint32_t  RX_DMA_GO:1;
X    volatile uint32_t  RX_DMA_GO:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} SPI_DMA_T;
N
Ntypedef struct
N{
N    __IO uint32_t  DIV_ONE:1;
X    volatile uint32_t  DIV_ONE:1;
N    __I  uint32_t  RESERVE0:7;
X    volatile const  uint32_t  RESERVE0:7;
N    __IO uint32_t  NOSLVSEL:1;
X    volatile uint32_t  NOSLVSEL:1;
N    __IO uint32_t  SLV_ABORT:1;
X    volatile uint32_t  SLV_ABORT:1;
N    __IO uint32_t  SSTA_INTEN:1;
X    volatile uint32_t  SSTA_INTEN:1;
N    __IO uint32_t  SLV_START_INTSTS:1;
X    volatile uint32_t  SLV_START_INTSTS:1;
N    __I  uint32_t  RESERVE1:20;
X    volatile const  uint32_t  RESERVE1:20;
N} SPI_CNTRL2_T;
N
Ntypedef struct
N{
N    union {
N        __IO uint32_t u32CNTRL;
X        volatile uint32_t u32CNTRL;
N        struct {
N            __IO uint32_t  GO_BUSY:1;
X            volatile uint32_t  GO_BUSY:1;
N            __IO uint32_t  RX_NEG:1;
X            volatile uint32_t  RX_NEG:1;
N            __IO uint32_t  TX_NEG:1;
X            volatile uint32_t  TX_NEG:1;
N            __IO uint32_t  TX_BIT_LEN:5;
X            volatile uint32_t  TX_BIT_LEN:5;
N            __IO uint32_t  TX_NUM:2;
X            volatile uint32_t  TX_NUM:2;
N            __IO uint32_t  LSB:1;
X            volatile uint32_t  LSB:1;
N            __IO uint32_t  CLKP:1;
X            volatile uint32_t  CLKP:1;
N            __IO uint32_t  SP_CYCLE:4;
X            volatile uint32_t  SP_CYCLE:4;
N            __IO uint32_t  IF:1;
X            volatile uint32_t  IF:1;
N            __IO uint32_t  IE:1;
X            volatile uint32_t  IE:1;
N            __IO uint32_t  SLAVE:1;
X            volatile uint32_t  SLAVE:1;
N            __IO uint32_t  REORDER:2;
X            volatile uint32_t  REORDER:2;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  TWOB:1;
X            volatile uint32_t  TWOB:1;
N            __IO uint32_t  VARCLK_EN:1;
X            volatile uint32_t  VARCLK_EN:1;
N            __I  uint32_t  RESERVE1:8;
X            volatile const  uint32_t  RESERVE1:8;
N        } CNTRL;
N    };
N
N    union {
N        __IO uint32_t u32DIVIDER;
X        volatile uint32_t u32DIVIDER;
N        struct {
N            __IO uint32_t  DIVIDER:16;
X            volatile uint32_t  DIVIDER:16;
N            __IO uint32_t  DIVIDER2:16;
X            volatile uint32_t  DIVIDER2:16;
N        } DIVIDER;
N    };
N
N    union {
N        __IO uint32_t u32SSR;
X        volatile uint32_t u32SSR;
N        struct {
N            __IO uint32_t  SSR:2;
X            volatile uint32_t  SSR:2;
N            __IO uint32_t  SS_LVL:1;
X            volatile uint32_t  SS_LVL:1;
N            __IO uint32_t  AUTOSS:1;
X            volatile uint32_t  AUTOSS:1;
N            __IO uint32_t  SS_LTRIG:1;
X            volatile uint32_t  SS_LTRIG:1;
N            __I  uint32_t  LTRIG_FLAG:1;
X            volatile const  uint32_t  LTRIG_FLAG:1;
N            __I  uint32_t  RESERVE:26;
X            volatile const  uint32_t  RESERVE:26;
N        } SSR;
N    };
N
N    __I uint32_t RESERVE0;
X    volatile const uint32_t RESERVE0;
N
N    union {
N        __I uint32_t u32RX[2];
X        volatile const uint32_t u32RX[2];
N        __I uint32_t RX[2];
X        volatile const uint32_t RX[2];
N    };
N
N    __I uint32_t RESERVE1;
X    volatile const uint32_t RESERVE1;
N    __I uint32_t RESERVE2;
X    volatile const uint32_t RESERVE2;
N
N    union {
N        __O uint32_t u32TX[2];
X        volatile uint32_t u32TX[2];
N        __O uint32_t TX[2];
X        volatile uint32_t TX[2];
N    };
N
N    __I uint32_t RESERVE3;
X    volatile const uint32_t RESERVE3;
N    __I uint32_t RESERVE4;
X    volatile const uint32_t RESERVE4;
N    __I uint32_t RESERVE5;
X    volatile const uint32_t RESERVE5;
N
N    union {
N        __IO uint32_t u32VARCLK;
X        volatile uint32_t u32VARCLK;
N        __IO uint32_t VARCLK;
X        volatile uint32_t VARCLK;
N    };
N
N    union {
N        __IO uint32_t u32DMA;
X        volatile uint32_t u32DMA;
N        struct {
N            __IO uint32_t  TX_DMA_GO:1;
X            volatile uint32_t  TX_DMA_GO:1;
N            __IO uint32_t  RX_DMA_GO:1;
X            volatile uint32_t  RX_DMA_GO:1;
N            __I  uint32_t  RESERVE:30;
X            volatile const  uint32_t  RESERVE:30;
N        } DMA;
N    };
N
N    union {
N        __IO uint32_t u32CNTRL2;
X        volatile uint32_t u32CNTRL2;
N        struct {
N            __IO uint32_t  DIV_ONE:1;
X            volatile uint32_t  DIV_ONE:1;
N            __I  uint32_t  RESERVE0:7;
X            volatile const  uint32_t  RESERVE0:7;
N            __IO uint32_t  NOSLVSEL:1;
X            volatile uint32_t  NOSLVSEL:1;
N            __IO uint32_t  SLV_ABORT:1;
X            volatile uint32_t  SLV_ABORT:1;
N            __IO uint32_t  SSTA_INTEN:1;
X            volatile uint32_t  SSTA_INTEN:1;
N            __IO uint32_t  SLV_START_INTSTS:1;
X            volatile uint32_t  SLV_START_INTSTS:1;
N            __I  uint32_t  RESERVE1:20;
X            volatile const  uint32_t  RESERVE1:20;
N        } CNTRL2;
N    };
N
N} SPI_T;
N
N
N/* SPI_CNTRL Bit Field Definitions */
N#define SPI_CNTRL_VARCLK_EN_Pos    23
N#define SPI_CNTRL_VARCLK_EN_Msk    (1ul << SPI_CNTRL_VARCLK_EN_Pos)
N
N#define SPI_CNTRL_TWOB_Pos         22
N#define SPI_CNTRL_TWOB_Msk         (1ul << SPI_CNTRL_TWOB_Pos)
N
N#define SPI_CNTRL_REORDER_Pos      19
N#define SPI_CNTRL_REORDER_Msk      (3ul << SPI_CNTRL_REORDER_Pos)
N
N#define SPI_CNTRL_SLAVE_Pos        18
N#define SPI_CNTRL_SLAVE_Msk        (1ul << SPI_CNTRL_SLAVE_Pos)
N
N#define SPI_CNTRL_IE_Pos           17
N#define SPI_CNTRL_IE_Msk           (1ul << SPI_CNTRL_IE_Pos)
N
N#define SPI_CNTRL_IF_Pos           16
N#define SPI_CNTRL_IF_Msk           (1ul << SPI_CNTRL_IF_Pos)
N
N#define SPI_CNTRL_SP_CYCLE_Pos     12
N#define SPI_CNTRL_SP_CYCLE_Msk     (0xFul << SPI_CNTRL_SP_CYCLE_Pos)
N
N#define SPI_CNTRL_CLKP_Pos         11
N#define SPI_CNTRL_CLKP_Msk         (1ul << SPI_CNTRL_CLKP_Pos)
N
N#define SPI_CNTRL_LSB_Pos          10
N#define SPI_CNTRL_LSB_Msk          (1ul << SPI_CNTRL_LSB_Pos)
N
N#define SPI_CNTRL_TX_NUM_Pos       8
N#define SPI_CNTRL_TX_NUM_Msk       (3ul << SPI_CNTRL_TX_NUM_Pos)
N
N#define SPI_CNTRL_TX_BIT_LEN_Pos   3
N#define SPI_CNTRL_TX_BIT_LEN_Msk   (0x1Ful << SPI_CNTRL_TX_BIT_LEN_Pos)
N
N#define SPI_CNTRL_TX_NEG_Pos       2
N#define SPI_CNTRL_TX_NEG_Msk       (1ul << SPI_CNTRL_TX_NEG_Pos)
N
N#define SPI_CNTRL_RX_NEG_Pos       1
N#define SPI_CNTRL_RX_NEG_Msk       (1ul << SPI_CNTRL_RX_NEG_Pos)
N
N#define SPI_CNTRL_GO_BUSY_Pos      0
N#define SPI_CNTRL_GO_BUSY_Msk      (1ul << SPI_CNTRL_GO_BUSY_Pos)
N
N
N/* SPI_DIVIDER Bit Field Definitions */
N#define SPI_DIVIDER_DIVIDER2_Pos   16
N#define SPI_DIVIDER_DIVIDER2_Msk   (0xFFFFul << SPI_DIVIDER_DIVIDER2_Pos)
N
N#define SPI_DIVIDER_DIVIDER_Pos    0
N#define SPI_DIVIDER_DIVIDER_Msk    (0xFFFFul << SPI_DIVIDER_DIVIDER_Pos)
N
N/* SPI_SSR Bit Field Definitions */
N#define SPI_SSR_LTRIG_FLAG_Pos     5
N#define SPI_SSR_LTRIG_FLAG_Msk     (1ul << SPI_SSR_LTRIG_FLAG_Pos)
N
N#define SPI_SSR_SS_LTRIG_Pos       4
N#define SPI_SSR_SS_LTRIG_Msk       (1ul << SPI_SSR_SS_LTRIG_Pos)
N
N#define SPI_SSR_AUTOSS_Pos         3
N#define SPI_SSR_AUTOSS_Msk         (1ul << SPI_SSR_AUTOSS_Pos)
N
N#define SPI_SSR_SS_LVL_Pos         2
N#define SPI_SSR_SS_LVL_Msk         (1ul << SPI_SSR_SS_LVL_Pos)
N
N#define SPI_SSR_SSR_Pos            0
N#define SPI_SSR_SSR_Msk            (3ul << SPI_SSR_SSR_Pos)
N
N/* SPI_DMA Bit Field Definitions */
N#define SPI_DMA_RX_DMA_GO_Pos   1
N#define SPI_DMA_RX_DMA_GO_Msk   (1ul << SPI_DMA_RX_DMA_GO_Pos)
N
N#define SPI_DMA_TX_DMA_GO_Pos   0
N#define SPI_DMA_TX_DMA_GO_Msk   (1ul << SPI_DMA_TX_DMA_GO_Pos)
N
N/* SPI_CNTRL2 Bit Field Definitions */
N#define SPI_CNTRL2_SLV_START_INTSTS_Pos   11
N#define SPI_CNTRL2_SLV_START_INTSTS_Msk   (1ul << SPI_CNTRL2_SLV_START_INTSTS_Pos)
N
N#define SPI_CNTRL2_SSTA_INTEN_Pos   10
N#define SPI_CNTRL2_SSTA_INTEN_Msk   (1ul << SPI_CNTRL2_SSTA_INTEN_Pos)
N
N#define SPI_CNTRL2_SLV_ABORT_Pos    9
N#define SPI_CNTRL2_SLV_ABORT_Msk    (1ul << SPI_CNTRL2_SLV_ABORT_Pos)
N
N#define SPI_CNTRL2_NOSLVSEL_Pos     8
N#define SPI_CNTRL2_NOSLVSEL_Msk     (1ul << SPI_CNTRL2_NOSLVSEL_Pos)
N
N#define SPI_CNTRL2_DIV_ONE_Pos      0
N#define SPI_CNTRL2_DIV_ONE_Msk      (1ul << SPI_CNTRL2_DIV_ONE_Pos)
N
N
N/*------------------------------ I2C Controller ------------------------------*/
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  AA:1;
X    volatile uint32_t  AA:1;
N    __IO uint32_t  SI:1;
X    volatile uint32_t  SI:1;
N    __IO uint32_t  STO:1;
X    volatile uint32_t  STO:1;
N    __IO uint32_t  STA:1;
X    volatile uint32_t  STA:1;
N    __IO uint32_t  ENS1:1;
X    volatile uint32_t  ENS1:1;
N    __IO uint32_t  EI:1;
X    volatile uint32_t  EI:1;
N    __I  uint32_t  RESERVE1:24;
X    volatile const  uint32_t  RESERVE1:24;
N} I2C_I2CON_T;
N
Ntypedef struct
N{
N    __IO uint32_t  GC:1;
X    volatile uint32_t  GC:1;
N    __IO uint32_t  I2CADDR:7;
X    volatile uint32_t  I2CADDR:7;
N    __I  uint32_t  RESERVE:24;
X    volatile const  uint32_t  RESERVE:24;
N} I2C_I2CADDR_T;
N
Ntypedef __IO uint32_t I2C_I2CDAT_T;
Xtypedef volatile uint32_t I2C_I2CDAT_T;
N
Ntypedef __I  uint32_t I2C_I2CSTATUS_T;
Xtypedef volatile const  uint32_t I2C_I2CSTATUS_T;
N
Ntypedef __IO uint32_t I2C_I2CLK_T;
Xtypedef volatile uint32_t I2C_I2CLK_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TIF:1;
X    volatile uint32_t  TIF:1;
N    __IO uint32_t  DIV4:1;
X    volatile uint32_t  DIV4:1;
N    __IO uint32_t  ENTI:1;
X    volatile uint32_t  ENTI:1;
N    __I  uint32_t  RESERVE:29;
X    volatile const  uint32_t  RESERVE:29;
N} I2C_I2CTOC_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  I2CADM:7;
X    volatile uint32_t  I2CADM:7;
N    __I  uint32_t  RESERVE1:24;
X    volatile const  uint32_t  RESERVE1:24;
N} I2C_I2CADM_T;
N
Ntypedef struct
N{
N    union 
N    {
N        __IO uint32_t u32I2CON;
X        volatile uint32_t u32I2CON;
N        
N        struct 
N        {
N            __I  uint32_t  RESERVE0:2;
X            volatile const  uint32_t  RESERVE0:2;
N            __IO uint32_t  AA:1;
X            volatile uint32_t  AA:1;
N            __IO uint32_t  SI:1;
X            volatile uint32_t  SI:1;
N            __IO uint32_t  STO:1;
X            volatile uint32_t  STO:1;
N            __IO uint32_t  STA:1;
X            volatile uint32_t  STA:1;
N            __IO uint32_t  ENS1:1;
X            volatile uint32_t  ENS1:1;
N            __IO uint32_t  EI:1;
X            volatile uint32_t  EI:1;
N            __I  uint32_t  RESERVE1:24;
X            volatile const  uint32_t  RESERVE1:24;
N        } I2CON;
N    };
N
N    union 
N    {
N        __IO uint32_t u32I2CADDR0;
X        volatile uint32_t u32I2CADDR0;
N        
N        struct 
N        {
N            __IO uint32_t  GC:1;
X            volatile uint32_t  GC:1;
N            __IO uint32_t  I2CADDR:7;
X            volatile uint32_t  I2CADDR:7;
N            __I  uint32_t  RESERVE:24;
X            volatile const  uint32_t  RESERVE:24;
N        } I2CADDR0;
N    };
N
N    union 
N    {
N        __IO uint32_t u32I2CDAT;
X        volatile uint32_t u32I2CDAT;
N        __IO uint32_t I2CDAT;
X        volatile uint32_t I2CDAT;
N    };
N
N    union 
N    {
N        __I uint32_t u32I2CSTATUS;
X        volatile const uint32_t u32I2CSTATUS;
N        __I uint32_t I2CSTATUS;
X        volatile const uint32_t I2CSTATUS;
N    };
N    
N    union 
N    {
N        __IO uint32_t u32I2CLK;
X        volatile uint32_t u32I2CLK;
N        __IO uint32_t I2CLK;
X        volatile uint32_t I2CLK;
N    };
N
N    union 
N    {
N        __IO uint32_t u32I2CTOC;
X        volatile uint32_t u32I2CTOC;
N        
N        struct 
N        {
N            __IO uint32_t  TIF:1;
X            volatile uint32_t  TIF:1;
N            __IO uint32_t  DIV4:1;
X            volatile uint32_t  DIV4:1;
N            __IO uint32_t  ENTI:1;
X            volatile uint32_t  ENTI:1;
N            __I  uint32_t  RESERVE:29;
X            volatile const  uint32_t  RESERVE:29;
N        } I2CTOC;
N    };
N
N    union 
N    {
N        __IO uint32_t u32I2CADDR1;
X        volatile uint32_t u32I2CADDR1;
N        
N        struct 
N        {
N            __IO uint32_t  GC:1;
X            volatile uint32_t  GC:1;
N            __IO uint32_t  I2CADDR:7;
X            volatile uint32_t  I2CADDR:7;
N            __I  uint32_t  RESERVE:24;
X            volatile const  uint32_t  RESERVE:24;
N        } I2CADDR1;
N    };
N    
N    union 
N    {
N        __IO uint32_t u32I2CADDR2;
X        volatile uint32_t u32I2CADDR2;
N        
N        struct 
N        {
N            __IO uint32_t  GC:1;
X            volatile uint32_t  GC:1;
N            __IO uint32_t  I2CADDR:7;
X            volatile uint32_t  I2CADDR:7;
N            __I  uint32_t  RESERVE:24;
X            volatile const  uint32_t  RESERVE:24;
N        } I2CADDR2;
N    };    
N    
N    union 
N    {
N        __IO uint32_t u32I2CADDR3;
X        volatile uint32_t u32I2CADDR3;
N        
N        struct 
N        {
N            __IO uint32_t  GC:1;
X            volatile uint32_t  GC:1;
N            __IO uint32_t  I2CADDR:7;
X            volatile uint32_t  I2CADDR:7;
N            __I  uint32_t  RESERVE:24;
X            volatile const  uint32_t  RESERVE:24;
N        } I2CADDR3;
N    }; 
N    
N    union 
N    {
N        __IO uint32_t u32I2CADM0;
X        volatile uint32_t u32I2CADM0;
N        
N        struct 
N        {
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  I2CADM:7;
X            volatile uint32_t  I2CADM:7;
N            __I  uint32_t  RESERVE1:24;
X            volatile const  uint32_t  RESERVE1:24;
N        } I2CADM0;
N    };     
N    
N    union 
N    {
N        __IO uint32_t u32I2CADM1;
X        volatile uint32_t u32I2CADM1;
N        
N        struct 
N        {
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  I2CADM:7;
X            volatile uint32_t  I2CADM:7;
N            __I  uint32_t  RESERVE1:24;
X            volatile const  uint32_t  RESERVE1:24;
N        } I2CADM1;
N    };
N
N    union 
N    {
N        __IO uint32_t u32I2CADM2;
X        volatile uint32_t u32I2CADM2;
N        
N        struct 
N        {
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  I2CADM:7;
X            volatile uint32_t  I2CADM:7;
N            __I  uint32_t  RESERVE1:24;
X            volatile const  uint32_t  RESERVE1:24;
N        } I2CADM2;
N    };
N       
N    union 
N    {
N        __IO uint32_t u32I2CADM3;
X        volatile uint32_t u32I2CADM3;
N        
N        struct 
N        {
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  I2CADM:7;
X            volatile uint32_t  I2CADM:7;
N            __I  uint32_t  RESERVE1:24;
X            volatile const  uint32_t  RESERVE1:24;
N        } I2CADM3;
N    };       
N} I2C_T;
N
N/* I2C I2CON Bit Field Definitions */
N#define I2C_I2CON_EI_Pos                        7
N#define I2C_I2CON_EI_Msk                        (1ul << I2C_I2CON_EI_Pos)
N
N#define I2C_I2CON_ENS1_Pos                      6
N#define I2C_I2CON_ENS1_Msk                      (1ul << I2C_I2CON_ENS1_Pos)
N
N#define I2C_I2CON_STA_Pos                       5
N#define I2C_I2CON_STA_Msk                       (1ul << I2C_I2CON_STA_Pos)
N
N#define I2C_I2CON_STO_Pos                       4
N#define I2C_I2CON_STO_Msk                       (1ul << I2C_I2CON_STO_Pos)
N
N#define I2C_I2CON_SI_Pos                        3
N#define I2C_I2CON_SI_Msk                        (1ul << I2C_I2CON_SI_Pos)
N
N#define I2C_I2CON_AA_Pos                        2
N#define I2C_I2CON_AA_Msk                        (1ul << I2C_I2CON_AA_Pos)
N
N/* I2C I2CADDR Bit Field Definitions */
N#define I2C_I2CADDR_I2CADDR_Pos                 1
N#define I2C_I2CADDR_I2CADDR_Msk                 (0x7Ful << I2C_I2CADDR_I2CADDR_Pos)
N
N#define I2C_I2CADDR_GC_Pos                      0
N#define I2C_I2CADDR_GC_Msk                      (1ul << I2C_I2CADDR_GC_Pos)
N
N/* I2C I2CDAT Bit Field Definitions */
N#define I2C_I2CDAT_I2CDAT_Pos                   0
N#define I2C_I2CDAT_I2CDAT_Msk                   (0xFFul << I2C_I2CDAT_I2CDAT_Pos)
N
N/* I2C I2CSTATUS Bit Field Definitions */
N#define I2C_I2CSTATUS_I2CSTATUS_Pos             0
N#define I2C_I2CSTATUS_I2CSTATUS_Msk             (0xFFul << I2C_I2CSTATUS_I2CSTATUS_Pos)
N
N/* I2C I2CLK Bit Field Definitions */
N#define I2C_I2CLK_I2CLK_Pos                     0
N#define I2C_I2CLK_I2CLK_Msk                     (0xFFul << I2C_I2CLK_I2CLK_Pos)
N
N/* I2C I2CTOC Bit Field Definitions */
N#define I2C_I2CTOC_ENTI_Pos                     2
N#define I2C_I2CTOC_ENTI_Msk                     (1ul << I2C_I2CTOC_ENTI_Pos)
N
N#define I2C_I2CTOC_DIV4_Pos                     1
N#define I2C_I2CTOC_DIV4_Msk                     (1ul << I2C_I2CTOC_DIV4_Pos)
N
N#define I2C_I2CTOC_TIF_Pos                      0
N#define I2C_I2CTOC_TIF_Msk                      (1ul << I2C_I2CTOC_TIF_Pos)
N
N/* I2C I2CADM Bit Field Definitions */
N#define I2C_I2CADM_I2CADM_Pos                   1
N#define I2C_I2CADM_I2CADM_Msk                   (0x7Ful << I2C_I2CADM_I2CADM_Pos)
N
N
N/*----------------------------- RTC Controller -------------------------------*/
Ntypedef __IO uint32_t RTC_INIR_T;
Xtypedef volatile uint32_t RTC_INIR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  AER:16;
X    volatile uint32_t  AER:16;
N    __I  uint32_t  ENF:1;
X    volatile const  uint32_t  ENF:1;
N    __I  uint32_t  RESERVE1:15;
X    volatile const  uint32_t  RESERVE1:15;
N} RTC_AER_T;
N
Ntypedef struct
N{
N    __IO uint32_t  FRACTION:6;
X    volatile uint32_t  FRACTION:6;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  INTEGER:4;
X    volatile uint32_t  INTEGER:4;
N    __I  uint32_t  RESERVE1:20;
X    volatile const  uint32_t  RESERVE1:20;
N} RTC_FCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  SEC1:4;
X    volatile uint32_t  SEC1:4;
N    __IO uint32_t  SEC10:3;
X    volatile uint32_t  SEC10:3;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  MIN1:4;
X    volatile uint32_t  MIN1:4;
N    __IO uint32_t  MIN10:3;
X    volatile uint32_t  MIN10:3;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __IO uint32_t  HR1:4;
X    volatile uint32_t  HR1:4;
N    __IO uint32_t  HR10:2;
X    volatile uint32_t  HR10:2;
N    __I  uint32_t  RESERVE2:10;
X    volatile const  uint32_t  RESERVE2:10;
N} RTC_TLR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  DAY1:4;
X    volatile uint32_t  DAY1:4;
N    __IO uint32_t  DAY10:2;
X    volatile uint32_t  DAY10:2;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  MON1:4;
X    volatile uint32_t  MON1:4;
N    __IO uint32_t  MON10:1;
X    volatile uint32_t  MON10:1;
N    __I  uint32_t  RESERVE1:3;
X    volatile const  uint32_t  RESERVE1:3;
N    __IO uint32_t  YEAR1:4;
X    volatile uint32_t  YEAR1:4;
N    __IO uint32_t  YEAR10:4;
X    volatile uint32_t  YEAR10:4;
N    __I  uint32_t  RESERVE2:8;
X    volatile const  uint32_t  RESERVE2:8;
N} RTC_CLR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  HR24_HR12:1;
X    volatile uint32_t  HR24_HR12:1;
N    __I  uint32_t  RESERVE:31;
X    volatile const  uint32_t  RESERVE:31;
N} RTC_TSSR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  DWR:3;
X    volatile uint32_t  DWR:3;
N    __I  uint32_t  RESERVE:29;
X    volatile const  uint32_t  RESERVE:29;
N} RTC_DWR_T;
N
Ntypedef RTC_TLR_T   RTC_TAR_T;
N
Ntypedef RTC_CLR_T   RTC_CAR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  LIR:1;
X    volatile uint32_t  LIR:1;
N    __I  uint32_t  RESERVE:31;
X    volatile const  uint32_t  RESERVE:31;
N} RTC_LIR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  AIER:1;
X    volatile uint32_t  AIER:1;
N    __IO uint32_t  TIER:1;
X    volatile uint32_t  TIER:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} RTC_RIER_T;
N
Ntypedef struct
N{
N    __IO uint32_t  AIF:1;
X    volatile uint32_t  AIF:1;
N    __IO uint32_t  TIF:1;
X    volatile uint32_t  TIF:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} RTC_RIIR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TTR:3;
X    volatile uint32_t  TTR:3;
N    __IO uint32_t  TWKE:1;
X    volatile uint32_t  TWKE:1;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} RTC_TTR_T;
N
Ntypedef struct
N{
N    union {
N        __IO uint32_t u32INIR;
X        volatile uint32_t u32INIR;
N        __IO uint32_t INIR;
X        volatile uint32_t INIR;
N    };
N
N    union {
N        __IO uint32_t u32AER;
X        volatile uint32_t u32AER;
N        struct {
N            __IO uint32_t  AER:16;
X            volatile uint32_t  AER:16;
N            __I  uint32_t  ENF:1;
X            volatile const  uint32_t  ENF:1;
N            __I  uint32_t  RESERVE1:15;
X            volatile const  uint32_t  RESERVE1:15;
N        } AER;
N    };
N
N    union {
N        __IO uint32_t u32FCR;
X        volatile uint32_t u32FCR;
N        struct {
N            __IO uint32_t  FRACTION:6;
X            volatile uint32_t  FRACTION:6;
N            __I  uint32_t  RESERVE0:2;
X            volatile const  uint32_t  RESERVE0:2;
N            __IO uint32_t  INTEGER:4;
X            volatile uint32_t  INTEGER:4;
N            __I  uint32_t  RESERVE1:20;
X            volatile const  uint32_t  RESERVE1:20;
N        } FCR;
N    };
N
N    union {
N        __IO uint32_t u32TLR;
X        volatile uint32_t u32TLR;
N        struct {
N            __IO uint32_t  SEC1:4;
X            volatile uint32_t  SEC1:4;
N            __IO uint32_t  SEC10:3;
X            volatile uint32_t  SEC10:3;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  MIN1:4;
X            volatile uint32_t  MIN1:4;
N            __IO uint32_t  MIN10:3;
X            volatile uint32_t  MIN10:3;
N            __I  uint32_t  RESERVE1:1;
X            volatile const  uint32_t  RESERVE1:1;
N            __IO uint32_t  HR1:4;
X            volatile uint32_t  HR1:4;
N            __IO uint32_t  HR10:2;
X            volatile uint32_t  HR10:2;
N            __I  uint32_t  RESERVE2:10;
X            volatile const  uint32_t  RESERVE2:10;
N        } TLR;
N    };
N
N    union {
N        __IO uint32_t u32CLR;
X        volatile uint32_t u32CLR;
N        struct {
N            __IO uint32_t  DAY1:4;
X            volatile uint32_t  DAY1:4;
N            __IO uint32_t  DAY10:2;
X            volatile uint32_t  DAY10:2;
N            __I  uint32_t  RESERVE0:2;
X            volatile const  uint32_t  RESERVE0:2;
N            __IO uint32_t  MON1:4;
X            volatile uint32_t  MON1:4;
N            __IO uint32_t  MON10:1;
X            volatile uint32_t  MON10:1;
N            __I  uint32_t  RESERVE1:3;
X            volatile const  uint32_t  RESERVE1:3;
N            __IO uint32_t  YEAR1:4;
X            volatile uint32_t  YEAR1:4;
N            __IO uint32_t  YEAR10:4;
X            volatile uint32_t  YEAR10:4;
N            __I  uint32_t  RESERVE2:8;
X            volatile const  uint32_t  RESERVE2:8;
N        } CLR;
N    };
N
N    union {
N        __IO uint32_t u32TSSR;
X        volatile uint32_t u32TSSR;
N        struct {
N            __IO uint32_t  HR24_HR12:1;
X            volatile uint32_t  HR24_HR12:1;
N            __I  uint32_t  RESERVE:31;
X            volatile const  uint32_t  RESERVE:31;
N        } TSSR;
N    };
N
N    union {
N        __IO uint32_t u32DWR;
X        volatile uint32_t u32DWR;
N        struct {
N            __IO uint32_t  DWR:3;
X            volatile uint32_t  DWR:3;
N            __I  uint32_t  RESERVE:29;
X            volatile const  uint32_t  RESERVE:29;
N        } DWR;
N    };
N
N    union {
N        __IO uint32_t u32TAR;
X        volatile uint32_t u32TAR;
N        struct {
N            __IO uint32_t  SEC1:4;
X            volatile uint32_t  SEC1:4;
N            __IO uint32_t  SEC10:3;
X            volatile uint32_t  SEC10:3;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  MIN1:4;
X            volatile uint32_t  MIN1:4;
N            __IO uint32_t  MIN10:3;
X            volatile uint32_t  MIN10:3;
N            __I  uint32_t  RESERVE1:1;
X            volatile const  uint32_t  RESERVE1:1;
N            __IO uint32_t  HR1:4;
X            volatile uint32_t  HR1:4;
N            __IO uint32_t  HR10:2;
X            volatile uint32_t  HR10:2;
N            __I  uint32_t  RESERVE2:10;
X            volatile const  uint32_t  RESERVE2:10;
N        } TAR;
N    };
N
N    union {
N        __IO uint32_t u32CAR;
X        volatile uint32_t u32CAR;
N        struct {
N            __IO uint32_t  DAY1:4;
X            volatile uint32_t  DAY1:4;
N            __IO uint32_t  DAY10:2;
X            volatile uint32_t  DAY10:2;
N            __I  uint32_t  RESERVE0:2;
X            volatile const  uint32_t  RESERVE0:2;
N            __IO uint32_t  MON1:4;
X            volatile uint32_t  MON1:4;
N            __IO uint32_t  MON10:1;
X            volatile uint32_t  MON10:1;
N            __I  uint32_t  RESERVE1:3;
X            volatile const  uint32_t  RESERVE1:3;
N            __IO uint32_t  YEAR1:4;
X            volatile uint32_t  YEAR1:4;
N            __IO uint32_t  YEAR10:4;
X            volatile uint32_t  YEAR10:4;
N            __I  uint32_t  RESERVE2:8;
X            volatile const  uint32_t  RESERVE2:8;
N        } CAR;
N    };
N
N    union {
N        __IO uint32_t u32LIR;
X        volatile uint32_t u32LIR;
N        struct {
N            __IO uint32_t  LIR:1;
X            volatile uint32_t  LIR:1;
N            __I  uint32_t  RESERVE:31;
X            volatile const  uint32_t  RESERVE:31;
N        } LIR;
N    };
N
N    union {
N        __IO uint32_t u32RIER;
X        volatile uint32_t u32RIER;
N        struct {
N            __IO uint32_t  AIER:1;
X            volatile uint32_t  AIER:1;
N            __IO uint32_t  TIER:1;
X            volatile uint32_t  TIER:1;
N            __I  uint32_t  RESERVE:30;
X            volatile const  uint32_t  RESERVE:30;
N        } RIER;
N    };
N
N    union {
N        __IO uint32_t u32RIIR;
X        volatile uint32_t u32RIIR;
N        struct {
N            __IO uint32_t  AIF:1;
X            volatile uint32_t  AIF:1;
N            __IO uint32_t  TIF:1;
X            volatile uint32_t  TIF:1;
N            __I  uint32_t  RESERVE:30;
X            volatile const  uint32_t  RESERVE:30;
N        } RIIR;
N    };
N
N    union {
N        __IO uint32_t u32TTR;
X        volatile uint32_t u32TTR;
N        struct {
N            __IO uint32_t  TTR:3;
X            volatile uint32_t  TTR:3;
N            __IO uint32_t  TWKE:1;
X            volatile uint32_t  TWKE:1;
N            __I  uint32_t  RESERVE:28;
X            volatile const  uint32_t  RESERVE:28;
N        } TTR;
N    };
N} RTC_T;
N
N/* RTC INIR Bit Field Definitions */
N#define RTC_INIR_INIR_Pos       0  
N#define RTC_INIR_INIR_Msk       (0xFFFFFFFFul << RTC_INIR_INIR_Pos)
N
N#define RTC_INIR_ACTIVE_Pos     0  
N#define RTC_INIR_ACTIVE_Msk     (1ul << RTC_INIR_ACTIVE_Pos)
N
N/* RTC AER Bit Field Definitions */
N#define RTC_AER_ENF_Pos         16  
N#define RTC_AER_ENF_Msk         (1ul << RTC_AER_ENF_Pos)
N
N#define RTC_AER_AER_Pos         0  
N#define RTC_AER_AER_Msk         (0xFFFFul << RTC_AER_AER_Pos)
N
N/* RTC FCR Bit Field Definitions */
N#define RTC_FCR_INTEGER_Pos     8  
N#define RTC_FCR_INTEGER_Msk     (0xFul << RTC_FCR_INTEGER_Pos)
N
N#define RTC_FCR_FRACTION_Pos    0  
N#define RTC_FCR_FRACTION_Msk    (0x3Ful << RTC_FCR_FRACTION_Pos)
N
N/* RTC TLR Bit Field Definitions */
N#define RTC_TLR_10HR_Pos        20  
N#define RTC_TLR_10HR_Msk        (0x3ul << RTC_TLR_10HR_Pos)
N
N#define RTC_TLR_1HR_Pos         16  
N#define RTC_TLR_1HR_Msk         (0xFul << RTC_TLR_1HR_Pos)
N
N#define RTC_TLR_10MIN_Pos       12  
N#define RTC_TLR_10MIN_Msk       (0x7ul << RTC_TLR_10MIN_Pos)
N
N#define RTC_TLR_1MIN_Pos        8  
N#define RTC_TLR_1MIN_Msk        (0xFul << RTC_TLR_1MIN_Pos)
N
N#define RTC_TLR_10SEC_Pos       4  
N#define RTC_TLR_10SEC_Msk       (0x7ul << RTC_TLR_10SEC_Pos)
N
N#define RTC_TLR_1SEC_Pos        0  
N#define RTC_TLR_1SEC_Msk        (0xFul << RTC_TLR_1SEC_Pos)
N
N/* RTC CLR Bit Field Definitions */
N#define RTC_CLR_10YEAR_Pos      20  
N#define RTC_CLR_10YEAR_Msk      (0xFul << RTC_CLR_10YEAR_Pos)
N
N#define RTC_CLR_1YEAR_Pos       16  
N#define RTC_CLR_1YEAR_Msk       (0xFul << RTC_CLR_1YEAR_Pos)
N
N#define RTC_CLR_10MON_Pos       12  
N#define RTC_CLR_10MON_Msk       (1ul << RTC_CLR_10MON_Pos)
N
N#define RTC_CLR_1MON_Pos        8  
N#define RTC_CLR_1MON_Msk        (0xFul << RTC_CLR_1MON_Pos)
N
N#define RTC_CLR_10DAY_Pos       4  
N#define RTC_CLR_10DAY_Msk       (0x3ul << RTC_CLR_10DAY_Pos)
N
N#define RTC_CLR_1DAY_Pos        0  
N#define RTC_CLR_1DAY_Msk        (0xFul << RTC_CLR_1DAY_Pos)
N
N/* RTC TSSR Bit Field Definitions */
N#define RTC_TSSR_24H_12H_Pos    0  
N#define RTC_TSSR_24H_12H_Msk    (1ul << RTC_TSSR_24H_12H_Pos)
N
N/* RTC DWR Bit Field Definitions */
N#define RTC_DWR_DWR_Pos         0  
N#define RTC_DWR_DWR_Msk         (0x7ul << RTC_DWR_DWR_Pos)
N
N/* RTC TAR Bit Field Definitions */
N#define RTC_TAR_10HR_Pos        20  
N#define RTC_TAR_10HR_Msk        (0x3ul << RTC_TAR_10HR_Pos)
N
N#define RTC_TAR_1HR_Pos         16  
N#define RTC_TAR_1HR_Msk         (0xFul << RTC_TAR_1HR_Pos)
N
N#define RTC_TAR_10MIN_Pos       12  
N#define RTC_TAR_10MIN_Msk       (0x7ul << RTC_TAR_10MIN_Pos)
N
N#define RTC_TAR_1MIN_Pos        8  
N#define RTC_TAR_1MIN_Msk        (0xFul << RTC_TAR_1MIN_Pos)
N
N#define RTC_TAR_10SEC_Pos       4  
N#define RTC_TAR_10SEC_Msk       (0x7ul << RTC_TAR_10SEC_Pos)
N
N#define RTC_TAR_1SEC_Pos        0  
N#define RTC_TAR_1SEC_Msk        (0xFul << RTC_TAR_1SEC_Pos)
N
N/* RTC CAR Bit Field Definitions */
N#define RTC_CAR_10YEAR_Pos      20  
N#define RTC_CAR_10YEAR_Msk      (0xFul << RTC_CAR_10YEAR_Pos)
N
N#define RTC_CAR_1YEAR_Pos       16  
N#define RTC_CAR_1YEAR_Msk       (0xFul << RTC_CAR_1YEAR_Pos)
N
N#define RTC_CAR_10MON_Pos       12  
N#define RTC_CAR_10MON_Msk       (1ul << RTC_CAR_10MON_Pos)
N
N#define RTC_CAR_1MON_Pos        8  
N#define RTC_CAR_1MON_Msk        (0xFul << RTC_CAR_1MON_Pos)
N
N#define RTC_CAR_10DAY_Pos       4  
N#define RTC_CAR_10DAY_Msk       (0x3ul << RTC_CAR_10DAY_Pos)
N
N#define RTC_CAR_1DAY_Pos        0  
N#define RTC_CAR_1DAY_Msk        (0xFul << RTC_CAR_1DAY_Pos)
N
N/* RTC LIR Bit Field Definitions */
N#define RTC_LIR_LIR_Pos         0  
N#define RTC_LIR_LIR_Msk         (1ul << RTC_LIR_LIR_Pos)
N
N/* RTC RIER Bit Field Definitions */
N#define RTC_RIER_TIER_Pos       1  
N#define RTC_RIER_TIER_Msk       (1ul << RTC_RIER_TIER_Pos)
N
N#define RTC_RIER_AIER_Pos       0  
N#define RTC_RIER_AIER_Msk       (1ul << RTC_RIER_AIER_Pos)
N
N/* RTC RIIR Bit Field Definitions */
N#define RTC_RIIR_TIF_Pos        1  
N#define RTC_RIIR_TIF_Msk        (1ul << RTC_RIIR_TIF_Pos)
N
N#define RTC_RIIR_AIF_Pos        0  
N#define RTC_RIIR_AIF_Msk        (1ul << RTC_RIIR_AIF_Pos)
N
N/* RTC TTR Bit Field Definitions */
N#define RTC_TTR_TWKE_Pos        3  
N#define RTC_TTR_TWKE_Msk        (1ul << RTC_TTR_TWKE_Pos)
N
N#define RTC_TTR_TTR_Pos         0  
N#define RTC_TTR_TTR_Msk         (0x7ul << RTC_TTR_TTR_Pos)
N
N
N/*----------------------------- ADC Controller -------------------------------*/
Ntypedef struct
N{
N    __I  uint32_t  RSLT:16;
X    volatile const  uint32_t  RSLT:16;
N    __I  uint32_t  OVERRUN:1;
X    volatile const  uint32_t  OVERRUN:1;
N    __I  uint32_t  VALID:1;
X    volatile const  uint32_t  VALID:1;
N    __I  uint32_t  RESERVE1:14;
X    volatile const  uint32_t  RESERVE1:14;
N} ADC_ADDR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  ADEN:1;
X    volatile uint32_t  ADEN:1;
N    __IO uint32_t  ADIE:1;
X    volatile uint32_t  ADIE:1;
N    __IO uint32_t  ADMD:2;
X    volatile uint32_t  ADMD:2;
N    __IO uint32_t  TRGS:2;
X    volatile uint32_t  TRGS:2;
N    __IO uint32_t  TRGCOND:2;
X    volatile uint32_t  TRGCOND:2;
N    __IO uint32_t  TRGEN:1;
X    volatile uint32_t  TRGEN:1;
N    __IO uint32_t  PTEN:1;
X    volatile uint32_t  PTEN:1;
N    __IO uint32_t  DIFFEN:1;
X    volatile uint32_t  DIFFEN:1;
N    __IO uint32_t  ADST:1;
X    volatile uint32_t  ADST:1;
N    __I  uint32_t  RESERVE0:19;
X    volatile const  uint32_t  RESERVE0:19;
N    __IO uint32_t  DMOF:1;
X    volatile uint32_t  DMOF:1;
N} ADC_ADCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  CHEN:8;
X    volatile uint32_t  CHEN:8;
N    __IO uint32_t  PRESEL:2;
X    volatile uint32_t  PRESEL:2;
N    __I  uint32_t  RESERVE:22;
X    volatile const  uint32_t  RESERVE:22;
N} ADC_ADCHER_T;
N
Ntypedef struct
N{
N    __IO uint32_t  CMPEN:1;
X    volatile uint32_t  CMPEN:1;
N    __IO uint32_t  CMPIE:1;
X    volatile uint32_t  CMPIE:1;
N    __IO uint32_t  CMPCOND:1;
X    volatile uint32_t  CMPCOND:1;
N    __IO uint32_t  CMPCH:3;
X    volatile uint32_t  CMPCH:3;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  CMPMATCNT:4;
X    volatile uint32_t  CMPMATCNT:4;
N    __I  uint32_t  RESERVE1:4;
X    volatile const  uint32_t  RESERVE1:4;
N    __IO uint32_t  CMPD:12;
X    volatile uint32_t  CMPD:12;
N    __I  uint32_t  RESERVE2:4;
X    volatile const  uint32_t  RESERVE2:4;
N} ADC_ADCMPR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  ADF:1;
X    volatile uint32_t  ADF:1;
N    __IO uint32_t  CMPF0:1;
X    volatile uint32_t  CMPF0:1;
N    __IO uint32_t  CMPF1:1;
X    volatile uint32_t  CMPF1:1;
N    __I  uint32_t  BUSY:1;
X    volatile const  uint32_t  BUSY:1;
N    __I  uint32_t  CHANNEL:3;
X    volatile const  uint32_t  CHANNEL:3;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __I  uint32_t  VALID:8;
X    volatile const  uint32_t  VALID:8;
N    __I  uint32_t  OVERRUN:8;
X    volatile const  uint32_t  OVERRUN:8;
N    __I  uint32_t  RESERVE1:8;
X    volatile const  uint32_t  RESERVE1:8;
N} ADC_ADSR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  CALEN:1;
X    volatile uint32_t  CALEN:1;
N    __I  uint32_t  CALDONE:1;
X    volatile const  uint32_t  CALDONE:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} ADC_ADCALR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  AD_PDMA:12;
X    volatile uint32_t  AD_PDMA:12;
N    __I  uint32_t  RESERVE:20;
X    volatile const  uint32_t  RESERVE:20;
N} ADC_ADPDMA_T;
N
Ntypedef struct
N{
N    union {
N        __I uint32_t u32ADDR[8];
X        volatile const uint32_t u32ADDR[8];
N        struct {
N            __I  uint32_t  RSLT:16;
X            volatile const  uint32_t  RSLT:16;
N            __I  uint32_t  OVERRUN:1;
X            volatile const  uint32_t  OVERRUN:1;
N            __I  uint32_t  VALID:1;
X            volatile const  uint32_t  VALID:1;
N            __I  uint32_t  RESERVE1:14;
X            volatile const  uint32_t  RESERVE1:14;
N        } ADDR[8];
N    };
N    
N    union {
N        __IO uint32_t u32ADCR;
X        volatile uint32_t u32ADCR;
N        struct {
N            __IO uint32_t  ADEN:1;
X            volatile uint32_t  ADEN:1;
N            __IO uint32_t  ADIE:1;
X            volatile uint32_t  ADIE:1;
N            __IO uint32_t  ADMD:2;
X            volatile uint32_t  ADMD:2;
N            __IO uint32_t  TRGS:2;
X            volatile uint32_t  TRGS:2;
N            __IO uint32_t  TRGCOND:2;
X            volatile uint32_t  TRGCOND:2;
N            __IO uint32_t  TRGEN:1;
X            volatile uint32_t  TRGEN:1;
N            __IO uint32_t  PTEN:1;
X            volatile uint32_t  PTEN:1;
N            __IO uint32_t  DIFFEN:1;
X            volatile uint32_t  DIFFEN:1;
N            __IO uint32_t  ADST:1;
X            volatile uint32_t  ADST:1;
N            __I  uint32_t  RESERVE0:19;
X            volatile const  uint32_t  RESERVE0:19;
N            __IO uint32_t  DMOF:1;
X            volatile uint32_t  DMOF:1;
N        } ADCR;
N    };
N    
N    union {
N        __IO uint32_t u32ADCHER;
X        volatile uint32_t u32ADCHER;
N        struct {
N            __IO uint32_t  CHEN:8;
X            volatile uint32_t  CHEN:8;
N            __IO uint32_t  PRESEL:2;
X            volatile uint32_t  PRESEL:2;
N            __I  uint32_t  RESERVE:22;
X            volatile const  uint32_t  RESERVE:22;
N        } ADCHER;
N    };
N    
N    union {
N        __IO uint32_t u32ADCMPR[2];
X        volatile uint32_t u32ADCMPR[2];
N        struct {
N            __IO uint32_t  CMPEN:1;
X            volatile uint32_t  CMPEN:1;
N            __IO uint32_t  CMPIE:1;
X            volatile uint32_t  CMPIE:1;
N            __IO uint32_t  CMPCOND:1;
X            volatile uint32_t  CMPCOND:1;
N            __IO uint32_t  CMPCH:3;
X            volatile uint32_t  CMPCH:3;
N            __I  uint32_t  RESERVE0:2;
X            volatile const  uint32_t  RESERVE0:2;
N            __IO uint32_t  CMPMATCNT:4;
X            volatile uint32_t  CMPMATCNT:4;
N            __I  uint32_t  RESERVE1:4;
X            volatile const  uint32_t  RESERVE1:4;
N            __IO uint32_t  CMPD:12;
X            volatile uint32_t  CMPD:12;
N            __I  uint32_t  RESERVE2:4;
X            volatile const  uint32_t  RESERVE2:4;
N        } ADCMPR[2];
N    };
N    
N    union {
N        __IO uint32_t u32ADSR;
X        volatile uint32_t u32ADSR;
N        struct {
N            __IO uint32_t  ADF:1;
X            volatile uint32_t  ADF:1;
N            __IO uint32_t  CMPF0:1;
X            volatile uint32_t  CMPF0:1;
N            __IO uint32_t  CMPF1:1;
X            volatile uint32_t  CMPF1:1;
N            __I  uint32_t  BUSY:1;
X            volatile const  uint32_t  BUSY:1;
N            __I  uint32_t  CHANNEL:3;
X            volatile const  uint32_t  CHANNEL:3;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __I  uint32_t  VALID:8;
X            volatile const  uint32_t  VALID:8;
N            __I  uint32_t  OVERRUN:8;
X            volatile const  uint32_t  OVERRUN:8;
N            __I  uint32_t  RESERVE1:8;
X            volatile const  uint32_t  RESERVE1:8;
N        } ADSR;
N    };
N    
N    union {
N        __IO uint32_t u32ADCALR;
X        volatile uint32_t u32ADCALR;
N        struct {
N            __IO uint32_t  CALEN:1;
X            volatile uint32_t  CALEN:1;
N            __I  uint32_t  CALDONE:1;
X            volatile const  uint32_t  CALDONE:1;
N            __I  uint32_t  RESERVE:30;
X            volatile const  uint32_t  RESERVE:30;
N        } ADCALR;
N    };
N    
N    __I uint32_t RESERVE0;
X    volatile const uint32_t RESERVE0;
N    __I uint32_t RESERVE1;
X    volatile const uint32_t RESERVE1;
N    
N    union {
N        __IO uint32_t u32ADPDMA;
X        volatile uint32_t u32ADPDMA;
N        struct {
N            __IO uint32_t  AD_PDMA:12;
X            volatile uint32_t  AD_PDMA:12;
N            __I  uint32_t  RESERVE:20;
X            volatile const  uint32_t  RESERVE:20;
N        } ADPDMA;
N    };
N} ADC_T;
N
N/* ADDR Bit Field Definitions */
N#define ADC_ADDR_VALID_Pos      17
N#define ADC_ADDR_VALID_Msk      (1ul << ADC_ADDR_VALID_Pos)
N
N#define ADC_ADDR_OVERRUN_Pos    16
N#define ADC_ADDR_OVERRUN_Msk    (1ul << ADC_ADDR_OVERRUN_Pos)
N
N#define ADC_ADDR_RSLT_Pos       0
N#define ADC_ADDR_RSLT_Msk       (0xFFFFul << ADC_ADDR_RSLT_Pos)
N
N/* ADCR Bit Field Definitions */
N#define ADC_ADCR_DMOF_Pos       31
N#define ADC_ADCR_DMOF_Msk       (1ul << ADC_ADCR_DMOF_Pos)
N
N#define ADC_ADCR_ADST_Pos       11
N#define ADC_ADCR_ADST_Msk       (1ul << ADC_ADCR_ADST_Pos)
N
N#define ADC_ADCR_DIFFEN_Pos     10
N#define ADC_ADCR_DIFFEN_Msk     (1ul << ADC_ADCR_DIFFEN_Pos)
N
N#define ADC_ADCR_PTEN_Pos       9
N#define ADC_ADCR_PTEN_Msk       (1ul << ADC_ADCR_PTEN_Pos)
N
N#define ADC_ADCR_TRGEN_Pos      8
N#define ADC_ADCR_TRGEN_Msk      (1ul << ADC_ADCR_TRGEN_Pos)
N
N#define ADC_ADCR_TRGCOND_Pos    6
N#define ADC_ADCR_TRGCOND_Msk    (3ul << ADC_ADCR_TRGCOND_Pos)
N
N#define ADC_ADCR_TRGS_Pos       4
N#define ADC_ADCR_TRGS_Msk       (3ul << ADC_ADCR_TRGS_Pos)
N
N#define ADC_ADCR_ADMD_Pos       2
N#define ADC_ADCR_ADMD_Msk       (3ul << ADC_ADCR_ADMD_Pos)
N
N#define ADC_ADCR_ADIE_Pos       1
N#define ADC_ADCR_ADIE_Msk       (1ul << ADC_ADCR_ADIE_Pos)
N
N#define ADC_ADCR_ADEN_Pos       0
N#define ADC_ADCR_ADEN_Msk       (1ul << ADC_ADCR_ADEN_Pos)
N
N/* ADCHER Bit Field Definitions */
N#define ADC_ADCHER_PRESEL_Pos   8
N#define ADC_ADCHER_PRESEL_Msk   (3ul << ADC_ADCHER_PRESEL_Pos)
N
N#define ADC_ADCHER_CHEN_Pos     0
N#define ADC_ADCHER_CHEN_Msk     (0xFFul << ADC_ADCHER_CHEN_Pos)
N
N/* ADCMPR Bit Field Definitions */
N#define ADC_ADCMPR_CMPD_Pos        16
N#define ADC_ADCMPR_CMPD_Msk        (0xFFFul << ADC_ADCMPR_CMPD_Pos)
N
N#define ADC_ADCMPR_CMPMATCNT_Pos   8
N#define ADC_ADCMPR_CMPMATCNT_Msk   (0xFul << ADC_ADCMPR_CMPMATCNT_Pos)
N
N#define ADC_ADCMPR_CMPCH_Pos       3
N#define ADC_ADCMPR_CMPCH_Msk       (7ul << ADC_ADCMPR_CMPCH_Pos)
N
N#define ADC_ADCMPR_CMPCOND_Pos     2
N#define ADC_ADCMPR_CMPCOND_Msk     (1ul << ADC_ADCMPR_CMPCOND_Pos)
N
N#define ADC_ADCMPR_CMPIE_Pos       1
N#define ADC_ADCMPR_CMPIE_Msk       (1ul << ADC_ADCMPR_CMPIE_Pos)
N
N#define ADC_ADCMPR_CMPEN_Pos       0
N#define ADC_ADCMPR_CMPEN_Msk       (1ul << ADC_ADCMPR_CMPEN_Pos)
N
N/* ADSR Bit Field Definitions */
N#define ADC_ADSR_OVERRUN_Pos       16
N#define ADC_ADSR_OVERRUN_Msk       (0xFFul << ADC_ADSR_OVERRUN_Pos)
N
N#define ADC_ADSR_VALID_Pos         8
N#define ADC_ADSR_VALID_Msk         (0xFFul << ADC_ADSR_VALID_Pos)
N
N#define ADC_ADSR_CHANNEL_Pos       4
N#define ADC_ADSR_CHANNEL_Msk       (7ul << ADC_ADSR_CHANNEL_Pos)
N
N#define ADC_ADSR_BUSY_Pos          3
N#define ADC_ADSR_BUSY_Msk          (1ul << ADC_ADSR_BUSY_Pos)
N
N#define ADC_ADSR_CMPF1_Pos         2
N#define ADC_ADSR_CMPF1_Msk         (1ul << ADC_ADSR_CMPF1_Pos)
N
N#define ADC_ADSR_CMPF0_Pos         1
N#define ADC_ADSR_CMPF0_Msk         (1ul << ADC_ADSR_CMPF0_Pos)
N
N#define ADC_ADSR_ADF_Pos           0
N#define ADC_ADSR_ADF_Msk           (1ul << ADC_ADSR_ADF_Pos)
N
N/* ADCALR Bit Field Definitions */
N#define ADC_ADCALR_CALDONE_Pos     1
N#define ADC_ADCALR_CALDONE_Msk     (1ul << ADC_ADCALR_CALDONE_Pos)
N
N#define ADC_ADCALR_CALEN_Pos       0
N#define ADC_ADCALR_CALEN_Msk       (1ul << ADC_ADCALR_CALEN_Pos)
N
N/* ADPDMA Bit Field Definitions */
N#define ADC_ADPDMA_AD_PDMA_Pos     0
N#define ADC_ADPDMA_AD_PDMA_Msk     (1ul << ADC_ADPDMA_AD_PDMA_Pos)
N
N
N/*---------------------- Analog Comparator Controller -------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  CMPEN:1;
X    volatile uint32_t  CMPEN:1;
N    __IO uint32_t  CMPIE:1;
X    volatile uint32_t  CMPIE:1;
N    __IO uint32_t  CMP_HYSEN:1;
X    volatile uint32_t  CMP_HYSEN:1;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  CMPCN:1;
X    volatile uint32_t  CMPCN:1;
N    __I  uint32_t  RESERVE1:27;
X    volatile const  uint32_t  RESERVE1:27;
N} ACMP_CMPCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  CMPF0:1;
X    volatile uint32_t  CMPF0:1;
N    __IO uint32_t  CMPF1:1;
X    volatile uint32_t  CMPF1:1;
N    __I  uint32_t  CO0:1;
X    volatile const  uint32_t  CO0:1;
N    __I  uint32_t  CO1:1;
X    volatile const  uint32_t  CO1:1;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} ACMP_CMPSR_T;
N
Ntypedef struct
N{
N    union {
N        __IO uint32_t u32CMPCR[2];
X        volatile uint32_t u32CMPCR[2];
N        struct {
N            __IO uint32_t  CMPEN:1;
X            volatile uint32_t  CMPEN:1;
N            __IO uint32_t  CMPIE:1;
X            volatile uint32_t  CMPIE:1;
N            __IO uint32_t  CMP_HYSEN:1;
X            volatile uint32_t  CMP_HYSEN:1;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  CMPCN:1;
X            volatile uint32_t  CMPCN:1;
N            __I  uint32_t  RESERVE1:27;
X            volatile const  uint32_t  RESERVE1:27;
N        } CMPCR[2];
N    };
N    
N    union {
N        __IO uint32_t u32CMPSR;
X        volatile uint32_t u32CMPSR;
N        struct {
N            __IO uint32_t  CMPF0:1;
X            volatile uint32_t  CMPF0:1;
N            __IO uint32_t  CMPF1:1;
X            volatile uint32_t  CMPF1:1;
N            __I  uint32_t  CO0:1;
X            volatile const  uint32_t  CO0:1;
N            __I  uint32_t  CO1:1;
X            volatile const  uint32_t  CO1:1;
N            __I  uint32_t  RESERVE:28;
X            volatile const  uint32_t  RESERVE:28;
N        } CMPSR;
N    };
N} ACMP_T;
N
N
N/* CMPCR Bit Field Definitions */
N#define ACMP_CMPCR_CMPCN_Pos       4
N#define ACMP_CMPCR_CMPCN_Msk       (1ul << ACMP_CMPCR_CMPCN_Pos)
N
N#define ACMP_CMPCR_CMP_HYSEN_Pos   2
N#define ACMP_CMPCR_CMP_HYSEN_Msk   (1ul << ACMP_CMPCR_CMP_HYSEN_Pos)
N
N#define ACMP_CMPCR_CMPIE_Pos       1
N#define ACMP_CMPCR_CMPIE_Msk       (1ul << ACMP_CMPCR_CMPIE_Pos)
N
N#define ACMP_CMPCR_CMPEN_Pos       0
N#define ACMP_CMPCR_CMPEN_Msk       (1ul << ACMP_CMPCR_CMPEN_Pos)
N
N/* CMPSR Bit Field Definitions */
N#define ACMP_CMPSR_CO1_Pos     3
N#define ACMP_CMPSR_CO1_Msk     (1ul << ACMP_CMPSR_CO1_Pos)
N
N#define ACMP_CMPSR_CO0_Pos     2
N#define ACMP_CMPSR_CO0_Msk     (1ul << ACMP_CMPSR_CO0_Pos)
N
N#define ACMP_CMPSR_CMPF1_Pos   1
N#define ACMP_CMPSR_CMPF1_Msk   (1ul << ACMP_CMPSR_CMPF1_Pos)
N
N#define ACMP_CMPSR_CMPF0_Pos   0
N#define ACMP_CMPSR_CMPF0_Msk   (1ul << ACMP_CMPSR_CMPF0_Pos)
N
N
N/*---------------------------- Clock Controller ------------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  XTL12M_EN:1;
X    volatile uint32_t  XTL12M_EN:1;
N    __IO uint32_t  XTL32K_EN:1;
X    volatile uint32_t  XTL32K_EN:1;
N    __IO uint32_t  OSC22M_EN:1;
X    volatile uint32_t  OSC22M_EN:1;
N    __IO uint32_t  OSC10K_EN:1;
X    volatile uint32_t  OSC10K_EN:1;
N    __IO uint32_t  PD_WU_DLY:1;
X    volatile uint32_t  PD_WU_DLY:1;
N    __IO uint32_t  PD_WU_INT_EN:1;
X    volatile uint32_t  PD_WU_INT_EN:1;
N    __IO uint32_t  PD_WU_STS:1;
X    volatile uint32_t  PD_WU_STS:1;
N    __IO uint32_t  PWR_DOWN_EN:1;
X    volatile uint32_t  PWR_DOWN_EN:1;
N    __IO uint32_t  PD_WAIT_CPU:1;
X    volatile uint32_t  PD_WAIT_CPU:1;
N    __I  uint32_t  RESERVE:23;
X    volatile const  uint32_t  RESERVE:23;
N} SYSCLK_PWRCON_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  PDMA_EN:1;
X    volatile uint32_t  PDMA_EN:1;
N    __IO uint32_t  ISP_EN:1;
X    volatile uint32_t  ISP_EN:1;
N    __IO uint32_t  EBI_EN:1;
X    volatile uint32_t  EBI_EN:1;
N    __I  uint32_t  RESERVE1:28;
X    volatile const  uint32_t  RESERVE1:28;
N} SYSCLK_AHBCLK_T;
N
Ntypedef struct
N{
N    __IO uint32_t  WDT_EN:1;
X    volatile uint32_t  WDT_EN:1;
N    __IO uint32_t  RTC_EN:1;
X    volatile uint32_t  RTC_EN:1;
N    __IO uint32_t  TMR0_EN:1;
X    volatile uint32_t  TMR0_EN:1;
N    __IO uint32_t  TMR1_EN:1;
X    volatile uint32_t  TMR1_EN:1;
N    __IO uint32_t  TMR2_EN:1;
X    volatile uint32_t  TMR2_EN:1;
N    __IO uint32_t  TMR3_EN:1;
X    volatile uint32_t  TMR3_EN:1;
N    __IO uint32_t  FDIV_EN:1;
X    volatile uint32_t  FDIV_EN:1;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  I2C0_EN:1;
X    volatile uint32_t  I2C0_EN:1;
N    __IO uint32_t  I2C1_EN:1;
X    volatile uint32_t  I2C1_EN:1;
N    __I  uint32_t  RESERVE1:2;
X    volatile const  uint32_t  RESERVE1:2;
N    __IO uint32_t  SPI0_EN:1;
X    volatile uint32_t  SPI0_EN:1;
N    __IO uint32_t  SPI1_EN:1;
X    volatile uint32_t  SPI1_EN:1;
N    __IO uint32_t  SPI2_EN:1;
X    volatile uint32_t  SPI2_EN:1;
N    __IO uint32_t  SPI3_EN:1;
X    volatile uint32_t  SPI3_EN:1;
N    __IO uint32_t  UART0_EN:1;
X    volatile uint32_t  UART0_EN:1;
N    __IO uint32_t  UART1_EN:1;
X    volatile uint32_t  UART1_EN:1;
N    __IO uint32_t  UART2_EN:1;
X    volatile uint32_t  UART2_EN:1;
N    __I  uint32_t  RESERVE2:1;
X    volatile const  uint32_t  RESERVE2:1;
N    __IO uint32_t  PWM01_EN:1;
X    volatile uint32_t  PWM01_EN:1;
N    __IO uint32_t  PWM23_EN:1;
X    volatile uint32_t  PWM23_EN:1;
N    __IO uint32_t  PWM45_EN:1;
X    volatile uint32_t  PWM45_EN:1;
N    __IO uint32_t  PWM67_EN:1;
X    volatile uint32_t  PWM67_EN:1;
N    __IO uint32_t  CAN0_EN:1;
X    volatile uint32_t  CAN0_EN:1;
N    __I  uint32_t  RESERVE3:2;
X    volatile const  uint32_t  RESERVE3:2;
N    __IO uint32_t  USBD_EN:1;
X    volatile uint32_t  USBD_EN:1;
N    __IO uint32_t  ADC_EN:1;
X    volatile uint32_t  ADC_EN:1;
N    __IO uint32_t  I2S_EN:1;
X    volatile uint32_t  I2S_EN:1;
N    __IO uint32_t  ACMP_EN:1;
X    volatile uint32_t  ACMP_EN:1;
N    __IO uint32_t  PS2_EN:1;
X    volatile uint32_t  PS2_EN:1;
N} SYSCLK_APBCLK_T;
N
Ntypedef struct
N{
N    __I  uint32_t  XTL12M_STB:1;
X    volatile const  uint32_t  XTL12M_STB:1;
N    __I  uint32_t  XTL32K_STB:1;
X    volatile const  uint32_t  XTL32K_STB:1;
N    __I  uint32_t  PLL_STB:1;
X    volatile const  uint32_t  PLL_STB:1;
N    __I  uint32_t  OSC10K_STB:1;
X    volatile const  uint32_t  OSC10K_STB:1;
N    __I  uint32_t  OSC22M_STB:1;
X    volatile const  uint32_t  OSC22M_STB:1;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  CLK_SW_FAIL:1;
X    volatile uint32_t  CLK_SW_FAIL:1;
N    __I  uint32_t  RESERVE1:24;
X    volatile const  uint32_t  RESERVE1:24;
N} SYSCLK_CLKSTATUS_T;
N
Ntypedef struct
N{
N    __IO uint32_t  HCLK_S:3;
X    volatile uint32_t  HCLK_S:3;
N    __IO uint32_t  STCLK_S:3;
X    volatile uint32_t  STCLK_S:3;
N    __I  uint32_t  RESERVE:26;
X    volatile const  uint32_t  RESERVE:26;
N} SYSCLK_CLKSEL0_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  WDT_S:2;
X    volatile uint32_t  WDT_S:2;
N    __IO uint32_t  ADC_S:2;
X    volatile uint32_t  ADC_S:2;
N    __I  uint32_t  RESERVE1:4;
X    volatile const  uint32_t  RESERVE1:4;
N    __IO uint32_t  TMR0_S:3;
X    volatile uint32_t  TMR0_S:3;
N    __I  uint32_t  RESERVE2:1;
X    volatile const  uint32_t  RESERVE2:1;
N    __IO uint32_t  TMR1_S:3;
X    volatile uint32_t  TMR1_S:3;
N    __I  uint32_t  RESERVE3:1;
X    volatile const  uint32_t  RESERVE3:1;
N    __IO uint32_t  TMR2_S:3;
X    volatile uint32_t  TMR2_S:3;
N    __I  uint32_t  RESERVE4:1;
X    volatile const  uint32_t  RESERVE4:1;
N    __IO uint32_t  TMR3_S:3;
X    volatile uint32_t  TMR3_S:3;
N    __I  uint32_t  RESERVE5:1;
X    volatile const  uint32_t  RESERVE5:1;
N    __IO uint32_t  UART_S:2;
X    volatile uint32_t  UART_S:2;
N    __I  uint32_t  RESERVE6:2;
X    volatile const  uint32_t  RESERVE6:2;
N    __IO uint32_t  PWM01_S:2;
X    volatile uint32_t  PWM01_S:2;
N    __IO uint32_t  PWM23_S:2;
X    volatile uint32_t  PWM23_S:2;
N} SYSCLK_CLKSEL1_T;
N
Ntypedef struct
N{
N    __IO uint32_t  I2S_S:2;
X    volatile uint32_t  I2S_S:2;
N    __IO uint32_t  FRQDIV_S:2;
X    volatile uint32_t  FRQDIV_S:2;
N    __IO uint32_t  PWM45_S:2;
X    volatile uint32_t  PWM45_S:2;
N    __IO uint32_t  PWM67_S:2;
X    volatile uint32_t  PWM67_S:2;
N    __I  uint32_t  RESERVE:24;
X    volatile const  uint32_t  RESERVE:24;
N} SYSCLK_CLKSEL2_T;
N
Ntypedef struct
N{
N    __IO uint32_t  HCLK_N:4;
X    volatile uint32_t  HCLK_N:4;
N    __IO uint32_t  USB_N:4;
X    volatile uint32_t  USB_N:4;
N    __IO uint32_t  UART_N:4;
X    volatile uint32_t  UART_N:4;
N    __I  uint32_t  RESERVE0:4;
X    volatile const  uint32_t  RESERVE0:4;
N    __IO uint32_t  ADC_N:8;
X    volatile uint32_t  ADC_N:8;
N    __I  uint32_t  RESERVE1:8;
X    volatile const  uint32_t  RESERVE1:8;
N} SYSCLK_CLKDIV_T;
N
Ntypedef struct
N{
N    __IO uint32_t  FB_DV:9;
X    volatile uint32_t  FB_DV:9;
N    __IO uint32_t  IN_DV:5;
X    volatile uint32_t  IN_DV:5;
N    __IO uint32_t  OUT_DV:2;
X    volatile uint32_t  OUT_DV:2;
N    __IO uint32_t  PD:1;
X    volatile uint32_t  PD:1;
N    __IO uint32_t  BP:1;
X    volatile uint32_t  BP:1;
N    __IO uint32_t  OE:1;
X    volatile uint32_t  OE:1;
N    __IO uint32_t  PLL_SRC:1;
X    volatile uint32_t  PLL_SRC:1;
N    __I  uint32_t  RESERVE:12;
X    volatile const  uint32_t  RESERVE:12;
N} SYSCLK_PLLCON_T;
N
N
Ntypedef struct
N{    
N    __IO uint32_t  FSEL:4;
X    volatile uint32_t  FSEL:4;
N    __IO uint32_t  FDIV_EN:1;
X    volatile uint32_t  FDIV_EN:1;
N    __I  uint32_t  RESERVE:27;
X    volatile const  uint32_t  RESERVE:27;
N} SYSCLK_FRQDIV_T;
N
Ntypedef struct
N{
N    union 
N    {
N        __IO uint32_t u32PWRCON;
X        volatile uint32_t u32PWRCON;
N        
N        struct 
N        {
N            __IO uint32_t  XTL12M_EN:1;
X            volatile uint32_t  XTL12M_EN:1;
N            __IO uint32_t  XTL32K_EN:1;
X            volatile uint32_t  XTL32K_EN:1;
N            __IO uint32_t  OSC22M_EN:1;
X            volatile uint32_t  OSC22M_EN:1;
N            __IO uint32_t  OSC10K_EN:1;
X            volatile uint32_t  OSC10K_EN:1;
N            __IO uint32_t  PD_WU_DLY:1;
X            volatile uint32_t  PD_WU_DLY:1;
N            __IO uint32_t  PD_WU_INT_EN:1;
X            volatile uint32_t  PD_WU_INT_EN:1;
N            __IO uint32_t  PD_WU_STS:1;
X            volatile uint32_t  PD_WU_STS:1;
N            __IO uint32_t  PWR_DOWN_EN:1;
X            volatile uint32_t  PWR_DOWN_EN:1;
N            __IO uint32_t  PD_WAIT_CPU:1;
X            volatile uint32_t  PD_WAIT_CPU:1;
N            __I  uint32_t  RESERVE:23;
X            volatile const  uint32_t  RESERVE:23;
N        } PWRCON;
N    };    
N    
N    union 
N    {
N        __IO uint32_t u32AHBCLK;
X        volatile uint32_t u32AHBCLK;
N        
N        struct 
N        {
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  PDMA_EN:1;
X            volatile uint32_t  PDMA_EN:1;
N            __IO uint32_t  ISP_EN:1;
X            volatile uint32_t  ISP_EN:1;
N            __IO uint32_t  EBI_EN:1;
X            volatile uint32_t  EBI_EN:1;
N            __I  uint32_t  RESERVE1:28;
X            volatile const  uint32_t  RESERVE1:28;
N        } AHBCLK;
N    };    
N
N    union 
N    {
N        __IO uint32_t u32APBCLK;
X        volatile uint32_t u32APBCLK;
N        
N        struct 
N        {
N            __IO uint32_t  WDT_EN:1;
X            volatile uint32_t  WDT_EN:1;
N            __IO uint32_t  RTC_EN:1;
X            volatile uint32_t  RTC_EN:1;
N            __IO uint32_t  TMR0_EN:1;
X            volatile uint32_t  TMR0_EN:1;
N            __IO uint32_t  TMR1_EN:1;
X            volatile uint32_t  TMR1_EN:1;
N            __IO uint32_t  TMR2_EN:1;
X            volatile uint32_t  TMR2_EN:1;
N            __IO uint32_t  TMR3_EN:1;
X            volatile uint32_t  TMR3_EN:1;
N            __IO uint32_t  FDIV_EN:1;
X            volatile uint32_t  FDIV_EN:1;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  I2C0_EN:1;
X            volatile uint32_t  I2C0_EN:1;
N            __IO uint32_t  I2C1_EN:1;
X            volatile uint32_t  I2C1_EN:1;
N            __I  uint32_t  RESERVE1:2;
X            volatile const  uint32_t  RESERVE1:2;
N            __IO uint32_t  SPI0_EN:1;
X            volatile uint32_t  SPI0_EN:1;
N            __IO uint32_t  SPI1_EN:1;
X            volatile uint32_t  SPI1_EN:1;
N            __IO uint32_t  SPI2_EN:1;
X            volatile uint32_t  SPI2_EN:1;
N            __IO uint32_t  SPI3_EN:1;
X            volatile uint32_t  SPI3_EN:1;
N            __IO uint32_t  UART0_EN:1;
X            volatile uint32_t  UART0_EN:1;
N            __IO uint32_t  UART1_EN:1;
X            volatile uint32_t  UART1_EN:1;
N            __IO uint32_t  UART2_EN:1;
X            volatile uint32_t  UART2_EN:1;
N            __I  uint32_t  RESERVE2:1;
X            volatile const  uint32_t  RESERVE2:1;
N            __IO uint32_t  PWM01_EN:1;
X            volatile uint32_t  PWM01_EN:1;
N            __IO uint32_t  PWM23_EN:1;
X            volatile uint32_t  PWM23_EN:1;
N            __IO uint32_t  PWM45_EN:1;
X            volatile uint32_t  PWM45_EN:1;
N            __IO uint32_t  PWM67_EN:1;
X            volatile uint32_t  PWM67_EN:1;
N            __IO uint32_t  CAN0_EN:1;
X            volatile uint32_t  CAN0_EN:1;
N            __I  uint32_t  RESERVE3:2;
X            volatile const  uint32_t  RESERVE3:2;
N            __IO uint32_t  USBD_EN:1;
X            volatile uint32_t  USBD_EN:1;
N            __IO uint32_t  ADC_EN:1;
X            volatile uint32_t  ADC_EN:1;
N            __IO uint32_t  I2S_EN:1;
X            volatile uint32_t  I2S_EN:1;
N            __IO uint32_t  ACMP_EN:1;
X            volatile uint32_t  ACMP_EN:1;
N            __IO uint32_t  PS2_EN:1;
X            volatile uint32_t  PS2_EN:1;
N        } APBCLK;
N    };          
N
N    union 
N    {
N        __IO uint32_t u32CLKSTATUS;
X        volatile uint32_t u32CLKSTATUS;
N        
N        struct 
N        {
N            __I  uint32_t  XTL12M_STB:1;
X            volatile const  uint32_t  XTL12M_STB:1;
N            __I  uint32_t  XTL32K_STB:1;
X            volatile const  uint32_t  XTL32K_STB:1;
N            __I  uint32_t  PLL_STB:1;
X            volatile const  uint32_t  PLL_STB:1;
N            __I  uint32_t  OSC10K_STB:1;
X            volatile const  uint32_t  OSC10K_STB:1;
N            __I  uint32_t  OSC22M_STB:1;
X            volatile const  uint32_t  OSC22M_STB:1;
N            __I  uint32_t  RESERVE0:2;
X            volatile const  uint32_t  RESERVE0:2;
N            __IO uint32_t  CLK_SW_FAIL:1;
X            volatile uint32_t  CLK_SW_FAIL:1;
N            __I  uint32_t  RESERVE1:24;
X            volatile const  uint32_t  RESERVE1:24;
N        } CLKSTATUS;
N    };  
N
N    union 
N    {
N        __IO uint32_t u32CLKSEL0;
X        volatile uint32_t u32CLKSEL0;
N        
N        struct 
N        {
N            __IO uint32_t  HCLK_S:3;
X            volatile uint32_t  HCLK_S:3;
N            __IO uint32_t  STCLK_S:3;
X            volatile uint32_t  STCLK_S:3;
N            __I  uint32_t  RESERVE:26;
X            volatile const  uint32_t  RESERVE:26;
N        } CLKSEL0;
N    };  
N
N    union 
N    {
N        __IO uint32_t u32CLKSEL1;
X        volatile uint32_t u32CLKSEL1;
N        
N        struct 
N        {
N            __IO uint32_t  WDT_S:2;
X            volatile uint32_t  WDT_S:2;
N            __IO uint32_t  ADC_S:2;
X            volatile uint32_t  ADC_S:2;
N            __I  uint32_t  RESERVE1:4;
X            volatile const  uint32_t  RESERVE1:4;
N            __IO uint32_t  TMR0_S:3;
X            volatile uint32_t  TMR0_S:3;
N            __I  uint32_t  RESERVE2:1;
X            volatile const  uint32_t  RESERVE2:1;
N            __IO uint32_t  TMR1_S:3;
X            volatile uint32_t  TMR1_S:3;
N            __I  uint32_t  RESERVE3:1;
X            volatile const  uint32_t  RESERVE3:1;
N            __IO uint32_t  TMR2_S:3;
X            volatile uint32_t  TMR2_S:3;
N            __I  uint32_t  RESERVE4:1;
X            volatile const  uint32_t  RESERVE4:1;
N            __IO uint32_t  TMR3_S:3;
X            volatile uint32_t  TMR3_S:3;
N            __I  uint32_t  RESERVE5:1;
X            volatile const  uint32_t  RESERVE5:1;
N            __IO uint32_t  UART_S:2;
X            volatile uint32_t  UART_S:2;
N            __I  uint32_t  RESERVE6:2;
X            volatile const  uint32_t  RESERVE6:2;
N            __IO uint32_t  PWM01_S:2;
X            volatile uint32_t  PWM01_S:2;
N            __IO uint32_t  PWM23_S:2;
X            volatile uint32_t  PWM23_S:2;
N        } CLKSEL1;
N    };  
N
N    union 
N    {
N        __IO uint32_t u32CLKDIV;
X        volatile uint32_t u32CLKDIV;
N        
N        struct 
N        {
N            __IO uint32_t  HCLK_N:4;
X            volatile uint32_t  HCLK_N:4;
N            __IO uint32_t  USB_N:4;
X            volatile uint32_t  USB_N:4;
N            __IO uint32_t  UART_N:4;
X            volatile uint32_t  UART_N:4;
N            __I  uint32_t  RESERVE0:4;
X            volatile const  uint32_t  RESERVE0:4;
N            __IO uint32_t  ADC_N:8;
X            volatile uint32_t  ADC_N:8;
N            __I  uint32_t  RESERVE1:8;
X            volatile const  uint32_t  RESERVE1:8;
N        } CLKDIV;
N    };  
N
N    union 
N    {
N        __IO uint32_t u32CLKSEL2;
X        volatile uint32_t u32CLKSEL2;
N        
N        struct 
N        {
N            __IO uint32_t  I2S_S:2;
X            volatile uint32_t  I2S_S:2;
N            __IO uint32_t  FRQDIV_S:2;
X            volatile uint32_t  FRQDIV_S:2;
N            __IO uint32_t  PWM45_S:2;
X            volatile uint32_t  PWM45_S:2;
N            __IO uint32_t  PWM67_S:2;
X            volatile uint32_t  PWM67_S:2;
N            __I  uint32_t  RESERVE:24;
X            volatile const  uint32_t  RESERVE:24;
N        } CLKSEL2;
N    };  
N    
N    union 
N    {
N        __IO uint32_t u32PLLCON;
X        volatile uint32_t u32PLLCON;
N        
N        struct 
N        {
N            __IO uint32_t  FB_DV:9;
X            volatile uint32_t  FB_DV:9;
N            __IO uint32_t  IN_DV:5;
X            volatile uint32_t  IN_DV:5;
N            __IO uint32_t  OUT_DV:2;
X            volatile uint32_t  OUT_DV:2;
N            __IO uint32_t  PD:1;
X            volatile uint32_t  PD:1;
N            __IO uint32_t  BP:1;
X            volatile uint32_t  BP:1;
N            __IO uint32_t  OE:1;
X            volatile uint32_t  OE:1;
N            __IO uint32_t  PLL_SRC:1;
X            volatile uint32_t  PLL_SRC:1;
N            __I  uint32_t  RESERVE:12;
X            volatile const  uint32_t  RESERVE:12;
N        } PLLCON;
N    };  
N    
N    union 
N    {
N        __IO uint32_t u32FRQDIV;
X        volatile uint32_t u32FRQDIV;
N        
N        struct 
N        {
N            __IO uint32_t  FSEL:4;
X            volatile uint32_t  FSEL:4;
N            __IO uint32_t  FDIV_EN:1;
X            volatile uint32_t  FDIV_EN:1;
N            __I  uint32_t  RESERVE:27;
X            volatile const  uint32_t  RESERVE:27;
N        } FRQDIV;
N    };      
N} SYSCLK_T;
N
N/* SYSCLK PWRCON Bit Field Definitions */
N#define SYSCLK_PWRCON_PD_WAIT_CPU_Pos           8
N#define SYSCLK_PWRCON_PD_WAIT_CPU_Msk           (1ul << SYSCLK_PWRCON_PD_WAIT_CPU_Pos)
N
N#define SYSCLK_PWRCON_PWR_DOWN_EN_Pos           7
N#define SYSCLK_PWRCON_PWR_DOWN_EN_Msk           (1ul << SYSCLK_PWRCON_PWR_DOWN_EN_Pos)
N
N#define SYSCLK_PWRCON_PD_WU_STS_Pos             6
N#define SYSCLK_PWRCON_PD_WU_STS_Msk             (1ul << SYSCLK_PWRCON_PD_WU_STS_Pos)
N
N#define SYSCLK_PWRCON_PD_WU_INT_EN_Pos          5
N#define SYSCLK_PWRCON_PD_WU_INT_EN_Msk          (1ul << SYSCLK_PWRCON_PD_WU_INT_EN_Pos)
N
N#define SYSCLK_PWRCON_PD_WU_DLY_Pos             4
N#define SYSCLK_PWRCON_PD_WU_DLY_Msk             (1ul << SYSCLK_PWRCON_PD_WU_DLY_Pos)
N
N#define SYSCLK_PWRCON_OSC10K_EN_Pos             3
N#define SYSCLK_PWRCON_OSC10K_EN_Msk             (1ul << SYSCLK_PWRCON_OSC10K_EN_Pos)
N
N#define SYSCLK_PWRCON_OSC22M_EN_Pos             2
N#define SYSCLK_PWRCON_OSC22M_EN_Msk             (1ul << SYSCLK_PWRCON_OSC22M_EN_Pos)
N
N#define SYSCLK_PWRCON_XTL32K_EN_Pos             1
N#define SYSCLK_PWRCON_XTL32K_EN_Msk             (1ul << SYSCLK_PWRCON_XTL32K_EN_Pos)
N
N#define SYSCLK_PWRCON_XTL12M_EN_Pos             0
N#define SYSCLK_PWRCON_XTL12M_EN_Msk             (1ul << SYSCLK_PWRCON_XTL12M_EN_Pos)
N
N/* SYSCLK AHBCLK Bit Field Definitions */
N#define SYSCLK_AHBCLK_EBI_EN_Pos                3
N#define SYSCLK_AHBCLK_EBI_EN_Msk                (1ul << SYSCLK_AHBCLK_EBI_EN_Pos)
N
N#define SYSCLK_AHBCLK_ISP_EN_Pos                2
N#define SYSCLK_AHBCLK_ISP_EN_Msk                (1ul << SYSCLK_AHBCLK_ISP_EN_Pos)
N
N#define SYSCLK_AHBCLK_PDMA_EN_Pos               1
N#define SYSCLK_AHBCLK_PDMA_EN_Msk               (1ul << SYSCLK_AHBCLK_PDMA_EN_Pos)
N
N
N/* SYSCLK APBCLK Bit Field Definitions */
N#define SYSCLK_APBCLK_PS2_EN_Pos                31
N#define SYSCLK_APBCLK_PS2_EN_Msk                (1ul << SYSCLK_APBCLK_PS2_EN_Pos)
N
N#define SYSCLK_APBCLK_ACMP_EN_Pos               30
N#define SYSCLK_APBCLK_ACMP_EN_Msk               (1ul << SYSCLK_APBCLK_ACMP_EN_Pos)
N
N#define SYSCLK_APBCLK_I2S_EN_Pos                29
N#define SYSCLK_APBCLK_I2S_EN_Msk                (1ul << SYSCLK_APBCLK_I2S_EN_Pos)
N
N#define SYSCLK_APBCLK_ADC_EN_Pos                28
N#define SYSCLK_APBCLK_ADC_EN_Msk                (1ul << SYSCLK_APBCLK_ADC_EN_Pos)
N
N#define SYSCLK_APBCLK_USBD_EN_Pos               27
N#define SYSCLK_APBCLK_USBD_EN_Msk               (1ul << SYSCLK_APBCLK_USBD_EN_Pos)
N
N#define SYSCLK_APBCLK_CAN0_EN_Pos               24
N#define SYSCLK_APBCLK_CAN0_EN_Msk               (1ul << SYSCLK_APBCLK_CAN0_EN_Pos)
N
N#define SYSCLK_APBCLK_PWM67_EN_Pos              23
N#define SYSCLK_APBCLK_PWM67_EN_Msk              (1ul << SYSCLK_APBCLK_PWM67_EN_Pos)
N
N#define SYSCLK_APBCLK_PWM45_EN_Pos              22
N#define SYSCLK_APBCLK_PWM45_EN_Msk              (1ul << SYSCLK_APBCLK_PWM45_EN_Pos)
N
N#define SYSCLK_APBCLK_PWM23_EN_Pos              21
N#define SYSCLK_APBCLK_PWM23_EN_Msk              (1ul << SYSCLK_APBCLK_PWM23_EN_Pos)
N
N#define SYSCLK_APBCLK_PWM01_EN_Pos              20
N#define SYSCLK_APBCLK_PWM01_EN_Msk              (1ul << SYSCLK_APBCLK_PWM01_EN_Pos)
N
N#define SYSCLK_APBCLK_UART2_EN_Pos              18
N#define SYSCLK_APBCLK_UART2_EN_Msk              (1ul << SYSCLK_APBCLK_UART2_EN_Pos)
N
N#define SYSCLK_APBCLK_UART1_EN_Pos              17
N#define SYSCLK_APBCLK_UART1_EN_Msk              (1ul << SYSCLK_APBCLK_UART1_EN_Pos)
N
N#define SYSCLK_APBCLK_UART0_EN_Pos              16
N#define SYSCLK_APBCLK_UART0_EN_Msk              (1ul << SYSCLK_APBCLK_UART0_EN_Pos)
N
N#define SYSCLK_APBCLK_SPI3_EN_Pos               15
N#define SYSCLK_APBCLK_SPI3_EN_Msk               (1ul << SYSCLK_APBCLK_SPI3_EN_Pos)
N
N#define SYSCLK_APBCLK_SPI2_EN_Pos               14
N#define SYSCLK_APBCLK_SPI2_EN_Msk               (1ul << SYSCLK_APBCLK_SPI2_EN_Pos)
N
N#define SYSCLK_APBCLK_SPI1_EN_Pos               13
N#define SYSCLK_APBCLK_SPI1_EN_Msk               (1ul << SYSCLK_APBCLK_SPI1_EN_Pos)
N
N#define SYSCLK_APBCLK_SPI0_EN_Pos               12
N#define SYSCLK_APBCLK_SPI0_EN_Msk               (1ul << SYSCLK_APBCLK_SPI0_EN_Pos)
N
N#define SYSCLK_APBCLK_I2C1_EN_Pos               9
N#define SYSCLK_APBCLK_I2C1_EN_Msk               (1ul << SYSCLK_APBCLK_I2C1_EN_Pos)
N
N#define SYSCLK_APBCLK_I2C0_EN_Pos               8
N#define SYSCLK_APBCLK_I2C0_EN_Msk               (1ul << SYSCLK_APBCLK_I2C0_EN_Pos)
N
N#define SYSCLK_APBCLK_FDIV_EN_Pos               6
N#define SYSCLK_APBCLK_FDIV_EN_Msk               (1ul << SYSCLK_APBCLK_FDIV_EN_Pos)
N
N#define SYSCLK_APBCLK_TMR3_EN_Pos               5
N#define SYSCLK_APBCLK_TMR3_EN_Msk               (1ul << SYSCLK_APBCLK_TMR3_EN_Pos)
N
N#define SYSCLK_APBCLK_TMR2_EN_Pos               4
N#define SYSCLK_APBCLK_TMR2_EN_Msk               (1ul << SYSCLK_APBCLK_TMR2_EN_Pos)
N
N#define SYSCLK_APBCLK_TMR1_EN_Pos               3
N#define SYSCLK_APBCLK_TMR1_EN_Msk               (1ul << SYSCLK_APBCLK_TMR1_EN_Pos)
N                                                
N#define SYSCLK_APBCLK_TMR0_EN_Pos               2
N#define SYSCLK_APBCLK_TMR0_EN_Msk               (1ul << SYSCLK_APBCLK_TMR0_EN_Pos)
N
N#define SYSCLK_APBCLK_RTC_EN_Pos                1
N#define SYSCLK_APBCLK_RTC_EN_Msk                (1ul << SYSCLK_APBCLK_RTC_EN_Pos)
N
N#define SYSCLK_APBCLK_WDT_EN_Pos                0
N#define SYSCLK_APBCLK_WDT_EN_Msk                (1ul << SYSCLK_APBCLK_WDT_EN_Pos)
N
N/* SYSCLK CLKSTATUS Bit Field Definitions */
N#define SYSCLK_CLKSTATUS_CLK_SW_FAIL_Pos        7
N#define SYSCLK_CLKSTATUS_CLK_SW_FAIL_Msk        (1ul << SYSCLK_CLKSTATUS_CLK_SW_FAIL_Pos)
N
N#define SYSCLK_CLKSTATUS_OSC22M_STB_Pos         4
N#define SYSCLK_CLKSTATUS_OSC22M_STB_Msk         (1ul << SYSCLK_CLKSTATUS_OSC22M_STB_Pos)
N
N#define SYSCLK_CLKSTATUS_OSC10K_STB_Pos         3
N#define SYSCLK_CLKSTATUS_OSC10K_STB_Msk         (1ul << SYSCLK_CLKSTATUS_OSC10K_STB_Pos)
N
N#define SYSCLK_CLKSTATUS_PLL_STB_Pos            2
N#define SYSCLK_CLKSTATUS_PLL_STB_Msk            (1ul << SYSCLK_CLKSTATUS_PLL_STB_Pos)
N
N#define SYSCLK_CLKSTATUS_XTL32K_STB_Pos         1
N#define SYSCLK_CLKSTATUS_XTL32K_STB_Msk         (1ul << SYSCLK_CLKSTATUS_XTL32K_STB_Pos)
N
N#define SYSCLK_CLKSTATUS_XTL12M_STB_Pos         0
N#define SYSCLK_CLKSTATUS_XTL12M_STB_Msk         (1ul << SYSCLK_CLKSTATUS_XTL12M_STB_Pos)
N
N/* SYSCLK CLKSEL0 Bit Field Definitions */
N#define SYSCLK_CLKSEL0_STCLK_S_Pos              3
N#define SYSCLK_CLKSEL0_STCLK_S_Msk              (7ul << SYSCLK_CLKSEL0_STCLK_S_Pos)
N
N#define SYSCLK_CLKSEL0_HCLK_S_Pos               0
N#define SYSCLK_CLKSEL0_HCLK_S_Msk               (7ul << SYSCLK_CLKSEL0_HCLK_S_Pos)
N
N/* SYSCLK CLKSEL1 Bit Field Definitions */
N#define SYSCLK_CLKSEL1_PWM23_S_Pos              30
N#define SYSCLK_CLKSEL1_PWM23_S_Msk              (3ul << SYSCLK_CLKSEL1_PWM23_S_Pos)
N
N#define SYSCLK_CLKSEL1_PWM01_S_Pos              28
N#define SYSCLK_CLKSEL1_PWM01_S_Msk              (3ul << SYSCLK_CLKSEL1_PWM01_S_Pos)
N
N#define SYSCLK_CLKSEL1_UART_S_Pos               24
N#define SYSCLK_CLKSEL1_UART_S_Msk               (3ul << SYSCLK_CLKSEL1_UART_S_Pos)
N
N#define SYSCLK_CLKSEL1_TMR3_S_Pos               20
N#define SYSCLK_CLKSEL1_TMR3_S_Msk               (7ul << SYSCLK_CLKSEL1_TMR3_S_Pos)
N
N#define SYSCLK_CLKSEL1_TMR2_S_Pos               16
N#define SYSCLK_CLKSEL1_TMR2_S_Msk               (7ul << SYSCLK_CLKSEL1_TMR2_S_Pos)
N
N#define SYSCLK_CLKSEL1_TMR1_S_Pos               12
N#define SYSCLK_CLKSEL1_TMR1_S_Msk               (7ul << SYSCLK_CLKSEL1_TMR1_S_Pos)
N
N#define SYSCLK_CLKSEL1_TMR0_S_Pos               8
N#define SYSCLK_CLKSEL1_TMR0_S_Msk               (7ul << SYSCLK_CLKSEL1_TMR0_S_Pos)
N
N#define SYSCLK_CLKSEL1_ADC_S_Pos                2
N#define SYSCLK_CLKSEL1_ADC_S_Msk                (3ul << SYSCLK_CLKSEL1_ADC_S_Pos)
N
N#define SYSCLK_CLKSEL1_WDT_S_Pos                0
N#define SYSCLK_CLKSEL1_WDT_S_Msk                (3ul << SYSCLK_CLKSEL1_WDT_S_Pos)
N
N/* SYSCLK CLKSEL2 Bit Field Definitions */
N#define SYSCLK_CLKSEL2_PWM67_S_Pos              6
N#define SYSCLK_CLKSEL2_PWM67_S_Msk              (3ul << SYSCLK_CLKSEL2_PWM67_S_Pos)
N
N#define SYSCLK_CLKSEL2_PWM45_S_Pos              4
N#define SYSCLK_CLKSEL2_PWM45_S_Msk              (3ul << SYSCLK_CLKSEL2_PWM45_S_Pos)
N
N#define SYSCLK_CLKSEL2_FRQDIV_S_Pos             2
N#define SYSCLK_CLKSEL2_FRQDIV_S_Msk             (3ul << SYSCLK_CLKSEL2_FRQDIV_S_Pos)
N
N#define SYSCLK_CLKSEL2_I2S_S_Pos                0
N#define SYSCLK_CLKSEL2_I2S_S_Msk                (3ul << SYSCLK_CLKSEL2_I2S_S_Pos)
N
N/* SYSCLK CLKDIV Bit Field Definitions */
N#define SYSCLK_CLKDIV_ADC_N_Pos                 16
N#define SYSCLK_CLKDIV_ADC_N_Msk                 (0xFFul << SYSCLK_CLKDIV_ADC_N_Pos)
N
N#define SYSCLK_CLKDIV_UART_N_Pos                8
N#define SYSCLK_CLKDIV_UART_N_Msk                (0xFul << SYSCLK_CLKDIV_UART_N_Pos)
N
N#define SYSCLK_CLKDIV_USB_N_Pos                 4
N#define SYSCLK_CLKDIV_USB_N_Msk                 (0xFul << SYSCLK_CLKDIV_USB_N_Pos)
N
N#define SYSCLK_CLKDIV_HCLK_N_Pos                0
N#define SYSCLK_CLKDIV_HCLK_N_Msk                (0xFul << SYSCLK_CLKDIV_HCLK_N_Pos)
N
N/* SYSCLK PLLCON Bit Field Definitions */
N#define SYSCLK_PLLCON_PLL_SRC_Pos               19
N#define SYSCLK_PLLCON_PLL_SRC_Msk               (1ul << SYSCLK_PLLCON_PLL_SRC_Pos)
N
N#define SYSCLK_PLLCON_OE_Pos                    18
N#define SYSCLK_PLLCON_OE_Msk                    (1ul << SYSCLK_PLLCON_OE_Pos)
N
N#define SYSCLK_PLLCON_BP_Pos                    17
N#define SYSCLK_PLLCON_BP_Msk                    (1ul << SYSCLK_PLLCON_BP_Pos)
N
N#define SYSCLK_PLLCON_PD_Pos                    16
N#define SYSCLK_PLLCON_PD_Msk                    (1ul << SYSCLK_PLLCON_PD_Pos)
N
N#define SYSCLK_PLLCON_OUT_DV_Pos                14
N#define SYSCLK_PLLCON_OUT_DV_Msk                (3ul << SYSCLK_PLLCON_OUT_DV_Pos)
N
N#define SYSCLK_PLLCON_IN_DV_Pos                 9
N#define SYSCLK_PLLCON_IN_DV_Msk                 (0x1Ful << SYSCLK_PLLCON_IN_DV_Pos)
N
N#define SYSCLK_PLLCON_FB_DV_Pos                 0
N#define SYSCLK_PLLCON_FB_DV_Msk                 (0x1FFul << SYSCLK_PLLCON_FB_DV_Pos)
N
N/* SYSCLK FRQDIV Bit Field Definitions */
N#define SYSCLK_FRQDIV_FDIV_EN_Pos               4
N#define SYSCLK_FRQDIV_FDIV_EN_Msk               (1ul << SYSCLK_FRQDIV_FDIV_EN_Pos)
N
N#define SYSCLK_FRQDIV_FSEL_Pos                  0
N#define SYSCLK_FRQDIV_FSEL_Msk                  (0xFul << SYSCLK_FRQDIV_FSEL_Pos)
N
N/*---------------------------- Global Controller -----------------------------*/
Ntypedef __I uint32_t GCR_PDID_T;  
Xtypedef volatile const uint32_t GCR_PDID_T;  
N
Ntypedef struct
N{
N    __IO uint32_t  RSTS_POR:1;
X    volatile uint32_t  RSTS_POR:1;
N    __IO uint32_t  RSTS_RESET:1;
X    volatile uint32_t  RSTS_RESET:1;
N    __IO uint32_t  RSTS_WDT:1;
X    volatile uint32_t  RSTS_WDT:1;
N    __IO uint32_t  RSTS_LVR:1;
X    volatile uint32_t  RSTS_LVR:1;
N    __IO uint32_t  RSTS_BOD:1;
X    volatile uint32_t  RSTS_BOD:1;
N    __IO uint32_t  RSTS_SYS:1;
X    volatile uint32_t  RSTS_SYS:1;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  RSTS_CPU:1;    
X    volatile uint32_t  RSTS_CPU:1;    
N    __I  uint32_t  RESERVE1:24;
X    volatile const  uint32_t  RESERVE1:24;
N} GCR_RSTSRC_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  CHIP_RST:1;
X    volatile uint32_t  CHIP_RST:1;
N    __IO uint32_t  CPU_RST:1;
X    volatile uint32_t  CPU_RST:1;
N    __IO uint32_t  PDMA_RST:1;
X    volatile uint32_t  PDMA_RST:1;
N    __IO uint32_t  EBI_RST:1;
X    volatile uint32_t  EBI_RST:1;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} GCR_IPRSTC1_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  GPIO_RST:1;
X    volatile uint32_t  GPIO_RST:1;
N    __IO uint32_t  TMR0_RST:1;
X    volatile uint32_t  TMR0_RST:1;
N    __IO uint32_t  TMR1_RST:1;
X    volatile uint32_t  TMR1_RST:1;
N    __IO uint32_t  TMR2_RST:1;
X    volatile uint32_t  TMR2_RST:1;
N    __IO uint32_t  TMR3_RST:1;
X    volatile uint32_t  TMR3_RST:1;
N    __I  uint32_t  RESERVE1:2;
X    volatile const  uint32_t  RESERVE1:2;
N    __IO uint32_t  I2C0_RST:1;
X    volatile uint32_t  I2C0_RST:1;
N    __IO uint32_t  I2C1_RST:1;
X    volatile uint32_t  I2C1_RST:1;
N    __I  uint32_t  RESERVE2:2;
X    volatile const  uint32_t  RESERVE2:2;
N    __IO uint32_t  SPI0_RST:1;
X    volatile uint32_t  SPI0_RST:1;
N    __IO uint32_t  SPI1_RST:1;
X    volatile uint32_t  SPI1_RST:1;
N    __IO uint32_t  SPI2_RST:1;
X    volatile uint32_t  SPI2_RST:1;
N    __IO uint32_t  SPI3_RST:1;
X    volatile uint32_t  SPI3_RST:1;
N    __IO uint32_t  UART0_RST:1;
X    volatile uint32_t  UART0_RST:1;
N    __IO uint32_t  UART1_RST:1;
X    volatile uint32_t  UART1_RST:1;
N    __IO uint32_t  UART2_RST:1;
X    volatile uint32_t  UART2_RST:1;
N    __I  uint32_t  RESERVE3:1;
X    volatile const  uint32_t  RESERVE3:1;
N    __IO uint32_t  PWM03_RST:1;
X    volatile uint32_t  PWM03_RST:1;
N    __IO uint32_t  PWM47_RST:1;
X    volatile uint32_t  PWM47_RST:1;
N    __IO uint32_t  ACMP_RST:1;
X    volatile uint32_t  ACMP_RST:1;
N    __IO uint32_t  PS2_RST:1;
X    volatile uint32_t  PS2_RST:1;
N    __IO uint32_t  CAN0_RST:1;
X    volatile uint32_t  CAN0_RST:1;
N    __I  uint32_t  RESERVE4:2;
X    volatile const  uint32_t  RESERVE4:2;
N    __IO uint32_t  USBD_RST:1;
X    volatile uint32_t  USBD_RST:1;
N    __IO uint32_t  ADC_RST:1;
X    volatile uint32_t  ADC_RST:1;
N    __IO uint32_t  I2S_RST:1;
X    volatile uint32_t  I2S_RST:1;
N    __I  uint32_t  RESERVE5:2;
X    volatile const  uint32_t  RESERVE5:2;
N} GCR_IPRSTC2_T;
N
Ntypedef struct
N{
N    __IO uint32_t  HPE:1;
X    volatile uint32_t  HPE:1;
N    __I  uint32_t  RESERVE:31;
X    volatile const  uint32_t  RESERVE:31;
N} GCR_CPR_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  BOD_EN:1;
X    volatile uint32_t  BOD_EN:1;
N    __IO uint32_t  BOD_VL:2;
X    volatile uint32_t  BOD_VL:2;
N    __IO uint32_t  BOD_RSTEN:1;
X    volatile uint32_t  BOD_RSTEN:1;
N    __IO uint32_t  BOD_INTF:1;
X    volatile uint32_t  BOD_INTF:1;
N    __IO uint32_t  BOD_LPM:1;
X    volatile uint32_t  BOD_LPM:1;
N    __IO uint32_t  BOD_OUT:1;
X    volatile uint32_t  BOD_OUT:1;
N    __IO uint32_t  LVR_EN:1;
X    volatile uint32_t  LVR_EN:1;
N    __I  uint32_t  RESERVE1:24;
X    volatile const  uint32_t  RESERVE1:24;
N} GCR_BODCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  VTEMP_EN:1;
X    volatile uint32_t  VTEMP_EN:1;
N    __I  uint32_t  RESERVE:31;
X    volatile const  uint32_t  RESERVE:31;
N} GCR_TEMPCR_T;
N
Ntypedef __IO uint32_t GCR_PORCR_T;  
Xtypedef volatile uint32_t GCR_PORCR_T;  
N
Ntypedef struct
N{
N    __IO uint32_t ADC0:1;
X    volatile uint32_t ADC0:1;
N    __IO uint32_t ADC1_AD12:1;
X    volatile uint32_t ADC1_AD12:1;
N    __IO uint32_t ADC2_AD11:1;
X    volatile uint32_t ADC2_AD11:1;
N    __IO uint32_t ADC3_AD10:1;
X    volatile uint32_t ADC3_AD10:1;
N    __IO uint32_t ADC4_AD9:1;
X    volatile uint32_t ADC4_AD9:1;
N    __IO uint32_t ADC5_AD8:1;
X    volatile uint32_t ADC5_AD8:1;
N    __IO uint32_t ADC6_AD7:1;
X    volatile uint32_t ADC6_AD7:1;
N    __IO uint32_t ADC7_SS21_AD6:1;
X    volatile uint32_t ADC7_SS21_AD6:1;
N    __IO uint32_t I2C0_SDA:1;
X    volatile uint32_t I2C0_SDA:1;
N    __IO uint32_t I2C0_SCL:1;
X    volatile uint32_t I2C0_SCL:1;
N    __IO uint32_t I2C1_SDA_nWR:1;
X    volatile uint32_t I2C1_SDA_nWR:1;
N    __IO uint32_t I2C1_SCL_nRD:1;
X    volatile uint32_t I2C1_SCL_nRD:1;
N    __IO uint32_t PWM0_AD13:1;
X    volatile uint32_t PWM0_AD13:1;
N    __IO uint32_t PWM1_AD14:1;
X    volatile uint32_t PWM1_AD14:1;
N    __IO uint32_t PWM2_AD15:1;
X    volatile uint32_t PWM2_AD15:1;
N    __IO uint32_t PWM3_I2SMCLK:1;
X    volatile uint32_t PWM3_I2SMCLK:1;
N    __IO uint32_t SCHMITT:16;    
X    volatile uint32_t SCHMITT:16;    
N} GCR_GPAMFP_T;
N
Ntypedef struct
N{
N    __IO uint32_t UART0_RX:1;
X    volatile uint32_t UART0_RX:1;
N    __IO uint32_t UART0_TX:1;
X    volatile uint32_t UART0_TX:1;
N    __IO uint32_t UART0_nRTS_nWRL:1;
X    volatile uint32_t UART0_nRTS_nWRL:1;
N    __IO uint32_t UART0_nCTS_nWRH:1;
X    volatile uint32_t UART0_nCTS_nWRH:1;
N    __IO uint32_t UART1_RX:1;
X    volatile uint32_t UART1_RX:1;
N    __IO uint32_t UART1_TX:1;
X    volatile uint32_t UART1_TX:1;
N    __IO uint32_t UART1_nRTS_ALE:1;
X    volatile uint32_t UART1_nRTS_ALE:1;
N    __IO uint32_t UART1_nCTS_nCS:1;
X    volatile uint32_t UART1_nCTS_nCS:1;
N    __IO uint32_t TM0:1;
X    volatile uint32_t TM0:1;
N    __IO uint32_t TM1_SS11:1;                              
X    volatile uint32_t TM1_SS11:1;                              
N    __IO uint32_t TM2_SS01:1;
X    volatile uint32_t TM2_SS01:1;
N    __IO uint32_t TM3_PWM4:1;                     
X    volatile uint32_t TM3_PWM4:1;                     
N    __IO uint32_t CPO0_CLKO_AD0:1;
X    volatile uint32_t CPO0_CLKO_AD0:1;
N    __IO uint32_t CPO1_AD1:1;
X    volatile uint32_t CPO1_AD1:1;
N    __IO uint32_t INT0_SS31:1;
X    volatile uint32_t INT0_SS31:1;
N    __IO uint32_t INT1:1;
X    volatile uint32_t INT1:1;
N    __IO uint32_t SCHMITT:16;    
X    volatile uint32_t SCHMITT:16;    
N} GCR_GPBMFP_T;
N
Ntypedef struct
N{
N    __IO uint32_t SPI0_SS0_I2SLRCLK:1;
X    volatile uint32_t SPI0_SS0_I2SLRCLK:1;
N    __IO uint32_t SPI0_CLK_I2SBCLK:1;
X    volatile uint32_t SPI0_CLK_I2SBCLK:1;
N    __IO uint32_t SPI0_MISO0_I2SDI:1;
X    volatile uint32_t SPI0_MISO0_I2SDI:1;
N    __IO uint32_t SPI0_MOSI0_I2SDO:1;
X    volatile uint32_t SPI0_MOSI0_I2SDO:1;
N    __IO uint32_t SPI0_MISO1:1;
X    volatile uint32_t SPI0_MISO1:1;
N    __IO uint32_t SPI0_MOSI1:1;
X    volatile uint32_t SPI0_MOSI1:1;
N    __IO uint32_t CPP0_AD4:1;
X    volatile uint32_t CPP0_AD4:1;
N    __IO uint32_t CPN0_AD5:1;
X    volatile uint32_t CPN0_AD5:1;
N    __IO uint32_t SPI1_SS0_MCLK:1;
X    volatile uint32_t SPI1_SS0_MCLK:1;
N    __IO uint32_t SPI1_CLK:1;
X    volatile uint32_t SPI1_CLK:1;
N    __IO uint32_t SPI1_MISO0:1;
X    volatile uint32_t SPI1_MISO0:1;
N    __IO uint32_t SPI1_MOSI0:1;
X    volatile uint32_t SPI1_MOSI0:1;
N    __IO uint32_t SPI1_MISO1:1;
X    volatile uint32_t SPI1_MISO1:1;
N    __IO uint32_t SPI1_MOSI1:1;
X    volatile uint32_t SPI1_MOSI1:1;
N    __IO uint32_t CPP1_AD2:1;
X    volatile uint32_t CPP1_AD2:1;
N    __IO uint32_t CPN1_AD3:1;
X    volatile uint32_t CPN1_AD3:1;
N    __IO uint32_t SCHMITT:16;    
X    volatile uint32_t SCHMITT:16;    
N} GCR_GPCMFP_T;
N
Ntypedef struct
N{
N    __IO uint32_t SPI2_SS0:1;
X    volatile uint32_t SPI2_SS0:1;
N    __IO uint32_t SPI2_CLK_SPI0_SS1:1;
X    volatile uint32_t SPI2_CLK_SPI0_SS1:1;
N    __IO uint32_t SPI2_MISO0_SPI0_MISO1:1;
X    volatile uint32_t SPI2_MISO0_SPI0_MISO1:1;
N    __IO uint32_t SPI2_MOSI0_SPI0_MOSI1:1;
X    volatile uint32_t SPI2_MOSI0_SPI0_MOSI1:1;
N    __IO uint32_t SPI2_MISO1:1;
X    volatile uint32_t SPI2_MISO1:1;
N    __IO uint32_t SPI2_MOSI1:1;
X    volatile uint32_t SPI2_MOSI1:1;
N    __IO uint32_t CAN0_RX:1;
X    volatile uint32_t CAN0_RX:1;
N    __IO uint32_t CAN0_TX:1;
X    volatile uint32_t CAN0_TX:1;
N    __IO uint32_t SPI3_SS0:1;
X    volatile uint32_t SPI3_SS0:1;
N    __IO uint32_t SPI3_CLK:1;
X    volatile uint32_t SPI3_CLK:1;
N    __IO uint32_t SPI3_MISO0:1;
X    volatile uint32_t SPI3_MISO0:1;
N    __IO uint32_t SPI3_MOSI0:1;
X    volatile uint32_t SPI3_MOSI0:1;
N    __IO uint32_t SPI3_MISO1:1;
X    volatile uint32_t SPI3_MISO1:1;
N    __IO uint32_t SPI3_MOSI1:1;
X    volatile uint32_t SPI3_MOSI1:1;
N    __IO uint32_t UART2_RX:1;
X    volatile uint32_t UART2_RX:1;
N    __IO uint32_t UART2_TX:1;
X    volatile uint32_t UART2_TX:1;
N    __IO uint32_t SCHMITT:16;    
X    volatile uint32_t SCHMITT:16;    
N} GCR_GPDMFP_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  PWM6:1;
X    volatile uint32_t  PWM6:1;
N    __IO uint32_t  PWM7:1;
X    volatile uint32_t  PWM7:1;
N    __I  uint32_t  RESERVE1:3;
X    volatile const  uint32_t  RESERVE1:3;
N    __IO uint32_t  PWM5:1;
X    volatile uint32_t  PWM5:1;
N    __I  uint32_t  RESERVE2:10;
X    volatile const  uint32_t  RESERVE2:10;
N    __IO uint32_t  SCHMITT:16;
X    volatile uint32_t  SCHMITT:16;
N} GCR_GPEMFP_T;
N
Ntypedef struct
N{
N    __IO uint32_t  PB10_S01:1;      /* GPB10 */
X    volatile uint32_t  PB10_S01:1;       
N    __IO uint32_t  PB9_S11:1;       /* GPB9  */
X    volatile uint32_t  PB9_S11:1;        
N    __IO uint32_t  PA7_S21:1;       /* GPA7  */
X    volatile uint32_t  PA7_S21:1;        
N    __IO uint32_t  PB14_S31:1;      /* GPB14 */
X    volatile uint32_t  PB14_S31:1;       
N    __IO uint32_t  PB11_PWM4:1;     /* GPB11 */
X    volatile uint32_t  PB11_PWM4:1;      
N    __IO uint32_t  PC0_I2SLRCLK:1;  /* GPC0  */
X    volatile uint32_t  PC0_I2SLRCLK:1;   
N    __IO uint32_t  PC1_I2SBCLK:1;   /* GPC1  */
X    volatile uint32_t  PC1_I2SBCLK:1;    
N    __IO uint32_t  PC2_I2SDI:1;     /* GPC2  */
X    volatile uint32_t  PC2_I2SDI:1;      
N    __IO uint32_t  PC3_I2SDO:1;     /* GPC3  */
X    volatile uint32_t  PC3_I2SDO:1;      
N    __IO uint32_t  PA15_I2SMCLK:1;  /* GPA15 */
X    volatile uint32_t  PA15_I2SMCLK:1;   
N    __IO uint32_t  PB12_CLKO:1;     /* GPB12 */
X    volatile uint32_t  PB12_CLKO:1;      
N    __IO uint32_t  EBI_EN:1;            
X    volatile uint32_t  EBI_EN:1;            
N    __IO uint32_t  EBI_MCLK_EN:1;   /* GPC8  */
X    volatile uint32_t  EBI_MCLK_EN:1;    
N    __IO uint32_t  EBI_WRL_EN:1;    /* GPB2  */
X    volatile uint32_t  EBI_WRL_EN:1;     
N    __IO uint32_t  EBI_WRH_EN:1;    /* GPB3  */
X    volatile uint32_t  EBI_WRH_EN:1;     
N    __I  uint32_t  RESERVE0:1;  
X    volatile const  uint32_t  RESERVE0:1;  
N    __IO uint32_t  EBI_HB_EN:8;     
X    volatile uint32_t  EBI_HB_EN:8;     
N    __IO uint32_t  PB15_T0EX:1;
X    volatile uint32_t  PB15_T0EX:1;
N    __IO uint32_t  PE5_T1EX:1;
X    volatile uint32_t  PE5_T1EX:1;
N    __IO uint32_t  PB2_T2EX:1;
X    volatile uint32_t  PB2_T2EX:1;
N    __IO uint32_t  PB3_T3EX:1;
X    volatile uint32_t  PB3_T3EX:1;
N    __I  uint32_t  RESERVE1:4;
X    volatile const  uint32_t  RESERVE1:4;
N} GCR_ALTMFP_T;
N
Ntypedef __IO uint32_t GCR_REGWRPROT_T;
Xtypedef volatile uint32_t GCR_REGWRPROT_T;
N
Ntypedef struct
N{
N    union 
N    {
N        __I uint32_t u32PDID;
X        volatile const uint32_t u32PDID;
N        __I uint32_t PDID;
X        volatile const uint32_t PDID;
N    };
N
N    union 
N    {
N        __IO uint32_t u32RSTSRC;
X        volatile uint32_t u32RSTSRC;
N        
N        struct 
N        {
N            __IO uint32_t  RSTS_POR:1;
X            volatile uint32_t  RSTS_POR:1;
N            __IO uint32_t  RSTS_RESET:1;
X            volatile uint32_t  RSTS_RESET:1;
N            __IO uint32_t  RSTS_WDT:1;
X            volatile uint32_t  RSTS_WDT:1;
N            __IO uint32_t  RSTS_LVR:1;
X            volatile uint32_t  RSTS_LVR:1;
N            __IO uint32_t  RSTS_BOD:1;
X            volatile uint32_t  RSTS_BOD:1;
N            __IO uint32_t  RSTS_SYS:1;
X            volatile uint32_t  RSTS_SYS:1;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  RSTS_CPU:1;    
X            volatile uint32_t  RSTS_CPU:1;    
N            __I  uint32_t  RESERVE1:24;
X            volatile const  uint32_t  RESERVE1:24;
N        } RSTSRC;
N    };
N
N    union 
N    {
N        __IO uint32_t u32IPRSTC1;
X        volatile uint32_t u32IPRSTC1;
N        
N        struct 
N        {
N            __IO uint32_t  CHIP_RST:1;
X            volatile uint32_t  CHIP_RST:1;
N            __IO uint32_t  CPU_RST:1;
X            volatile uint32_t  CPU_RST:1;
N            __IO uint32_t  PDMA_RST:1;
X            volatile uint32_t  PDMA_RST:1;
N            __IO uint32_t  EBI_RST:1;
X            volatile uint32_t  EBI_RST:1;
N            __I  uint32_t  RESERVE:28;
X            volatile const  uint32_t  RESERVE:28;
N        } IPRSTC1;
N    };    
N    
N    union 
N    {
N        __IO uint32_t u32IPRSTC2;
X        volatile uint32_t u32IPRSTC2;
N        
N        struct 
N        {
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  GPIO_RST:1;
X            volatile uint32_t  GPIO_RST:1;
N            __IO uint32_t  TMR0_RST:1;
X            volatile uint32_t  TMR0_RST:1;
N            __IO uint32_t  TMR1_RST:1;
X            volatile uint32_t  TMR1_RST:1;
N            __IO uint32_t  TMR2_RST:1;
X            volatile uint32_t  TMR2_RST:1;
N            __IO uint32_t  TMR3_RST:1;
X            volatile uint32_t  TMR3_RST:1;
N            __I  uint32_t  RESERVE1:2;
X            volatile const  uint32_t  RESERVE1:2;
N            __IO uint32_t  I2C0_RST:1;
X            volatile uint32_t  I2C0_RST:1;
N            __IO uint32_t  I2C1_RST:1;
X            volatile uint32_t  I2C1_RST:1;
N            __I  uint32_t  RESERVE2:2;
X            volatile const  uint32_t  RESERVE2:2;
N            __IO uint32_t  SPI0_RST:1;
X            volatile uint32_t  SPI0_RST:1;
N            __IO uint32_t  SPI1_RST:1;
X            volatile uint32_t  SPI1_RST:1;
N            __IO uint32_t  SPI2_RST:1;
X            volatile uint32_t  SPI2_RST:1;
N            __IO uint32_t  SPI3_RST:1;
X            volatile uint32_t  SPI3_RST:1;
N            __IO uint32_t  UART0_RST:1;
X            volatile uint32_t  UART0_RST:1;
N            __IO uint32_t  UART1_RST:1;
X            volatile uint32_t  UART1_RST:1;
N            __IO uint32_t  UART2_RST:1;
X            volatile uint32_t  UART2_RST:1;
N            __I  uint32_t  RESERVE3:1;
X            volatile const  uint32_t  RESERVE3:1;
N            __IO uint32_t  PWM03_RST:1;
X            volatile uint32_t  PWM03_RST:1;
N            __IO uint32_t  PWM47_RST:1;
X            volatile uint32_t  PWM47_RST:1;
N            __IO uint32_t  ACMP_RST:1;
X            volatile uint32_t  ACMP_RST:1;
N            __IO uint32_t  PS2_RST:1;
X            volatile uint32_t  PS2_RST:1;
N            __IO uint32_t  CAN0_RST:1;
X            volatile uint32_t  CAN0_RST:1;
N            __I  uint32_t  RESERVE4:2;
X            volatile const  uint32_t  RESERVE4:2;
N            __IO uint32_t  USBD_RST:1;
X            volatile uint32_t  USBD_RST:1;
N            __IO uint32_t  ADC_RST:1;
X            volatile uint32_t  ADC_RST:1;
N            __IO uint32_t  I2S_RST:1;
X            volatile uint32_t  I2S_RST:1;
N            __I  uint32_t  RESERVE5:2;
X            volatile const  uint32_t  RESERVE5:2;
N        } IPRSTC2;
N    };    
N
N    union 
N    {
N        __IO uint32_t u32CPR;
X        volatile uint32_t u32CPR;
N        
N        struct 
N        {
N            __IO uint32_t  HPE:1;
X            volatile uint32_t  HPE:1;
N            __I  uint32_t  RESERVE:31;
X            volatile const  uint32_t  RESERVE:31;
N        } CPR;
N    };    
N
N    uint32_t RESERVE0;
N    
N    union 
N    {
N        __IO uint32_t u32BODCR;
X        volatile uint32_t u32BODCR;
N        
N        struct 
N        {
N            __IO uint32_t  BOD_EN:1;
X            volatile uint32_t  BOD_EN:1;
N            __IO uint32_t  BOD_VL:2;
X            volatile uint32_t  BOD_VL:2;
N            __IO uint32_t  BOD_RSTEN:1;
X            volatile uint32_t  BOD_RSTEN:1;
N            __IO uint32_t  BOD_INTF:1;
X            volatile uint32_t  BOD_INTF:1;
N            __IO uint32_t  BOD_LPM:1;
X            volatile uint32_t  BOD_LPM:1;
N            __IO uint32_t  BOD_OUT:1;
X            volatile uint32_t  BOD_OUT:1;
N            __IO uint32_t  LVR_EN:1;
X            volatile uint32_t  LVR_EN:1;
N            __I  uint32_t  RESERVE1:24;
X            volatile const  uint32_t  RESERVE1:24;
N        } BODCR;
N    };
N
N    union 
N    {
N        __IO uint32_t u32TEMPCR;
X        volatile uint32_t u32TEMPCR;
N        
N        struct 
N        {
N            __IO uint32_t  VTEMP_EN:1;
X            volatile uint32_t  VTEMP_EN:1;
N            __I  uint32_t  RESERVE:31;
X            volatile const  uint32_t  RESERVE:31;
N        } TEMPCR;
N    };   
N    
N    uint32_t RESERVE1;
N    
N    union 
N    {
N        __IO uint32_t u32PORCR;
X        volatile uint32_t u32PORCR;
N        __IO uint32_t PORCR;
X        volatile uint32_t PORCR;
N    };   
N
N    uint32_t RESERVE2[2];
N
N    union 
N    {
N        __IO uint32_t u32GPAMFP;
X        volatile uint32_t u32GPAMFP;
N        
N        struct 
N        {
N            __IO uint32_t ADC0:1;
X            volatile uint32_t ADC0:1;
N            __IO uint32_t ADC1_AD12:1;
X            volatile uint32_t ADC1_AD12:1;
N            __IO uint32_t ADC2_AD11:1;
X            volatile uint32_t ADC2_AD11:1;
N            __IO uint32_t ADC3_AD10:1;
X            volatile uint32_t ADC3_AD10:1;
N            __IO uint32_t ADC4_AD9:1;
X            volatile uint32_t ADC4_AD9:1;
N            __IO uint32_t ADC5_AD8:1;
X            volatile uint32_t ADC5_AD8:1;
N            __IO uint32_t ADC6_AD7:1;
X            volatile uint32_t ADC6_AD7:1;
N            __IO uint32_t ADC7_SS21_AD6:1;
X            volatile uint32_t ADC7_SS21_AD6:1;
N            __IO uint32_t I2C0_SDA:1;
X            volatile uint32_t I2C0_SDA:1;
N            __IO uint32_t I2C0_SCL:1;
X            volatile uint32_t I2C0_SCL:1;
N            __IO uint32_t I2C1_SDA_nWR:1;
X            volatile uint32_t I2C1_SDA_nWR:1;
N            __IO uint32_t I2C1_SCL_nRD:1;
X            volatile uint32_t I2C1_SCL_nRD:1;
N            __IO uint32_t PWM0_AD13:1;
X            volatile uint32_t PWM0_AD13:1;
N            __IO uint32_t PWM1_AD14:1;
X            volatile uint32_t PWM1_AD14:1;
N            __IO uint32_t PWM2_AD15:1;
X            volatile uint32_t PWM2_AD15:1;
N            __IO uint32_t PWM3_I2SMCLK:1;
X            volatile uint32_t PWM3_I2SMCLK:1;
N            __IO uint32_t SCHMITT:16;   
X            volatile uint32_t SCHMITT:16;   
N        } GPAMFP;
N    };   
N    
N    union 
N    {
N        __IO uint32_t u32GPBMFP;
X        volatile uint32_t u32GPBMFP;
N        
N        struct 
N        {
N            __IO uint32_t UART0_RX:1;
X            volatile uint32_t UART0_RX:1;
N            __IO uint32_t UART0_TX:1;
X            volatile uint32_t UART0_TX:1;
N            __IO uint32_t UART0_nRTS_nWRL:1;
X            volatile uint32_t UART0_nRTS_nWRL:1;
N            __IO uint32_t UART0_nCTS_nWRH:1;
X            volatile uint32_t UART0_nCTS_nWRH:1;
N            __IO uint32_t UART1_RX:1;
X            volatile uint32_t UART1_RX:1;
N            __IO uint32_t UART1_TX:1;
X            volatile uint32_t UART1_TX:1;
N            __IO uint32_t UART1_nRTS_ALE:1;
X            volatile uint32_t UART1_nRTS_ALE:1;
N            __IO uint32_t UART1_nCTS_nCS:1;
X            volatile uint32_t UART1_nCTS_nCS:1;
N            __IO uint32_t TM0:1;
X            volatile uint32_t TM0:1;
N            __IO uint32_t TM1_SS11:1;                              
X            volatile uint32_t TM1_SS11:1;                              
N            __IO uint32_t TM2_SS01:1;
X            volatile uint32_t TM2_SS01:1;
N            __IO uint32_t TM3_PWM4:1;                     
X            volatile uint32_t TM3_PWM4:1;                     
N            __IO uint32_t CPO0_CLKO_AD0:1;
X            volatile uint32_t CPO0_CLKO_AD0:1;
N            __IO uint32_t CPO1_AD1:1;
X            volatile uint32_t CPO1_AD1:1;
N            __IO uint32_t INT0_SS31:1;
X            volatile uint32_t INT0_SS31:1;
N            __IO uint32_t INT1:1;
X            volatile uint32_t INT1:1;
N            __IO uint32_t SCHMITT:16;    
X            volatile uint32_t SCHMITT:16;    
N        } GPBMFP;
N    };   
N    
N    union 
N    {
N        __IO uint32_t u32GPCMFP;
X        volatile uint32_t u32GPCMFP;
N        
N        struct 
N        {
N            __IO uint32_t SPI0_SS0_I2SLRCLK:1;
X            volatile uint32_t SPI0_SS0_I2SLRCLK:1;
N            __IO uint32_t SPI0_CLK_I2SBCLK:1;
X            volatile uint32_t SPI0_CLK_I2SBCLK:1;
N            __IO uint32_t SPI0_MISO0_I2SDI:1;
X            volatile uint32_t SPI0_MISO0_I2SDI:1;
N            __IO uint32_t SPI0_MOSI0_I2SDO:1;
X            volatile uint32_t SPI0_MOSI0_I2SDO:1;
N            __IO uint32_t SPI0_MISO1:1;
X            volatile uint32_t SPI0_MISO1:1;
N            __IO uint32_t SPI0_MOSI1:1;
X            volatile uint32_t SPI0_MOSI1:1;
N            __IO uint32_t CPP0_AD4:1;
X            volatile uint32_t CPP0_AD4:1;
N            __IO uint32_t CPN0_AD5:1;
X            volatile uint32_t CPN0_AD5:1;
N            __IO uint32_t SPI1_SS0_MCLK:1;
X            volatile uint32_t SPI1_SS0_MCLK:1;
N            __IO uint32_t SPI1_CLK:1;
X            volatile uint32_t SPI1_CLK:1;
N            __IO uint32_t SPI1_MISO0:1;
X            volatile uint32_t SPI1_MISO0:1;
N            __IO uint32_t SPI1_MOSI0:1;
X            volatile uint32_t SPI1_MOSI0:1;
N            __IO uint32_t SPI1_MISO1:1;
X            volatile uint32_t SPI1_MISO1:1;
N            __IO uint32_t SPI1_MOSI1:1;
X            volatile uint32_t SPI1_MOSI1:1;
N            __IO uint32_t CPP1_AD2:1;
X            volatile uint32_t CPP1_AD2:1;
N            __IO uint32_t CPN1_AD3:1;
X            volatile uint32_t CPN1_AD3:1;
N            __IO uint32_t SCHMITT:16; 
X            volatile uint32_t SCHMITT:16; 
N        } GPCMFP;
N    };   
N    
N    union 
N    {
N        __IO uint32_t u32GPDMFP;
X        volatile uint32_t u32GPDMFP;
N        
N        struct 
N        {
N            __IO uint32_t SPI2_SS0:1;
X            volatile uint32_t SPI2_SS0:1;
N            __IO uint32_t SPI2_CLK_SPI0_SS1:1;
X            volatile uint32_t SPI2_CLK_SPI0_SS1:1;
N            __IO uint32_t SPI2_MISO0_SPI0_MISO1:1;
X            volatile uint32_t SPI2_MISO0_SPI0_MISO1:1;
N            __IO uint32_t SPI2_MOSI0_SPI0_MOSI1:1;
X            volatile uint32_t SPI2_MOSI0_SPI0_MOSI1:1;
N            __IO uint32_t SPI2_MISO1:1;
X            volatile uint32_t SPI2_MISO1:1;
N            __IO uint32_t SPI2_MOSI1:1;
X            volatile uint32_t SPI2_MOSI1:1;
N            __IO uint32_t CAN0_RX:1;
X            volatile uint32_t CAN0_RX:1;
N            __IO uint32_t CAN0_TX:1;
X            volatile uint32_t CAN0_TX:1;
N            __IO uint32_t SPI3_SS0:1;
X            volatile uint32_t SPI3_SS0:1;
N            __IO uint32_t SPI3_CLK:1;
X            volatile uint32_t SPI3_CLK:1;
N            __IO uint32_t SPI3_MISO0:1;
X            volatile uint32_t SPI3_MISO0:1;
N            __IO uint32_t SPI3_MOSI0:1;
X            volatile uint32_t SPI3_MOSI0:1;
N            __IO uint32_t SPI3_MISO1:1;
X            volatile uint32_t SPI3_MISO1:1;
N            __IO uint32_t SPI3_MOSI1:1;
X            volatile uint32_t SPI3_MOSI1:1;
N            __IO uint32_t UART2_RX:1;
X            volatile uint32_t UART2_RX:1;
N            __IO uint32_t UART2_TX:1;
X            volatile uint32_t UART2_TX:1;
N            __IO uint32_t SCHMITT:16;
X            volatile uint32_t SCHMITT:16;
N        } GPDMFP;
N    };   
N    
N    union 
N    {
N        __IO uint32_t u32GPEMFP;
X        volatile uint32_t u32GPEMFP;
N        
N        struct 
N        {
N            __IO uint32_t  PWM6:1;
X            volatile uint32_t  PWM6:1;
N            __IO uint32_t  PWM7:1;
X            volatile uint32_t  PWM7:1;
N            __I  uint32_t  RESERVE1:3;
X            volatile const  uint32_t  RESERVE1:3;
N            __IO uint32_t  PWM5:1;
X            volatile uint32_t  PWM5:1;
N            __I  uint32_t  RESERVE2:10;
X            volatile const  uint32_t  RESERVE2:10;
N            __IO uint32_t  SCHMITT:16;
X            volatile uint32_t  SCHMITT:16;
N        } GPEMFP;
N    };                   
N    
N    uint32_t RESERVE3[3];
N     
N    union 
N    {
N        __IO uint32_t u32ALTMFP;
X        volatile uint32_t u32ALTMFP;
N        
N        struct 
N        {
N            __IO uint32_t  PB10_S01:1;      /* GPB10 */
X            volatile uint32_t  PB10_S01:1;       
N            __IO uint32_t  PB9_S11:1;       /* GPB9  */
X            volatile uint32_t  PB9_S11:1;        
N            __IO uint32_t  PA7_S21:1;       /* GPA7  */
X            volatile uint32_t  PA7_S21:1;        
N            __IO uint32_t  PB14_S31:1;      /* GPB14 */
X            volatile uint32_t  PB14_S31:1;       
N            __IO uint32_t  PB11_PWM4:1;     /* GPB11 */
X            volatile uint32_t  PB11_PWM4:1;      
N            __IO uint32_t  PC0_I2SLRCLK:1;  /* GPC0  */
X            volatile uint32_t  PC0_I2SLRCLK:1;   
N            __IO uint32_t  PC1_I2SBCLK:1;   /* GPC1  */
X            volatile uint32_t  PC1_I2SBCLK:1;    
N            __IO uint32_t  PC2_I2SDI:1;     /* GPC2  */
X            volatile uint32_t  PC2_I2SDI:1;      
N            __IO uint32_t  PC3_I2SDO:1;     /* GPC3  */
X            volatile uint32_t  PC3_I2SDO:1;      
N            __IO uint32_t  PA15_I2SMCLK:1;  /* GPA15 */
X            volatile uint32_t  PA15_I2SMCLK:1;   
N            __IO uint32_t  PB12_CLKO:1;     /* GPB12 */
X            volatile uint32_t  PB12_CLKO:1;      
N            __IO uint32_t  EBI_EN:1;            
X            volatile uint32_t  EBI_EN:1;            
N            __IO uint32_t  EBI_MCLK_EN:1;   /* GPC8  */
X            volatile uint32_t  EBI_MCLK_EN:1;    
N            __IO uint32_t  EBI_WRL_EN:1;    /* GPB2  */
X            volatile uint32_t  EBI_WRL_EN:1;     
N            __IO uint32_t  EBI_WRH_EN:1;    /* GPB3  */
X            volatile uint32_t  EBI_WRH_EN:1;     
N            __I  uint32_t  RESERVE0:1;  
X            volatile const  uint32_t  RESERVE0:1;  
N            __IO uint32_t  EBI_HB_EN:8;     
X            volatile uint32_t  EBI_HB_EN:8;     
N            __IO uint32_t  PB15_T0EX:1;
X            volatile uint32_t  PB15_T0EX:1;
N            __IO uint32_t  PE5_T1EX:1;
X            volatile uint32_t  PE5_T1EX:1;
N            __IO uint32_t  PB2_T2EX:1;
X            volatile uint32_t  PB2_T2EX:1;
N            __IO uint32_t  PB3_T3EX:1;
X            volatile uint32_t  PB3_T3EX:1;
N            __I  uint32_t  RESERVE1:4;  
X            volatile const  uint32_t  RESERVE1:4;  
N        } ALTMFP;
N    };   
N    
N    uint32_t RESERVE4[43];
N    
N    union 
N    {
N        __IO uint32_t u32REGWRPROT;
X        volatile uint32_t u32REGWRPROT;
N        __IO uint32_t REGWRPROT;
X        volatile uint32_t REGWRPROT;
N    };  
N} GCR_T;
N
N/* GCR RSTSRC Bit Field Definitions */
N#define GCR_RSTSRC_RSTS_CPU_Pos                 7
N#define GCR_RSTSRC_RSTS_CPU_Msk                 (1ul << GCR_RSTSRC_RSTS_CPU_Pos)
N
N#define GCR_RSTSRC_RSTS_SYS_Pos                 5
N#define GCR_RSTSRC_RSTS_SYS_Msk                 (1ul << GCR_RSTSRC_RSTS_SYS_Pos)
N
N#define GCR_RSTSRC_RSTS_BOD_Pos                 4
N#define GCR_RSTSRC_RSTS_BOD_Msk                 (1ul << GCR_RSTSRC_RSTS_BOD_Pos)
N
N#define GCR_RSTSRC_RSTS_LVR_Pos                 3
N#define GCR_RSTSRC_RSTS_LVR_Msk                 (1ul << GCR_RSTSRC_RSTS_LVR_Pos)
N
N#define GCR_RSTSRC_RSTS_WDT_Pos                 2
N#define GCR_RSTSRC_RSTS_WDT_Msk                 (1ul << GCR_RSTSRC_RSTS_WDT_Pos)
N
N#define GCR_RSTSRC_RSTS_RESET_Pos               1
N#define GCR_RSTSRC_RSTS_RESET_Msk               (1ul << GCR_RSTSRC_RSTS_RESET_Pos)
N
N#define GCR_RSTSRC_RSTS_POR_Pos                 0
N#define GCR_RSTSRC_RSTS_POR_Msk                 (1ul << GCR_RSTSRC_RSTS_POR_Pos)
N
N/* GCR IPRSTC1 Bit Field Definitions */
N#define GCR_IPRSTC1_EBI_RST_Pos                 3
N#define GCR_IPRSTC1_EBI_RST_Msk                 (1ul << GCR_IPRSTC1_EBI_RST_Pos)
N
N#define GCR_IPRSTC1_PDMA_RST_Pos                2
N#define GCR_IPRSTC1_PDMA_RST_Msk                (1ul << GCR_IPRSTC1_PDMA_RST_Pos)
N
N#define GCR_IPRSTC1_CPU_RST_Pos                 1
N#define GCR_IPRSTC1_CPU_RST_Msk                 (1ul << GCR_IPRSTC1_CPU_RST_Pos)
N
N#define GCR_IPRSTC1_CHIP_RST_Pos                0
N#define GCR_IPRSTC1_CHIP_RST_Msk                (1ul << GCR_IPRSTC1_CHIP_RST_Pos)
N
N/* GCR IPRSTC2 Bit Field Definitions */
N#define GCR_IPRSTC2_I2S_RST_Pos                 29
N#define GCR_IPRSTC2_I2S_RST_Msk                 (1ul << GCR_IPRSTC2_I2S_RST_Pos)
N
N#define GCR_IPRSTC2_ADC_RST_Pos                 28
N#define GCR_IPRSTC2_ADC_RST_Msk                 (1ul << GCR_IPRSTC2_ADC_RST_Pos)
N
N#define GCR_IPRSTC2_USBD_RST_Pos                27
N#define GCR_IPRSTC2_USBD_RST_Msk                (1ul << GCR_IPRSTC2_USBD_RST_Pos)
N
N#define GCR_IPRSTC2_CAN0_RST_Pos                24
N#define GCR_IPRSTC2_CAN0_RST_Msk                (1ul << GCR_IPRSTC2_CAN0_RST_Pos)
N
N#define GCR_IPRSTC2_PS2_RST_Pos                 23
N#define GCR_IPRSTC2_PS2_RST_Msk                 (1ul << GCR_IPRSTC2_PS2_RST_Pos)
N
N#define GCR_IPRSTC2_ACMP_RST_Pos                22
N#define GCR_IPRSTC2_ACMP_RST_Msk                (1ul << GCR_IPRSTC2_ACMP_RST_Pos)
N
N#define GCR_IPRSTC2_PWM47_RST_Pos               21
N#define GCR_IPRSTC2_PWM47_RST_Msk               (1ul << GCR_IPRSTC2_PWM47_RST_Pos)
N
N#define GCR_IPRSTC2_PWM03_RST_Pos               20
N#define GCR_IPRSTC2_PWM03_RST_Msk               (1ul << GCR_IPRSTC2_PWM03_RST_Pos)
N
N#define GCR_IPRSTC2_UART2_RST_Pos               18
N#define GCR_IPRSTC2_UART2_RST_Msk               (1ul << GCR_IPRSTC2_UART2_RST_Pos)
N
N#define GCR_IPRSTC2_UART1_RST_Pos               17
N#define GCR_IPRSTC2_UART1_RST_Msk               (1ul << GCR_IPRSTC2_UART1_RST_Pos)
N
N#define GCR_IPRSTC2_UART0_RST_Pos               16
N#define GCR_IPRSTC2_UART0_RST_Msk               (1ul << GCR_IPRSTC2_UART0_RST_Pos)
N
N#define GCR_IPRSTC2_SPI3_RST_Pos                15
N#define GCR_IPRSTC2_SPI3_RST_Msk                (1ul << GCR_IPRSTC2_SPI3_RST_Pos)
N
N#define GCR_IPRSTC2_SPI2_RST_Pos                14
N#define GCR_IPRSTC2_SPI2_RST_Msk                (1ul << GCR_IPRSTC2_SPI2_RST_Pos)
N
N#define GCR_IPRSTC2_SPI1_RST_Pos                13
N#define GCR_IPRSTC2_SPI1_RST_Msk                (1ul << GCR_IPRSTC2_SPI1_RST_Pos)
N
N#define GCR_IPRSTC2_SPI0_RST_Pos                12
N#define GCR_IPRSTC2_SPI0_RST_Msk                (1ul << GCR_IPRSTC2_SPI0_RST_Pos)
N
N#define GCR_IPRSTC2_I2C1_RST_Pos                9
N#define GCR_IPRSTC2_I2C1_RST_Msk                (1ul << GCR_IPRSTC2_I2C1_RST_Pos)
N
N#define GCR_IPRSTC2_I2C0_RST_Pos                8
N#define GCR_IPRSTC2_I2C0_RST_Msk                (1ul << GCR_IPRSTC2_I2C0_RST_Pos)
N
N#define GCR_IPRSTC2_TMR3_RST_Pos                5
N#define GCR_IPRSTC2_TMR3_RST_Msk                (1ul << GCR_IPRSTC2_TMR3_RST_Pos)
N
N#define GCR_IPRSTC2_TMR2_RST_Pos                4
N#define GCR_IPRSTC2_TMR2_RST_Msk                (1ul << GCR_IPRSTC2_TMR2_RST_Pos)
N
N#define GCR_IPRSTC2_TMR1_RST_Pos                3
N#define GCR_IPRSTC2_TMR1_RST_Msk                (1ul << GCR_IPRSTC2_TMR1_RST_Pos)
N
N#define GCR_IPRSTC2_TMR0_RST_Pos                2
N#define GCR_IPRSTC2_TMR0_RST_Msk                (1ul << GCR_IPRSTC2_TMR0_RST_Pos)
N
N#define GCR_IPRSTC2_GPIO_RST_Pos                1
N#define GCR_IPRSTC2_GPIO_RST_Msk                (1ul << GCR_IPRSTC2_GPIO_RST_Pos)
N
N/* GCR CPR Bit Field Definitions */
N#define GCR_CPR_HPE_Pos                         0
N#define GCR_CPR_HPE_Msk                         (1ul << GCR_CPR_HPE_Pos)
N
N/* GCR BODCR Bit Field Definitions */
N#define GCR_BODCR_LVR_EN_Pos                    7
N#define GCR_BODCR_LVR_EN_Msk                    (1ul << GCR_BODCR_LVR_EN_Pos)
N
N#define GCR_BODCR_BOD_OUT_Pos                   6
N#define GCR_BODCR_BOD_OUT_Msk                   (1ul << GCR_BODCR_BOD_OUT_Pos)
N
N#define GCR_BODCR_BOD_LPM_Pos                   5
N#define GCR_BODCR_BOD_LPM_Msk                   (1ul << GCR_BODCR_BOD_LPM_Pos)
N
N#define GCR_BODCR_BOD_INTF_Pos                  4
N#define GCR_BODCR_BOD_INTF_Msk                  (1ul << GCR_BODCR_BOD_INTF_Pos)
N
N#define GCR_BODCR_BOD_RSTEN_Pos                 3
N#define GCR_BODCR_BOD_RSTEN_Msk                 (1ul << GCR_BODCR_BOD_RSTEN_Pos)
N
N#define GCR_BODCR_BOD_VL_Pos                    1
N#define GCR_BODCR_BOD_VL_Msk                    (3ul << GCR_BODCR_BOD_VL_Pos)
N
N#define GCR_BODCR_BOD_EN_Pos                    0
N#define GCR_BODCR_BOD_EN_Msk                    (1ul << GCR_BODCR_BOD_EN_Pos)
N
N/* GCR TEMPCR Bit Field Definitions */
N#define GCR_TEMPCR_VTEMP_EN_Pos                 0
N#define GCR_TEMPCR_VTEMP_EN_Msk                 (1ul << GCR_TEMPCR_VTEMP_EN_Pos)
N
N/* GCR PORCR Bit Field Definitions */
N#define GCR_PORCR_POR_DIS_CODE_Pos              0
N#define GCR_PORCR_POR_DIS_CODE_Msk              (0xFFFFul << GCR_PORCR_POR_DIS_CODE_Pos)
N
N/* GCR GPAMFP Bit Field Definitions */
N#define GCR_GPAMFP_GPA_TYPE_Pos                 16
N#define GCR_GPAMFP_GPA_TYPE_Msk                 (0xFFFFul << GCR_GPAMFP_GPA_TYPE_Pos)
N
N#define GCR_GPAMFP_GPA_MFP_Pos                  0
N#define GCR_GPAMFP_GPA_MFP_Msk                  (0xFFFFul << GCR_GPAMFP_GPA_MFP_Pos)
N
N
N/* GCR GPBMFP Bit Field Definitions */
N#define GCR_GPBMFP_GPB_TYPE_Pos                 16
N#define GCR_GPBMFP_GPB_TYPE_Msk                 (0xFFFFul << GCR_GPBMFP_GPB_TYPE_Pos)
N
N#define GCR_GPBMFP_GPB_MFP_Pos                  0
N#define GCR_GPBMFP_GPB_MFP_Msk                  (0xFFFFul << GCR_GPBMFP_GPB_MFP_Pos)
N
N/* GCR GPCMFP Bit Field Definitions */
N#define GCR_GPCMFP_GPC_TYPE_Pos                 16
N#define GCR_GPCMFP_GPC_TYPE_Msk                 (0xFFFFul << GCR_GPCMFP_GPC_TYPE_Pos)
N
N#define GCR_GPCMFP_GPC_MFP_Pos                  0
N#define GCR_GPCMFP_GPC_MFP_Msk                  (0xFFFFul << GCR_GPCMFP_GPC_MFP_Pos)
N
N/* GCR GPDMFP Bit Field Definitions */
N#define GCR_GPDMFP_GPD_TYPE_Pos                 16
N#define GCR_GPDMFP_GPD_TYPE_Msk                 (0xFFFFul << GCR_GPDMFP_GPD_TYPE_Pos)
N
N#define GCR_GPDMFP_GPD_MFP_Pos                  0
N#define GCR_GPDMFP_GPD_MFP_Msk                  (0xFFFFul << GCR_GPDMFP_GPD_MFP_Pos)
N
N/* GCR GPEMFP Bit Field Definitions */
N#define GCR_GPEMFP_GPE_TYPE_Pos                 16
N#define GCR_GPEMFP_GPE_TYPE_Msk                 (0xFFFFul << GCR_GPEMFP_GPE_TYPE_Pos)
N
N#define GCR_GPEMFP_GPE_MFP5_Pos                 5
N#define GCR_GPEMFP_GPE_MFP5_Msk                 (1ul << GCR_GPEMFP_GPE_MFP5_Pos)
N
N#define GCR_GPEMFP_GPE_MFP1_Pos                 1
N#define GCR_GPEMFP_GPE_MFP1_Msk                 (1ul << GCR_GPEMFP_GPE_MFP1_Pos)
N
N#define GCR_GPEMFP_GPE_MFP0_Pos                 0
N#define GCR_GPEMFP_GPE_MFP0_Msk                 (1ul << GCR_GPEMFP_GPE_MFP0_Pos)
N
N/* GCR ALTMFP Bit Field Definitions */
N#define GCR_ALTMFP_PB3_T3EX_Pos                 27
N#define GCR_ALTMFP_PB3_T3EX_Msk                 (1ul << GCR_ALTMFP_PB3_T3EX_Pos)
N
N#define GCR_ALTMFP_PB2_T2EX_Pos                 26
N#define GCR_ALTMFP_PB2_T2EX_Msk                 (1ul << GCR_ALTMFP_PB2_T2EX_Pos)
N
N#define GCR_ALTMFP_PE5_T1EX_Pos                 25
N#define GCR_ALTMFP_PE5_T1EX_Msk                 (1ul << GCR_ALTMFP_PE5_T1EX_Pos)
N
N#define GCR_ALTMFP_PB15_T0EX_Pos                24
N#define GCR_ALTMFP_PB15_T0EX_Msk                (1ul << GCR_ALTMFP_PB15_T0EX_Pos)
N
N#define GCR_ALTMFP_EBI_HB_EN_Pos                16
N#define GCR_ALTMFP_EBI_HB_EN_Msk                (0xFFul << GCR_ALTMFP_EBI_HB_EN_Pos)
N
N#define GCR_ALTMFP_EBI_nWRH_EN_Pos              14
N#define GCR_ALTMFP_EBI_nWRH_EN_Msk              (1ul << GCR_ALTMFP_EBI_nWRH_EN_Pos)
N
N#define GCR_ALTMFP_EBI_nWRL_EN_Pos              13
N#define GCR_ALTMFP_EBI_nWRL_EN_Msk              (1ul << GCR_ALTMFPEBI_nWRL_EN_Pos)
N
N#define GCR_ALTMFP_EBI_MCLK_EN_Pos              12
N#define GCR_ALTMFP_EBI_MCLK_EN_Msk              (1ul << GCR_ALTMFP_EBI_MCLK_EN_Pos)
N
N#define GCR_ALTMFP_EBI_EN_Pos                   11
N#define GCR_ALTMFP_EBI_EN_Msk                   (1ul << GCR_ALTMFP_EBI_EN_Pos)
N
N#define GCR_ALTMFP_PB12_CLKO_Pos                10
N#define GCR_ALTMFP_PB12_CLKO_Msk                (1ul << GCR_ALTMFP_PB12_CLKO_Pos)
N
N#define GCR_ALTMFP_PA15_I2SMCLK_Pos             9
N#define GCR_ALTMFP_PA15_I2SMCLK_Msk             (1ul << GCR_ALTMFP_PA15_I2SMCLK_Pos)
N
N#define GCR_ALTMFP_PC3_I2SDO_Pos                8
N#define GCR_ALTMFP_PC3_I2SDO_Msk                (1ul << GCR_ALTMFP_PC3_I2SDO_Pos)
N
N#define GCR_ALTMFP_PC2_I2SDI_Pos                7
N#define GCR_ALTMFP_PC2_I2SDI_Msk                (1ul << GCR_ALTMFP_PC2_I2SDI_Pos)
N
N#define GCR_ALTMFP_PC1_I2SBCLK_Pos              6
N#define GCR_ALTMFP_PC1_I2SBCLK_Msk              (1ul << GCR_ALTMFP_PC1_I2SBCLK_Pos)
N
N#define GCR_ALTMFP_PC0_I2SLRCLK_Pos             5
N#define GCR_ALTMFP_PC0_I2SLRCLK_Msk             (1ul << GCR_ALTMFP_PC0_I2SLRCLK_Pos)
N
N#define GCR_ALTMFP_PB11_PWM4_Pos                4
N#define GCR_ALTMFP_PB11_PWM4_Msk                (1ul << GCR_ALTMFP_PB11_PWM4_Pos)
N
N#define GCR_ALTMFP_PB14_S31_Pos                 3
N#define GCR_ALTMFP_PB14_S31_Msk                 (1ul << GCR_ALTMFP_PB14_S31_Pos)
N
N#define GCR_ALTMFP_PA7_S21_Pos                  2
N#define GCR_ALTMFP_PA7_S21_Msk                  (1ul << GCR_ALTMFP_PA7_S21_Pos)
N
N#define GCR_ALTMFP_PB9_S11_Pos                  1
N#define GCR_ALTMFP_PB9_S11_Msk                  (1ul << GCR_ALTMFP_PB9_S11_Pos)
N
N#define GCR_ALTMFP_PB10_S01_Pos                 0
N#define GCR_ALTMFP_PB10_S01_Msk                 (1ul << GCR_ALTMFP_PB10_S01_Pos)
N
N/* GCR REGWRPROT Bit Field Definitions */
N#define GCR_REGWRPROT_REGWRPROT_Pos             0
N#define GCR_REGWRPROT_REGWRPROT_Msk             (0xFFul << GCR_REGWRPROT_REGWRPROT_Pos)
N
N
Ntypedef struct
N{
N    __IO uint32_t  INTSRC:4;
X    volatile uint32_t  INTSRC:4;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} GCR_IRQSRC_T;
N
Ntypedef struct
N{
N    __IO uint32_t  NMISEL:5;
X    volatile uint32_t  NMISEL:5;
N    __I  uint32_t  RESERVE0:3;
X    volatile const  uint32_t  RESERVE0:3;
N    __IO uint32_t  NMI_EN:1;
X    volatile uint32_t  NMI_EN:1;
N    __I  uint32_t  RESERVE1:23;
X    volatile const  uint32_t  RESERVE1:23;
N} GCR_NMISEL_T;
N
N
Ntypedef __IO uint32_t GCR_MCUIRQ_T;
Xtypedef volatile uint32_t GCR_MCUIRQ_T;
N
Ntypedef struct
N{
N    union 
N    {
N        __I uint32_t u32IRQSRC[32];
X        volatile const uint32_t u32IRQSRC[32];
N        __I uint32_t IRQSRC[32];
X        volatile const uint32_t IRQSRC[32];
N    };
N
N    union 
N    {
N        __IO uint32_t u32NMISEL;
X        volatile uint32_t u32NMISEL;
N        
N        struct 
N        {
N            __IO uint32_t  NMISEL:5;
X            volatile uint32_t  NMISEL:5;
N            __I  uint32_t  RESERVE0:3;
X            volatile const  uint32_t  RESERVE0:3;
N            __IO uint32_t  NMI_EN:1;
X            volatile uint32_t  NMI_EN:1;
N            __I  uint32_t  RESERVE1:23;
X            volatile const  uint32_t  RESERVE1:23;
N        } NMISEL;
N    };
N
N    union 
N    {
N        __IO uint32_t u32MCUIRQ;
X        volatile uint32_t u32MCUIRQ;
N        __IO uint32_t MCUIRQ;
X        volatile uint32_t MCUIRQ;
N    };
N} GCR_INT_T;
N
N/* GCR IRQSRC Bit Field Definitions */
N#define GCR_IRQSRC_INT_SRC_Pos                  0
N#define GCR_IRQSRC_INT_SRC_Msk                  (0xFul << GCR_IRQSRC_INT_SRC_Pos)
N
N/* GCR NMISEL Bit Field Definitions */
N#define GCR_NMISEL_NMI_EN_Pos                   8
N#define GCR_NMISEL_NMI_EN_Msk                   (1ul << GCR_NMISEL_NMI_EN_Pos)
N
N#define GCR_NMISEL_NMISEL_Pos                   0
N#define GCR_NMISEL_NMISEL_Msk                   (0x1Ful << GCR_NMISEL_NMISEL_Pos)
N
N/*-------------------------- FLASH Memory Controller -------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  ISPEN:1;
X    volatile uint32_t  ISPEN:1;
N    __IO uint32_t  BS:1;
X    volatile uint32_t  BS:1;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  APUEN:1;
X    volatile uint32_t  APUEN:1;
N    __IO uint32_t  CFGUEN:1;
X    volatile uint32_t  CFGUEN:1;
N    __IO uint32_t  LDUEN:1;
X    volatile uint32_t  LDUEN:1;
N    __IO uint32_t  ISPFF:1;
X    volatile uint32_t  ISPFF:1;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __IO uint32_t  PT:3;
X    volatile uint32_t  PT:3;
N    __I  uint32_t  RESERVE2:1;
X    volatile const  uint32_t  RESERVE2:1;
N    __IO uint32_t  ET:3;
X    volatile uint32_t  ET:3;
N    __I  uint32_t  RESERVE3:17;
X    volatile const  uint32_t  RESERVE3:17;
N
N} FMC_ISPCON_T;
N
Ntypedef __IO uint32_t FMC_ISPADR_T;
Xtypedef volatile uint32_t FMC_ISPADR_T;
Ntypedef __IO uint32_t FMC_ISPDAT_T;
Xtypedef volatile uint32_t FMC_ISPDAT_T;
N
Ntypedef struct
N{
N    __IO uint32_t  FCTRL:4;
X    volatile uint32_t  FCTRL:4;
N    __IO uint32_t  FCEN:1;
X    volatile uint32_t  FCEN:1;
N    __IO uint32_t  FOEN:1;
X    volatile uint32_t  FOEN:1;
N    __I  uint32_t  RESERVE:26;
X    volatile const  uint32_t  RESERVE:26;
N} FMC_ISPCMD_T;
N
Ntypedef struct
N{
N    __IO uint32_t  ISPGO:1;
X    volatile uint32_t  ISPGO:1;
N    __I  uint32_t  RESERVE:31;
X    volatile const  uint32_t  RESERVE:31;
N} FMC_ISPTRG_T;
N
Ntypedef __I uint32_t FMC_DFBADR_T;
Xtypedef volatile const uint32_t FMC_DFBADR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  FPSEN:1;
X    volatile uint32_t  FPSEN:1;
N    __IO uint32_t  FATS:3;
X    volatile uint32_t  FATS:3;
N    __IO uint32_t  LFOM:1;
X    volatile uint32_t  LFOM:1;
N    __I  uint32_t  RESERVE:27;
X    volatile const  uint32_t  RESERVE:27;
N} FMC_FATCON_T;
N
Ntypedef struct
N{
N    union 
N    {
N        __IO uint32_t u32ISPCON;
X        volatile uint32_t u32ISPCON;
N        
N        struct 
N        {
N            __IO uint32_t  ISPEN:1;
X            volatile uint32_t  ISPEN:1;
N            __IO uint32_t  BS:1;
X            volatile uint32_t  BS:1;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  APUEN:1;
X            volatile uint32_t  APUEN:1;
N            __IO uint32_t  CFGUEN:1;
X            volatile uint32_t  CFGUEN:1;
N            __IO uint32_t  LDUEN:1;
X            volatile uint32_t  LDUEN:1;
N            __IO uint32_t  ISPFF:1;
X            volatile uint32_t  ISPFF:1;
N            __I  uint32_t  RESERVE1:1;
X            volatile const  uint32_t  RESERVE1:1;
N            __IO uint32_t  PT:3;
X            volatile uint32_t  PT:3;
N            __I  uint32_t  RESERVE2:1;
X            volatile const  uint32_t  RESERVE2:1;
N            __IO uint32_t  ET:3;
X            volatile uint32_t  ET:3;
N            __I  uint32_t  RESERVE3:17;
X            volatile const  uint32_t  RESERVE3:17;
N        } ISPCON;
N    };
N
N    union 
N    {
N        __IO uint32_t u32ISPADR;
X        volatile uint32_t u32ISPADR;
N        __IO uint32_t ISPADR;
X        volatile uint32_t ISPADR;
N    };
N
N    union 
N    {
N        __IO uint32_t u32ISPDAT;
X        volatile uint32_t u32ISPDAT;
N        __IO uint32_t ISPDAT;
X        volatile uint32_t ISPDAT;
N    };
N    
N    union 
N    {
N        __IO uint32_t u32ISPCMD;
X        volatile uint32_t u32ISPCMD;
N        
N        struct 
N        {
N            __IO uint32_t  FCTRL:4;
X            volatile uint32_t  FCTRL:4;
N            __IO uint32_t  FCEN:1;
X            volatile uint32_t  FCEN:1;
N            __IO uint32_t  FOEN:1;
X            volatile uint32_t  FOEN:1;
N            __I  uint32_t  RESERVE:26;
X            volatile const  uint32_t  RESERVE:26;
N        } ISPCMD;
N    };
N
N    union 
N    {
N        __IO uint32_t u32ISPTRG;
X        volatile uint32_t u32ISPTRG;
N        
N        struct 
N        {
N            __IO uint32_t  ISPGO:1;
X            volatile uint32_t  ISPGO:1;
N            __I  uint32_t  RESERVE:31;
X            volatile const  uint32_t  RESERVE:31;
N        } ISPTRG;
N    };
N    
N    union 
N    {
N        __I uint32_t u32DFBADR;
X        volatile const uint32_t u32DFBADR;
N        __I uint32_t DFBADR;
X        volatile const uint32_t DFBADR;
N    };
N
N    union 
N    {
N        __IO uint32_t u32FATCON;
X        volatile uint32_t u32FATCON;
N        
N        struct 
N        {
N            __IO uint32_t  FPSEN:1;
X            volatile uint32_t  FPSEN:1;
N            __IO uint32_t  FATS:3;
X            volatile uint32_t  FATS:3;
N            __IO uint32_t  LFOM:1;
X            volatile uint32_t  LFOM:1;
N            __I  uint32_t  RESERVE:27;
X            volatile const  uint32_t  RESERVE:27;
N        } FATCON;
N    };
N} FMC_T;
N
N/* FMC ISPCON Bit Field Definitions */
N#define FMC_ISPCON_ET_Pos                       12
N#define FMC_ISPCON_ET_Msk                       (7ul << FMC_ISPCON_ET_Pos)
N
N#define FMC_ISPCON_PT_Pos                       8
N#define FMC_ISPCON_PT_Msk                       (7ul << FMC_ISPCON_PT_Pos)
N
N#define FMC_ISPCON_ISPFF_Pos                    6
N#define FMC_ISPCON_ISPFF_Msk                    (1ul << FMC_ISPCON_ISPFF_Pos)
N
N#define FMC_ISPCON_LDUEN_Pos                    5
N#define FMC_ISPCON_LDUEN_Msk                    (1ul << FMC_ISPCON_LDUEN_Pos)
N
N#define FMC_ISPCON_CFGUEN_Pos                   4
N#define FMC_ISPCON_CFGUEN_Msk                   (1ul << FMC_ISPCON_CFGUEN_Pos)
N
N#define FMC_ISPCON_APUEN_Pos                    3
N#define FMC_ISPCON_APUEN_Msk                    (1ul << FMC_ISPCON_APUEN_Pos)
N
N#define FMC_ISPCON_BS_Pos                       1
N#define FMC_ISPCON_BS_Msk                       (1ul << FMC_ISPCON_BS_Pos)
N
N#define FMC_ISPCON_ISPEN_Pos                    0
N#define FMC_ISPCON_ISPEN_Msk                    (1ul << FMC_ISPCON_ISPEN_Pos)
N
N/* FMC ISPADR Bit Field Definitions */
N#define FMC_ISPADR_ISPADR_Pos                   0
N#define FMC_ISPADR_ISPADR_Msk                   (0xFFFFFFFFul << FMC_ISPADR_ISPADR_Pos)
N
N/* FMC ISPADR Bit Field Definitions */
N#define FMC_ISPDAT_ISPDAT_Pos                   0
N#define FMC_ISPDAT_ISPDAT_Msk                   (0xFFFFFFFFul << FMC_ISPDAT_ISPDAT_Pos)
N
N/* FMC ISPCMD Bit Field Definitions */
N#define FMC_ISPCMD_FOEN_Pos                     5
N#define FMC_ISPCMD_FOEN_Msk                     (1ul << FMC_ISPCMD_FOEN_Pos)
N
N#define FMC_ISPCMD_FCEN_Pos                     4
N#define FMC_ISPCMD_FCEN_Msk                     (1ul << FMC_ISPCMD_FCEN_Pos)
N
N#define FMC_ISPCMD_FCTRL_Pos                    0
N#define FMC_ISPCMD_FCTRL_Msk                    (0xFul << FMC_ISPCMD_FCTRL_Pos)
N
N/* FMC ISPTRG Bit Field Definitions */
N#define FMC_ISPTRG_ISPGO_Pos                    0
N#define FMC_ISPTRG_ISPGO_Msk                    (1ul << FMC_ISPTRG_ISPGO_Pos)
N
N/* FMC DFBADR Bit Field Definitions */
N#define FMC_DFBADR_DFBA_Pos                     0
N#define FMC_DFBADR_DFBA_Msk                     (0xFFFFFFFFul << FMC_DFBADR_DFBA_Pos)
N
N/* FMC FATCON Bit Field Definitions */
N#define FMC_FATCON_LFOM_Pos                     4
N#define FMC_FATCON_LFOM_Msk                     (1ul << FMC_FATCON_LFOM_Pos)
N
N#define FMC_FATCON_FATS_Pos                     1
N#define FMC_FATCON_FATS_Msk                     (7ul << FMC_FATCON_FATS_Pos)
N
N#define FMC_FATCON_FPSEN_Pos                    0
N#define FMC_FATCON_FPSEN_Msk                    (1ul << FMC_FATCON_FPSEN_Pos)
N
N/*------------------------ PS2 Device Interface Controller -------------------*/
Ntypedef struct
N{
N    __IO uint32_t  PS2EN:1;
X    volatile uint32_t  PS2EN:1;
N    __IO uint32_t  TXINTEN:1;
X    volatile uint32_t  TXINTEN:1;
N    __IO uint32_t  RXINTEN:1;
X    volatile uint32_t  RXINTEN:1;
N    __IO uint32_t  TXFIFO_DEPTH:4;
X    volatile uint32_t  TXFIFO_DEPTH:4;
N    __IO uint32_t  ACK:1;
X    volatile uint32_t  ACK:1;
N    __IO uint32_t  CLRFIFO:1;
X    volatile uint32_t  CLRFIFO:1;
N    __IO uint32_t  OVERRIDE:1;
X    volatile uint32_t  OVERRIDE:1;
N    __IO uint32_t  FPS2CLK:1;
X    volatile uint32_t  FPS2CLK:1;
N    __IO uint32_t  FPS2DAT:1;
X    volatile uint32_t  FPS2DAT:1;
N    __I  uint32_t  RESERVE:20;
X    volatile const  uint32_t  RESERVE:20;
N} PS2_CON_T;
N
Ntypedef __IO uint32_t PS2_DATA_T;
Xtypedef volatile uint32_t PS2_DATA_T;
N
Ntypedef struct
N{
N    __IO uint32_t  PS2CLK:1;
X    volatile uint32_t  PS2CLK:1;
N    __IO uint32_t  PS2DATA:1;
X    volatile uint32_t  PS2DATA:1;
N    __IO uint32_t  FRAMERR:1;
X    volatile uint32_t  FRAMERR:1;
N    __IO uint32_t  RXPARTY:1;
X    volatile uint32_t  RXPARTY:1;
N    __IO uint32_t  RXBUSY:1;
X    volatile uint32_t  RXBUSY:1;
N    __IO uint32_t  TXBUSY:1;
X    volatile uint32_t  TXBUSY:1;
N    __IO uint32_t  RXOVF:1;
X    volatile uint32_t  RXOVF:1;
N    __IO uint32_t  TXEMPTY:1;
X    volatile uint32_t  TXEMPTY:1;
N    __IO uint32_t  BYTEIDX:4;
X    volatile uint32_t  BYTEIDX:4;
N    __I  uint32_t  RESERVE:20;
X    volatile const  uint32_t  RESERVE:20;
N} PS2_STATUS_T;
N
Ntypedef struct
N{
N    __IO uint32_t  RXINT:1;
X    volatile uint32_t  RXINT:1;
N    __IO uint32_t  TXINT:1;
X    volatile uint32_t  TXINT:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} PS2_INTID_T;
N
Ntypedef struct
N{
N    union
N    {
N        __IO uint32_t u32PS2CON;
X        volatile uint32_t u32PS2CON;
N
N        struct
N        {
N            __IO uint32_t  PS2EN:1;
X            volatile uint32_t  PS2EN:1;
N            __IO uint32_t  TXINTEN:1;
X            volatile uint32_t  TXINTEN:1;
N            __IO uint32_t  RXINTEN:1;
X            volatile uint32_t  RXINTEN:1;
N            __IO uint32_t  TXFIFO_DEPTH:4;
X            volatile uint32_t  TXFIFO_DEPTH:4;
N            __IO uint32_t  ACK:1;
X            volatile uint32_t  ACK:1;
N            __IO uint32_t  CLRFIFO:1;
X            volatile uint32_t  CLRFIFO:1;
N            __IO uint32_t  OVERRIDE:1;
X            volatile uint32_t  OVERRIDE:1;
N            __IO uint32_t  FPS2CLK:1;
X            volatile uint32_t  FPS2CLK:1;
N            __IO uint32_t  FPS2DAT:1;
X            volatile uint32_t  FPS2DAT:1;
N            __I  uint32_t  RESERVE:20;      
X            volatile const  uint32_t  RESERVE:20;      
N        } PS2CON;
N    };
N
N    union
N    {
N        __IO uint32_t u32TXDATA[4];
X        volatile uint32_t u32TXDATA[4];
N        __IO uint32_t TXDATA[4];        
X        volatile uint32_t TXDATA[4];        
N    };
N
N    union
N    {
N        __I uint32_t u32RXDATA;
X        volatile const uint32_t u32RXDATA;
N        __I uint32_t RXDATA;
X        volatile const uint32_t RXDATA;
N    };
N
N    union
N    {
N        __IO uint32_t u32STATUS;
X        volatile uint32_t u32STATUS;
N
N        struct
N        {
N            __IO uint32_t  PS2CLK:1;
X            volatile uint32_t  PS2CLK:1;
N            __IO uint32_t  PS2DATA:1;
X            volatile uint32_t  PS2DATA:1;
N            __IO uint32_t  FRAMERR:1;
X            volatile uint32_t  FRAMERR:1;
N            __IO uint32_t  RXPARTY:1;
X            volatile uint32_t  RXPARTY:1;
N            __IO uint32_t  RXBUSY:1;
X            volatile uint32_t  RXBUSY:1;
N            __IO uint32_t  TXBUSY:1;
X            volatile uint32_t  TXBUSY:1;
N            __IO uint32_t  RXOVF:1;
X            volatile uint32_t  RXOVF:1;
N            __IO uint32_t  TXEMPTY:1;
X            volatile uint32_t  TXEMPTY:1;
N            __IO uint32_t  BYTEIDX:4;
X            volatile uint32_t  BYTEIDX:4;
N            __I  uint32_t  RESERVE:20;            
X            volatile const  uint32_t  RESERVE:20;            
N        } STATUS;
N    };
N
N    union
N    {
N        __IO uint32_t u32INTID;
X        volatile uint32_t u32INTID;
N
N        struct
N        {
N            __IO uint32_t  RXINT:1;
X            volatile uint32_t  RXINT:1;
N            __IO uint32_t  TXINT:1;
X            volatile uint32_t  TXINT:1;
N            __I  uint32_t  RESERVE:30;
X            volatile const  uint32_t  RESERVE:30;
N        } INTID;          
N    };
N} PS2_T;
N
N/* PS/2 PS2CON Bit Field Definitions */
N#define PS2_PS2CON_PS2EN_Pos                       0
N#define PS2_PS2CON_PS2EN_Msk                       (1ul << PS2_PS2CON_PS2EN_Pos)  
N
N#define PS2_PS2CON_TXINTEN_Pos                     1
N#define PS2_PS2CON_TXINTEN_Msk                     (1ul << PS2_PS2CON_TXINTEN_Pos) 
N
N#define PS2_PS2CON_RXINTEN_Pos                     2
N#define PS2_PS2CON_RXINTEN_Msk                     (1ul << PS2_PS2CON_RXINTEN_Pos)  
N
N#define PS2_PS2CON_TXFIFO_DEPTH_Pos                3
N#define PS2_PS2CON_TXFIFO_DEPTH_Msk                (0xFul << PS2_PS2CON_TXFIFO_DEPTH_Pos)
N
N#define PS2_PS2CON_ACK_Pos                         7
N#define PS2_PS2CON_ACK_Msk                         (1ul << PS2_PS2CON_ACK_Pos) 
N
N#define PS2_PS2CON_CLRFIFO_Pos                     8
N#define PS2_PS2CON_CLRFIFO_Msk                     (1ul << PS2_PS2CON_CLRFIFO_Pos)  
N
N#define PS2_PS2CON_OVERRIDE_Pos                    9
N#define PS2_PS2CON_OVERRIDE_Msk                    (1ul << PS2_PS2CON_OVERRIDE_Pos)  
N
N#define PS2_PS2CON_FPS2CLK_Pos                     10
N#define PS2_PS2CON_FPS2CLK_Msk                     (1ul << PS2_PS2CON_FPS2CLK_Pos) 
N
N#define PS2_PS2CON_FPS2DAT_Pos                     11
N#define PS2_PS2CON_FPS2DAT_Msk                     (1ul << PS2_PS2CON_FPS2DAT_Pos) 
N
N/* PS/2 PS2RXDATA Bit Field Definitions */
N#define PS2_PS2RXDATA_RXDATA_Pos                   0
N#define PS2_PS2RXDATA_RXDATA_Msk                   (0xFFul << PS2_PS2RXDATA_RXDATA_Pos)
N
N/* PS/2 PS2STATUS Bit Field Definitions */
N#define PS2_PS2STATUS_PS2CLK_Pos                   0
N#define PS2_PS2STATUS_PS2CLK_Msk                   (1ul << PS2_PS2STATUS_PS2CLK_Pos) 
N
N#define PS2_PS2STATUS_PS2DATA_Pos                  1
N#define PS2_PS2STATUS_PS2DATA_Msk                  (1ul << PS2_PS2STATUS_PS2DATA_Pos) 
N
N#define PS2_PS2STATUS_FRAMERR_Pos                  2
N#define PS2_PS2STATUS_FRAMERR_Msk                  (1ul << PS2_PS2STATUS_FRAMERR_Pos) 
N
N#define PS2_PS2STATUS_RXPARITY_Pos                 3
N#define PS2_PS2STATUS_RXPARITY_Msk                 (1ul << PS2_PS2STATUS_RXPARITY_Pos) 
N
N#define PS2_PS2STATUS_RXPARITY_Pos                 3
N#define PS2_PS2STATUS_RXPARITY_Msk                 (1ul << PS2_PS2STATUS_RXPARITY_Pos)
N
N#define PS2_PS2STATUS_RXBUSY_Pos                   4
N#define PS2_PS2STATUS_RXBUSY_Msk                   (1ul << PS2_PS2STATUS_RXBUSY_Pos)
N
N#define PS2_PS2STATUS_TXBUSY_Pos                   5
N#define PS2_PS2STATUS_TXBUSY_Msk                   (1ul << PS2_PS2STATUS_TXBUSY_Pos)
N
N#define PS2_PS2STATUS_RXOVF_Pos                    6
N#define PS2_PS2STATUS_RXOVF_Msk                    (1ul << PS2_PS2STATUS_RXOVF_Pos)
N
N#define PS2_PS2STATUS_TXEMPTY_Pos                  7
N#define PS2_PS2STATUS_TXEMPTY_Msk                  (1ul << PS2_PS2STATUS_TXEMPTY_Pos)
N
N#define PS2_PS2STATUS_BYTEIDX_Pos                  8
N#define PS2_PS2STATUS_BYTEIDX_Msk                  (0xFul << PS2_PS2STATUS_BYTEIDX_Pos)
N
N/* PS/2 PS2INTID Bit Field Definitions */
N#define PS2_PS2INTID_RXINT_Pos                     0
N#define PS2_PS2INTID_RXINT_Msk                     (1ul << PS2_PS2INTID_RXINT_Pos) 
N                     
N#define PS2_PS2INTID_TXINT_Pos                     1
N#define PS2_PS2INTID_TXINT_Msk                     (1ul << PS2_PS2INTID_TXINT_Pos) 
N
N/*---------------------------- CAN Bus Controller ----------------------------*/
N
N/*--------------- Controller Area Network Interface Register -----------------*/
N
N/* CAN_MsgObj_T :Message interface structure */
Ntypedef struct
N{
N    union 
N    {
N        __IO uint32_t u32CREQ;
X        volatile uint32_t u32CREQ;
N
N        struct {
N            __IO uint32_t  MSG_NUM:6;
X            volatile uint32_t  MSG_NUM:6;
N            __I  uint32_t  RESERVE0:9;
X            volatile const  uint32_t  RESERVE0:9;
N            __IO uint32_t  BUSY:1;	  
X            volatile uint32_t  BUSY:1;	  
N            __I  uint32_t  RESERVE1:16;
X            volatile const  uint32_t  RESERVE1:16;
N        } CREQ;
N    };
N 
N 
N    union {
N        __IO uint32_t  	u32CMASK;
X        volatile uint32_t  	u32CMASK;
N        		
N        struct {
N            __IO uint32_t  DAT_B:1;
X            volatile uint32_t  DAT_B:1;
N            __IO uint32_t  DAT_A:1;
X            volatile uint32_t  DAT_A:1;
N            __IO uint32_t  TXRQST_NEWDAT:1;
X            volatile uint32_t  TXRQST_NEWDAT:1;
N            __IO uint32_t  CLRINTPND:1;
X            volatile uint32_t  CLRINTPND:1;
N            __IO uint32_t  CONTROL:1;
X            volatile uint32_t  CONTROL:1;
N            __IO uint32_t  ARB:1;
X            volatile uint32_t  ARB:1;
N            __IO uint32_t  MASK:1;
X            volatile uint32_t  MASK:1;
N            __IO uint32_t  WRRD:1;
X            volatile uint32_t  WRRD:1;
N            __I  uint32_t  RESERVE0:24;
X            volatile const  uint32_t  RESERVE0:24;
N        } CMASK;
N    };
N 
N    
N    union {
N        __IO uint32_t  	u32MASK1;
X        volatile uint32_t  	u32MASK1;
N        		
N        struct {
N            __IO uint32_t  MASK15_0:16;
X            volatile uint32_t  MASK15_0:16;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } MASK1;
N    };
N
N
N    union {
N        __IO uint32_t  	u32MASK2;
X        volatile uint32_t  	u32MASK2;
N        		
N        struct {
N            __IO uint32_t  MASK28_16:13;
X            volatile uint32_t  MASK28_16:13;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  MDIR:1;
X            volatile uint32_t  MDIR:1;
N            __IO uint32_t  MXTD:1;
X            volatile uint32_t  MXTD:1;
N            __I  uint32_t  RESERVE1:16;
X            volatile const  uint32_t  RESERVE1:16;
N        } MASK2;
N    };
N    
N    union {
N        __IO uint32_t  	u32ARB1;
X        volatile uint32_t  	u32ARB1;
N
N        struct {
N            __IO uint32_t  ID15_0:16;
X            volatile uint32_t  ID15_0:16;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } ARB1;
N    };    
N 
N
N    union {
N        __IO uint32_t  	u32ARB2;	
X        volatile uint32_t  	u32ARB2;	
N
N        struct {
N            __IO uint32_t  ID28_16:13;
X            volatile uint32_t  ID28_16:13;
N            __IO uint32_t  DIR:1;
X            volatile uint32_t  DIR:1;
N            __IO uint32_t  XTD:1;
X            volatile uint32_t  XTD:1;
N            __IO uint32_t  MSGVAL:1;
X            volatile uint32_t  MSGVAL:1;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } ARB2;
N    };    
N
N    
N    union {
N        __IO uint32_t  	u32MCON;			
X        volatile uint32_t  	u32MCON;			
N
N        struct {
N            __IO uint32_t  DLC:4;
X            volatile uint32_t  DLC:4;
N            __I  uint32_t  RESERVE0:3;
X            volatile const  uint32_t  RESERVE0:3;
N            __IO uint32_t  EOB:1;
X            volatile uint32_t  EOB:1;
N            __IO uint32_t  TXRQST:1;
X            volatile uint32_t  TXRQST:1;
N            __IO uint32_t  RMTEN:1;
X            volatile uint32_t  RMTEN:1;
N            __IO uint32_t  RXIE:1;
X            volatile uint32_t  RXIE:1;
N            __IO uint32_t  TXIE:1;
X            volatile uint32_t  TXIE:1;
N            __IO uint32_t  UMASK:1;
X            volatile uint32_t  UMASK:1;
N            __IO uint32_t  INTPND:1;
X            volatile uint32_t  INTPND:1;
N            __IO uint32_t  MSGLST:1;
X            volatile uint32_t  MSGLST:1;
N            __IO uint32_t  NEWDAT:1;
X            volatile uint32_t  NEWDAT:1;
N            __I  uint32_t  RESERVE1:16;
X            volatile const  uint32_t  RESERVE1:16;
N         } MCON;
N    };    
N
N    union {
N        __IO uint32_t	u32DAT_A1;			
X        volatile uint32_t	u32DAT_A1;			
N
N        struct {
N            __IO uint32_t  DATA0:8;
X            volatile uint32_t  DATA0:8;
N            __IO uint32_t  DATA1:8;
X            volatile uint32_t  DATA1:8;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } DAT_A1;
N    };     
N    
N    union {
N        __IO uint32_t 	u32DAT_A2;		
X        volatile uint32_t 	u32DAT_A2;		
N
N        struct {
N            __IO uint32_t  DATA2:8;
X            volatile uint32_t  DATA2:8;
N            __IO uint32_t  DATA3:8;
X            volatile uint32_t  DATA3:8;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } DAT_A2;
N    };     
N    
N    union {
N        __IO uint32_t 	u32DAT_B1;
X        volatile uint32_t 	u32DAT_B1;
N
N        struct {
N            __IO uint32_t  DATA4:8;
X            volatile uint32_t  DATA4:8;
N            __IO uint32_t  DATA5:8;
X            volatile uint32_t  DATA5:8;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } DAT_B1;
N    };     
N
N    union {
N        __IO uint32_t	u32DAT_B2;		
X        volatile uint32_t	u32DAT_B2;		
N
N        struct {
N            __IO uint32_t  DATA6:8;
X            volatile uint32_t  DATA6:8;
N            __IO uint32_t  DATA7:8;
X            volatile uint32_t  DATA7:8;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } DAT_B2;
N    };     
N
N
N  __I uint32_t RESERVE0[13];        
X  volatile const uint32_t RESERVE0[13];        
N                                    
N} CAN_MsgObj_T;
N
N
Ntypedef struct
N{
N    union {
N        __IO uint32_t   u32CON;		 	
X        volatile uint32_t   u32CON;		 	
N        
N        struct {
N            __IO uint32_t  INIT:1;
X            volatile uint32_t  INIT:1;
N            __IO uint32_t  IE:1;
X            volatile uint32_t  IE:1;
N            __IO uint32_t  SIE:1;
X            volatile uint32_t  SIE:1;
N            __IO uint32_t  EIE:1;
X            volatile uint32_t  EIE:1;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  DAR:1;	  
X            volatile uint32_t  DAR:1;	  
N            __IO uint32_t  CCE:1;
X            volatile uint32_t  CCE:1;
N            __IO uint32_t  TEST:1;
X            volatile uint32_t  TEST:1;
N            __I  uint32_t  RESERVE1:24;
X            volatile const  uint32_t  RESERVE1:24;
N        } CON;
N    };
N
N    union {
N        __IO uint32_t   u32STATUS;	
X        volatile uint32_t   u32STATUS;	
N
N        struct {
N            __IO uint32_t  LEC:3;
X            volatile uint32_t  LEC:3;
N            __IO uint32_t  TXOK:1;
X            volatile uint32_t  TXOK:1;
N            __IO uint32_t  RXOK:1;
X            volatile uint32_t  RXOK:1;
N            __IO uint32_t  EPASS:1;
X            volatile uint32_t  EPASS:1;
N            __IO uint32_t  EWARN:1;	  
X            volatile uint32_t  EWARN:1;	  
N            __IO uint32_t  BOFF:1;
X            volatile uint32_t  BOFF:1;
N            __I  uint32_t  RESERVE0:24;
X            volatile const  uint32_t  RESERVE0:24;
N        } STATUS;
N    };
N
N    union {
N        __IO uint32_t   u32ERR;     		
X        volatile uint32_t   u32ERR;     		
N        
N        struct {
N            __IO uint32_t  TEC:8;
X            volatile uint32_t  TEC:8;
N            __IO uint32_t  REC:7;
X            volatile uint32_t  REC:7;
N            __IO uint32_t  RP:1;
X            volatile uint32_t  RP:1;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } ERR;
N    };  	
N
N    union {
N	    __IO uint32_t   u32BTIME;
X	    volatile uint32_t   u32BTIME;
N        
N        struct {
N            __IO uint32_t  BRP:6;
X            volatile uint32_t  BRP:6;
N            __IO uint32_t  SJW:2;
X            volatile uint32_t  SJW:2;
N            __IO uint32_t  TSEG1:4;
X            volatile uint32_t  TSEG1:4;
N            __IO uint32_t  TSEG2:3;
X            volatile uint32_t  TSEG2:3;
N            __I  uint32_t  RESERVE0:17;
X            volatile const  uint32_t  RESERVE0:17;
N        } BTIME;
N    };
N	
N    union {
N        __IO uint32_t   u32IIDR;
X        volatile uint32_t   u32IIDR;
N        
N        struct {
N            __IO uint32_t  INTID:16;
X            volatile uint32_t  INTID:16;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } IIDR;
N    };
N
N   union {
N        __IO uint32_t   u32TEST;
X        volatile uint32_t   u32TEST;
N                 
N        struct {
N            __I  uint32_t  RESERVE0:2;
X            volatile const  uint32_t  RESERVE0:2;
N            __IO uint32_t  BASIC:1;
X            volatile uint32_t  BASIC:1;
N            __IO uint32_t  SILENT:1;
X            volatile uint32_t  SILENT:1;
N            __IO uint32_t  LBACK:1;
X            volatile uint32_t  LBACK:1;
N            __IO uint32_t  TX:2;
X            volatile uint32_t  TX:2;
N            __IO uint32_t  RX:1;	  
X            volatile uint32_t  RX:1;	  
N            __I  uint32_t  RESERVE1:24;
X            volatile const  uint32_t  RESERVE1:24;
N        } TEST;
N   };
N    
N   union {
N        __IO uint32_t   u32BRPE;
X        volatile uint32_t   u32BRPE;
N        
N        struct {
N            __IO uint32_t  BPRE:4;
X            volatile uint32_t  BPRE:4;
N            __I  uint32_t  RESERVE0:28;
X            volatile const  uint32_t  RESERVE0:28;
N        } BRPE;
N   };
N    __I uint32_t   	RESERVE0[1];     
X    volatile const uint32_t   	RESERVE0[1];     
N	
N    CAN_MsgObj_T    sMsgObj[2];             
N                              
N	__I uint32_t   	RESERVE1[8];
X	volatile const uint32_t   	RESERVE1[8];
N
N   union {
N        __IO uint32_t   u32TXREQ1;
X        volatile uint32_t   u32TXREQ1;
N        
N        struct {
N            __IO uint32_t  TXRQST16_1:16;
X            volatile uint32_t  TXRQST16_1:16;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } TXREQ1;
N   };
N
N
N   union {
N        __IO uint32_t   u32TXREQ2;
X        volatile uint32_t   u32TXREQ2;
N        
N        struct {
N            __IO uint32_t  TXRQST32_17:16;
X            volatile uint32_t  TXRQST32_17:16;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } TXREQ2;
N   };
N
N    __I uint32_t   	RESERVE2[6];        
X    volatile const uint32_t   	RESERVE2[6];        
N
N   union {
N        __IO uint32_t   u32NDAT1;
X        volatile uint32_t   u32NDAT1;
N
N        struct {
N            __IO uint32_t  NEWDAT16_1:16;
X            volatile uint32_t  NEWDAT16_1:16;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } NDAT1;
N   };
N
N   union {
N        __IO uint32_t   u32NDAT2;
X        volatile uint32_t   u32NDAT2;
N
N        struct {
N            __IO uint32_t  NEWDAT32_17:16;
X            volatile uint32_t  NEWDAT32_17:16;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } NDAT2;
N   };
N
N    __I uint32_t   	RESERVE3[6];
X    volatile const uint32_t   	RESERVE3[6];
N
N   union {
N        __IO uint32_t   u32IPND1;
X        volatile uint32_t   u32IPND1;
N
N        struct {
N            __IO uint32_t  IPND16_1:16;
X            volatile uint32_t  IPND16_1:16;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } IPND1;
N   };
N
N   union {
N        __IO uint32_t   u32IPND2;
X        volatile uint32_t   u32IPND2;
N
N        struct {
N            __IO uint32_t  IPND32_17:16;
X            volatile uint32_t  IPND32_17:16;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } IPND2;
N   };
N
N    __I uint32_t   	RESERVE4[6];
X    volatile const uint32_t   	RESERVE4[6];
N
N   union {
N        __IO uint32_t   u32MVLD1;
X        volatile uint32_t   u32MVLD1;
N
N        struct {
N            __IO uint32_t  MSGVAL16_1:16;
X            volatile uint32_t  MSGVAL16_1:16;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } MVLD1;
N   };
N
N   union {
N        __IO uint32_t   u32MVLD2;
X        volatile uint32_t   u32MVLD2;
N
N        struct {
N            __IO uint32_t  MSGVAL32_17:16;
X            volatile uint32_t  MSGVAL32_17:16;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } MVLD2;
N   };
N    
N    union {
N        __IO uint32_t   u32WU_EN;            
X        volatile uint32_t   u32WU_EN;            
N        struct {
N            __IO uint32_t  WAKUP_EN:1;
X            volatile uint32_t  WAKUP_EN:1;
N            __I  uint32_t  RESERVE0:31;
X            volatile const  uint32_t  RESERVE0:31;
N        } WU_EN;
N    }; 
N
N    union {
N        __IO uint32_t   u32WU_STATUS;
X        volatile uint32_t   u32WU_STATUS;
N        struct {
N            __IO uint32_t  WAKUP_STS:1;
X            volatile uint32_t  WAKUP_STS:1;
N            __I  uint32_t  RESERVE0:31;
X            volatile const  uint32_t  RESERVE0:31;
N        } WU_STATUS;
N    }; 
N
N    
N} CAN_T;
N
N
N/* CAN CON Bit Field Definitions */
N#define CAN_CON_TEST_Pos           7
N#define CAN_CON_TEST_Msk           (1ul << CAN_CON_TEST_Pos)
N
N#define CAN_CON_CCE_Pos            6
N#define CAN_CON_CCE_Msk            (1ul << CAN_CON_CCE_Pos)
N
N#define CAN_CON_DAR_Pos            5
N#define CAN_CON_DAR_Msk            (1ul << CAN_CON_DAR_Pos)
N
N#define CAN_CON_EIE_Pos            3
N#define CAN_CON_EIE_Msk            (1ul << CAN_CON_EIE_Pos)
N
N#define CAN_CON_SIE_Pos            2
N#define CAN_CON_SIE_Msk            (1ul << CAN_CON_SIE_Pos)
N
N#define CAN_CON_IE_Pos             1
N#define CAN_CON_IE_Msk             (1ul << CAN_CON_IE_Pos)
N
N#define CAN_CON_INIT_Pos           0
N#define CAN_CON_INIT_Msk           (1ul << CAN_CON_INIT_Pos)
N
N/* CAN STATUS Bit Field Definitions */
N#define CAN_STATUS_BOFF_Pos        7
N#define CAN_STATUS_BOFF_Msk        (1ul << CAN_STATUS_BOFF_Pos)
N
N#define CAN_STATUS_EWARN_Pos       6
N#define CAN_STATUS_EWARN_Msk       (1ul << CAN_STATUS_EWARN_Pos)
N
N#define CAN_STATUS_EPASS_Pos       5
N#define CAN_STATUS_EPASS_Msk       (1ul << CAN_STATUS_EPASS_Pos)
N
N#define CAN_STATUS_RXOK_Pos        4
N#define CAN_STATUS_RXOK_Msk        (1ul << CAN_STATUS_RXOK_Pos)
N
N#define CAN_STATUS_TXOK_Pos        3
N#define CAN_STATUS_TXOK_Msk        (1ul << CAN_STATUS_RXOK_Pos)
N
N#define CAN_STATUS_LEC_Pos         0
N#define CAN_STATUS_LEC_Msk         (0x3ul << CAN_STATUS_LEC_Pos)
N
N/* CAN ERR Bit Field Definitions */
N#define CAN_ERR_RP_Pos             15
N#define CAN_ERR_RP_Msk             (1ul << CAN_ERR_RP_Pos)
N
N#define CAN_ERR_REC_Pos            8
N#define CAN_ERR_REC_Msk            (0x7Ful << CAN_ERR_REC_Pos)
N
N#define CAN_ERR_TEC_Pos            0
N#define CAN_ERR_TEC_Msk            (0xFFul << CAN_ERR_TEC_Pos)
N
N/* CAN BTIME Bit Field Definitions */
N#define CAN_BTIME_TSEG2_Pos        12
N#define CAN_BTIME_TSEG2_Msk        (0x7ul << CAN_BTIME_TSEG2_Pos)
N
N#define CAN_BTIME_TSEG1_Pos        8
N#define CAN_BTIME_TSEG1_Msk        (0xFul << CAN_BTIME_TSEG1_Pos)
N
N#define CAN_BTIME_SJW_Pos          6
N#define CAN_BTIME_SJW_Msk          (0x3ul << CAN_BTIME_SJW_Pos)
N
N#define CAN_BTIME_BRP_Pos          0
N#define CAN_BTIME_BRP_Msk          (0x3Ful << CAN_BTIME_BRP_Pos)
N
N/* CAN IIDR Bit Field Definitions */
N#define CAN_IIDR_INTID_Pos         0
N#define CAN_IIDR_INTID_Msk         (0xFFFFul << CAN_IIDR_INTID_Pos)
N
N/* CAN TEST Bit Field Definitions */
N#define CAN_TEST_RX_Pos            7
N#define CAN_TEST_RX_Msk            (1ul << CAN_TEST_RX_Pos)
N
N#define CAN_TEST_TX_Pos            5
N#define CAN_TEST_TX_Msk            (0x3ul << CAN_TEST_TX_Pos)
N
N#define CAN_TEST_LBACK_Pos         4
N#define CAN_TEST_LBACK_Msk         (1ul << CAN_TEST_LBACK_Pos)
N             
N#define CAN_TEST_SILENT_Pos        3
N#define CAN_TEST_SILENT_Msk        (1ul << CAN_TEST_SILENT_Pos)
N
N#define CAN_TEST_BASIC_Pos         2
N#define CAN_TEST_BASIC_Msk         (1ul << CAN_TEST_BASIC_Pos)
N
N#define CAN_TEST_BASIC_Pos         2
N#define CAN_TEST_BASIC_Msk         (1ul << CAN_TEST_BASIC_Pos)
N
N/* CAN BPRE Bit Field Definitions */
N#define CAN_BPRE_BPRE_Pos          0
N#define CAN_BPRE_BPRE_Msk          (0xFul << CAN_BPRE_BPRE_Pos)
N
N/* CAN IFn_CREQ Bit Field Definitions */
N#define CAN_IFnCREQ_BUSY_Pos       15
N#define CAN_IFnCREQ_BUSY_Msk       (1ul << CAN_IFnCREQ_BUSY_Pos)
N
N#define CAN_IFnCREQ_MSGNUM_Pos     0
N#define CAN_IFnCREQ_MSGNUM_Msk     (0x3Ful << CAN_IFnCREQ_MSGNUM_Pos)
N
N/* CAN IFn_CMASK Bit Field Definitions */
N#define CAN_IFnCMASK_WRRD_Pos      7
N#define CAN_IFnCMASK_WRRD_Msk      (1ul << CAN_IFnCMASK_WRRD_Pos)
N
N#define CAN_IFnCMASK_MASK_Pos      6
N#define CAN_IFnCMASK_MASK_Msk      (1ul << CAN_IFnCMASK_MASK_Pos)
N
N#define CAN_IFnCMASK_ARB_Pos       5
N#define CAN_IFnCMASK_ARB_Msk       (1ul << CAN_IFnCMASK_ARB_Pos)
N
N#define CAN_IFnCMASK_CONTROL_Pos   4
N#define CAN_IFnCMASK_CONTROL_Msk   (1ul << CAN_IFnCMASK_CONTROL_Pos)
N
N#define CAN_IFnCMASK_CLRINTPND_Pos 3
N#define CAN_IFnCMASK_CLRINTPND_Msk (1ul << CAN_IFnCMASK_CLRINTPND_Pos)
N  
N#define CAN_IFnCMASK_TXRQSTNEWDAT_Pos 2
N#define CAN_IFnCMASK_TXRQSTNEWDAT_Msk (1ul << CAN_IFnCMASK_TXRQSTNEWDAT_Pos)
N
N#define CAN_IFnCMASK_DATAA_Pos     1
N#define CAN_IFnCMASK_DATAA_Msk     (1ul << CAN_IFnCMASK_DATAA_Pos)
N
N#define CAN_IFnCMASK_DATAB_Pos     0
N#define CAN_IFnCMASK_DATAB_Msk     (1ul << CAN_IFnCMASK_DATAB_Pos)
N
N/* CAN IFn_MASK1 Bit Field Definitions */
N#define CAN_IFnMASK1_MSK_Pos       0
N#define CAN_IFnMASK1_MSK_Msk       (0xFFul << CAN_IFnMASK1_MSK_Pos)
N
N/* CAN IFn_MASK2 Bit Field Definitions */
N#define CAN_IFnMASK2_MXTD_Pos      15
N#define CAN_IFnMASK2_MXTD_Msk      (1ul << CAN_IFnMASK2_MXTD_Pos)
N
N#define CAN_IFnMASK2_MDIR_Pos      14
N#define CAN_IFnMASK2_MDIR_Msk      (1ul << CAN_IFnMASK2_MDIR_Pos)
N
N#define CAN_IFnMASK2_MSK_Pos       0
N#define CAN_IFnMASK2_MSK_Msk       (0x1FFul << CAN_IFnMASK2_MSK_Pos)
N
N/* CAN IFn_ARB1 Bit Field Definitions */
N#define CAN_IFnARB1_ID_Pos         0
N#define CAN_IFnARB1_ID_Msk         (0xFFFFul << CAN_IFnARB1_ID_Pos)
N
N/* CAN IFn_ARB2 Bit Field Definitions */
N#define CAN_IFnARB2_MSGVAL_Pos     15
N#define CAN_IFnARB2_MSGVAL_Msk     (1ul << CAN_IFnARB2_MSGVAL_Pos)
N
N#define CAN_IFnARB2_XTD_Pos        14
N#define CAN_IFnARB2_XTD_Msk        (1ul << CAN_IFnARB2_XTD_Pos)
N
N#define CAN_IFnARB2_DIR_Pos        13
N#define CAN_IFnARB2_DIR_Msk        (1ul << CAN_IFnARB2_DIR_Pos)
N
N#define CAN_IFnARB2_ID_Pos         0
N#define CAN_IFnARB2_ID_Msk         (0x1FFFul << CAN_IFnARB2_ID_Pos)
N
N/* CAN IFn_MCON Bit Field Definitions */
N#define CAN_IFnMCON_NEWDAT_Pos     15
N#define CAN_IFnMCON_NEWDAT_Msk     (1ul << CAN_IFnMCON_NEWDAT_Pos)
N
N#define CAN_IFnMCON_MSGLST_Pos     14
N#define CAN_IFnMCON_MSGLST_Msk     (1ul << CAN_IFnMCON_MSGLST_Pos)
N
N#define CAN_IFnMCON_INTPND_Pos     13
N#define CAN_IFnMCON_INTPND_Msk     (1ul << CAN_IFnMCON_INTPND_Pos)
N
N#define CAN_IFnMCON_UMASK_Pos      12
N#define CAN_IFnMCON_UMASK_Msk      (1ul << CAN_IFnMCON_UMASK_Pos)
N
N#define CAN_IFnMCON_TXIE_Pos       11
N#define CAN_IFnMCON_TXIE_Msk       (1ul << CAN_IFnMCON_TXIE_Pos)
N
N#define CAN_IFnMCON_RXIE_Pos       10
N#define CAN_IFnMCON_RXIE_Msk       (1ul << CAN_IFnMCON_RXIE_Pos)
N
N#define CAN_IFnMCON_RMTEN_Pos      9
N#define CAN_IFnMCON_RMTEN_Msk      (1ul << CAN_IFnMCON_RMTEN_Pos)
N
N#define CAN_IFnMCON_TXRQST_Pos     8
N#define CAN_IFnMCON_TXRQST_Msk     (1ul << CAN_IFnMCON_TXRQST_Pos)
N
N#define CAN_IFnMCON_EOB_Pos        7
N#define CAN_IFnMCON_EOB_Msk        (1ul << CAN_IFnMCON_EOB_Pos)
N
N#define CAN_IFnMCON_DLC_Pos        0
N#define CAN_IFnMCON_DLC_Msk        (0xFul << CAN_IFnMCON_DLC_Pos)
N
N/* CAN IFn_DATA_A1 Bit Field Definitions */
N#define CAN_IFnDATAA1_DATA1_Pos    8
N#define CAN_IFnDATAA1_DATA1_Msk    (0xFul << CAN_IFnDATAA1_DATA1_Pos)
N
N#define CAN_IFnDATAA1_DATA0_Pos    0
N#define CAN_IFnDATAA1_DATA0_Msk    (0xFul << CAN_IFnDATAA1_DATA0_Pos)
N
N/* CAN IFn_DATA_A2 Bit Field Definitions */
N#define CAN_IFnDATAA2_DATA3_Pos    8
N#define CAN_IFnDATAA2_DATA3_Msk    (0xFul << CAN_IFnDATAA2_DATA3_Pos)
N
N#define CAN_IFnDATAA2_DATA2_Pos    0
N#define CAN_IFnDATAA2_DATA2_Msk    (0xFul << CAN_IFnDATAA2_DATA2_Pos)
N
N/* CAN IFn_DATA_B1 Bit Field Definitions */
N#define CAN_IFnDATAB1_DATA5_Pos    8
N#define CAN_IFnDATAB1_DATA5_Msk    (0xFul << CAN_IFnDATAB1_DATA5_Pos)
N
N#define CAN_IFnDATAB1_DATA4_Pos    0
N#define CAN_IFnDATAB1_DATA4_Msk    (0xFul << CAN_IFnDATAB1_DATA4_Pos)
N
N/* CAN IFn_DATA_B2 Bit Field Definitions */
N#define CAN_IFnDATAB2_DATA7_Pos    8
N#define CAN_IFnDATAB2_DATA7_Msk    (0xFul << CAN_IFnDATAB2_DATA7_Pos)
N
N#define CAN_IFnDATAB2_DATA6_Pos    8
N#define CAN_IFnDATAB2_DATA6_Msk    (0xFul << CAN_IFnDATAB2_DATA6_Pos)
N
N/* CAN IFn_TXRQST1 Bit Field Definitions */
N#define CAN_IFnTXRQST1_TXRQST_Pos  0
N#define CAN_IFnTXRQST1_TXRQST_Msk  (0xFFFFul << CAN_IFnTXRQST1_TXRQST_Pos)
N
N/* CAN IFn_TXRQST2 Bit Field Definitions */
N#define CAN_IFnTXRQST2_TXRQST_Pos  0
N#define CAN_IFnTXRQST2_TXRQST_Msk  (0xFFFFul << CAN_IFnTXRQST2_TXRQST_Pos)
N
N/* CAN IFn_NDAT1 Bit Field Definitions */
N#define CAN_IFnNDAT1_NEWDATA_Pos   0
N#define CAN_IFnNDAT1_NEWDATA_Msk   (0xFFFFul << CAN_IFnNDAT1_NEWDATA_Pos)
N
N/* CAN IFn_NDAT2 Bit Field Definitions */
N#define CAN_IFnNDAT2_NEWDATA_Pos   0
N#define CAN_IFnNDAT2_NEWDATA_Msk   (0xFFFFul << CAN_IFnNDAT2_NEWDATA_Pos)
N
N/* CAN IFn_IPND1 Bit Field Definitions */
N#define CAN_IFnIPND1_INTPND_Pos   0
N#define CAN_IFnIPND1_INTPND_Msk   (0xFFFFul << CAN_IFnIPND1_INTPND_Pos)
N
N/* CAN IFn_IPND2 Bit Field Definitions */
N#define CAN_IFnIPND2_INTPND_Pos   0
N#define CAN_IFnIPND2_INTPND_Msk   (0xFFFFul << CAN_IFnIPND2_INTPND_Pos)
N
N/* CAN IFn_MVLD1 Bit Field Definitions */
N#define CAN_IFnMVLD1_MSGVAL_Pos   0
N#define CAN_IFnMVLD1_MSGVAL_Msk   (0xFFFFul << CAN_IFnMVLD1_MSGVAL_Pos)
N
N/* CAN IFn_MVLD2 Bit Field Definitions */
N#define CAN_IFnMVLD2_MSGVAL_Pos   0
N#define CAN_IFnMVLD2_MSGVAL_Msk   (0xFFFFul << CAN_IFnMVLD2_MSGVAL_Pos)
N
N/* CAN WUEN Bit Field Definitions */
N#define CAN_WUEN_WAKUP_EN_Pos     0
N#define CAN_WUEN_WAKUP_EN_Msk    (1ul << CAN_WUEN_WAKUP_EN_Pos)
N
N/* CAN WUSTATUS Bit Field Definitions */
N#define CAN_WUSTATUS_WAKUP_STS_Pos     0
N#define CAN_WUSTATUS_WAKUP_STS_Msk    (1ul << CAN_WUSTATUS_WAKUP_STS_Pos)
N                                  
N/*--------------------------- USB Device Controller --------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  BUS_IE:1;
X    volatile uint32_t  BUS_IE:1;
N    __IO uint32_t  USB_IE:1;
X    volatile uint32_t  USB_IE:1;
N    __IO uint32_t  FLDET_IE:1;
X    volatile uint32_t  FLDET_IE:1;
N    __IO uint32_t  WAKEUP_IE:1;
X    volatile uint32_t  WAKEUP_IE:1;
N    __I  uint32_t  RESERVE0:4;
X    volatile const  uint32_t  RESERVE0:4;
N    __IO uint32_t  WAKEUP_EN:1;
X    volatile uint32_t  WAKEUP_EN:1;
N    __I  uint32_t  RESERVE1:6;
X    volatile const  uint32_t  RESERVE1:6;
N    __IO uint32_t  INNAK_EN:1;
X    volatile uint32_t  INNAK_EN:1;
N    __I  uint32_t  RESERVE2:16;
X    volatile const  uint32_t  RESERVE2:16;
N} USBD_INTEN_T;
N
Ntypedef struct
N{
N    __IO uint32_t  BUS_STS:1;
X    volatile uint32_t  BUS_STS:1;
N    __IO uint32_t  USB_STS:1;
X    volatile uint32_t  USB_STS:1;
N    __IO uint32_t  FLDET_STS:1;
X    volatile uint32_t  FLDET_STS:1;
N    __IO uint32_t  WAKEUP_STS:1;
X    volatile uint32_t  WAKEUP_STS:1;
N    __I  uint32_t  RESERVE0:12;
X    volatile const  uint32_t  RESERVE0:12;
N    __IO uint32_t  EPEVT:6;
X    volatile uint32_t  EPEVT:6;
N    __I  uint32_t  RESERVE1:9;
X    volatile const  uint32_t  RESERVE1:9;
N    __IO uint32_t  SETUP:1;
X    volatile uint32_t  SETUP:1;
N} USBD_INTSTS_T;
N
Ntypedef struct
N{
N    __IO uint32_t  FADDR:7;
X    volatile uint32_t  FADDR:7;
N    __I  uint32_t  RESERVE:25;
X    volatile const  uint32_t  RESERVE:25;
N} USBD_FADDR_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:7;
X    volatile const  uint32_t  RESERVE0:7;
N    __I  uint32_t  OVERRUN:1;
X    volatile const  uint32_t  OVERRUN:1;
N    __I  uint32_t  EPSTS0:3;
X    volatile const  uint32_t  EPSTS0:3;
N    __I  uint32_t  EPSTS1:3;
X    volatile const  uint32_t  EPSTS1:3;
N    __I  uint32_t  EPSTS2:3;
X    volatile const  uint32_t  EPSTS2:3;
N    __I  uint32_t  EPSTS3:3;
X    volatile const  uint32_t  EPSTS3:3;
N    __I  uint32_t  EPSTS4:3;
X    volatile const  uint32_t  EPSTS4:3;
N    __I  uint32_t  EPSTS5:3;
X    volatile const  uint32_t  EPSTS5:3;
N    __I  uint32_t  RESERVE1:6;
X    volatile const  uint32_t  RESERVE1:6;
N} USBD_EPSTS_T;
N
N
N
Ntypedef struct
N{
N    __I  uint32_t  USBRST:1;
X    volatile const  uint32_t  USBRST:1;
N    __I  uint32_t  SUSPEND:1;
X    volatile const  uint32_t  SUSPEND:1;
N    __I  uint32_t  RESUME:1;
X    volatile const  uint32_t  RESUME:1;
N    __I  uint32_t  TIMEOUT:1;
X    volatile const  uint32_t  TIMEOUT:1;
N    __IO uint32_t  PHY_EN:1;
X    volatile uint32_t  PHY_EN:1;
N    __IO uint32_t  RWAKEUP:1;
X    volatile uint32_t  RWAKEUP:1;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  USB_EN:1;
X    volatile uint32_t  USB_EN:1;
N    __IO uint32_t  DPPU_EN:1;
X    volatile uint32_t  DPPU_EN:1;
N    __IO uint32_t  PWRDN:1;
X    volatile uint32_t  PWRDN:1;
N    __I  uint32_t  RESERVE1:22;
X    volatile const  uint32_t  RESERVE1:22;
N} USBD_ATTR_T;
N
N
N
Ntypedef struct
N{
N    __IO uint32_t  FLDET:1;
X    volatile uint32_t  FLDET:1;
N    __I  uint32_t  RESERVE:31;
X    volatile const  uint32_t  RESERVE:31;
N} USBD_FLDET_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:3;
X    volatile const  uint32_t  RESERVE0:3;
N    __IO uint32_t  STBUFSEG:6;
X    volatile uint32_t  STBUFSEG:6;
N    __I  uint32_t  RESERVE:23;
X    volatile const  uint32_t  RESERVE:23;
N} USBD_STBUFSEG_T;
N
Ntypedef struct
N{
N    __IO uint32_t  MXPLD:9;
X    volatile uint32_t  MXPLD:9;
N    __I  uint32_t  RESERVE:23;
X    volatile const  uint32_t  RESERVE:23;
N} USBD_MXPLD_T;
N
Ntypedef struct
N{
N    __IO uint32_t  EP_NUM:4;
X    volatile uint32_t  EP_NUM:4;
N    __IO uint32_t  ISOCH:1;
X    volatile uint32_t  ISOCH:1;
N    __IO uint32_t  STATE:2;
X    volatile uint32_t  STATE:2;
N    __IO uint32_t  DSQ_SYNC:1;
X    volatile uint32_t  DSQ_SYNC:1;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  CSTALL:1;
X    volatile uint32_t  CSTALL:1;
N    __I  uint32_t  RESERVE1:22;
X    volatile const  uint32_t  RESERVE1:22;
N} USBD_CFG_T;
N
Ntypedef struct
N{
N    __IO uint32_t  CLRRDY:1;
X    volatile uint32_t  CLRRDY:1;
N    __IO uint32_t  SSTALL:1;
X    volatile uint32_t  SSTALL:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} USBD_CFGP_T;
N
Ntypedef struct
N{
N    __IO uint32_t  DRVSE0:1;
X    volatile uint32_t  DRVSE0:1;
N    __I  uint32_t  RESERVE:31;
X    volatile const  uint32_t  RESERVE:31;
N} USBD_DRVSE0_T;
N
Ntypedef struct
N{
N    union {
N        __IO uint32_t u32BUFSEG;
X        volatile uint32_t u32BUFSEG;
N        struct {
N            __I  uint32_t  RESERVE0:3;
X            volatile const  uint32_t  RESERVE0:3;
N            __IO uint32_t  BUFSEG:6;
X            volatile uint32_t  BUFSEG:6;
N            __I  uint32_t  RESERVE:23;
X            volatile const  uint32_t  RESERVE:23;
N        } BUFSEG;
N    };
N    
N    union {
N        __IO uint32_t u32MXPLD;
X        volatile uint32_t u32MXPLD;
N        struct {
N            __IO uint32_t  MXPLD:9;
X            volatile uint32_t  MXPLD:9;
N            __I  uint32_t  RESERVE:23;
X            volatile const  uint32_t  RESERVE:23;
N        } MXPLD;
N    };
N    
N    union {
N        __IO uint32_t u32CFG;
X        volatile uint32_t u32CFG;
N        struct {
N            __IO uint32_t  EP_NUM:4;
X            volatile uint32_t  EP_NUM:4;
N            __IO uint32_t  ISOCH:1;
X            volatile uint32_t  ISOCH:1;
N            __IO uint32_t  STATE:2;
X            volatile uint32_t  STATE:2;
N            __IO uint32_t  DSQ_SYNC:1;
X            volatile uint32_t  DSQ_SYNC:1;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  CSTALL:1;
X            volatile uint32_t  CSTALL:1;
N            __I  uint32_t  RESERVE1:22;
X            volatile const  uint32_t  RESERVE1:22;
N        } CFG;
N    };
N    
N    union {
N        __IO uint32_t u32CFGP;
X        volatile uint32_t u32CFGP;
N        struct {
N            __IO uint32_t  CLRRDY:1;
X            volatile uint32_t  CLRRDY:1;
N            __IO uint32_t  SSTALL:1;
X            volatile uint32_t  SSTALL:1;
N            __I  uint32_t  RESERVE:30;
X            volatile const  uint32_t  RESERVE:30;
N        } CFGP;
N    };
N    
N} USBD_EP_T;
N
N
Ntypedef struct
N{
N    union {
N        __IO uint32_t u32INTEN;
X        volatile uint32_t u32INTEN;
N        struct {
N            __IO uint32_t  BUS_IE:1;
X            volatile uint32_t  BUS_IE:1;
N            __IO uint32_t  USB_IE:1;
X            volatile uint32_t  USB_IE:1;
N            __IO uint32_t  FLDET_IE:1;
X            volatile uint32_t  FLDET_IE:1;
N            __IO uint32_t  WAKEUP_IE:1;
X            volatile uint32_t  WAKEUP_IE:1;
N            __I  uint32_t  RESERVE0:4;
X            volatile const  uint32_t  RESERVE0:4;
N            __IO uint32_t  WAKEUP_EN:1;
X            volatile uint32_t  WAKEUP_EN:1;
N            __I  uint32_t  RESERVE1:6;
X            volatile const  uint32_t  RESERVE1:6;
N            __IO uint32_t  INNAK_EN:1;
X            volatile uint32_t  INNAK_EN:1;
N            __I  uint32_t  RESERVE2:16;
X            volatile const  uint32_t  RESERVE2:16;
N        } INTEN;
N    };
N    
N    union {
N        __IO uint32_t u32INTSTS;
X        volatile uint32_t u32INTSTS;
N        struct {
N            __IO uint32_t  BUS_STS:1;
X            volatile uint32_t  BUS_STS:1;
N            __IO uint32_t  USB_STS:1;
X            volatile uint32_t  USB_STS:1;
N            __IO uint32_t  FLDET_STS:1;
X            volatile uint32_t  FLDET_STS:1;
N            __IO uint32_t  WAKEUP_STS:1;
X            volatile uint32_t  WAKEUP_STS:1;
N            __I  uint32_t  RESERVE0:12;
X            volatile const  uint32_t  RESERVE0:12;
N            __IO uint32_t  EPEVT:6;
X            volatile uint32_t  EPEVT:6;
N            __I  uint32_t  RESERVE1:9;
X            volatile const  uint32_t  RESERVE1:9;
N            __IO uint32_t  SETUP:1;
X            volatile uint32_t  SETUP:1;
N        } INTSTS;
N    };
N    
N    union {
N        __IO uint32_t u32FADDR;
X        volatile uint32_t u32FADDR;
N        struct {
N            __IO uint32_t  FADDR:7;
X            volatile uint32_t  FADDR:7;
N            __I  uint32_t  RESERVE:25;
X            volatile const  uint32_t  RESERVE:25;
N        } FADDR;
N    };
N    
N    union {
N        __IO uint32_t u32EPSTS;
X        volatile uint32_t u32EPSTS;
N        struct {
N            __I  uint32_t  RESERVE0:7;
X            volatile const  uint32_t  RESERVE0:7;
N            __I  uint32_t  OVERRUN:1;
X            volatile const  uint32_t  OVERRUN:1;
N            __I  uint32_t  EPSTS0:3;
X            volatile const  uint32_t  EPSTS0:3;
N            __I  uint32_t  EPSTS1:3;
X            volatile const  uint32_t  EPSTS1:3;
N            __I  uint32_t  EPSTS2:3;
X            volatile const  uint32_t  EPSTS2:3;
N            __I  uint32_t  EPSTS3:3;
X            volatile const  uint32_t  EPSTS3:3;
N            __I  uint32_t  EPSTS4:3;
X            volatile const  uint32_t  EPSTS4:3;
N            __I  uint32_t  EPSTS5:3;
X            volatile const  uint32_t  EPSTS5:3;
N            __I  uint32_t  RESERVE1:6;
X            volatile const  uint32_t  RESERVE1:6;
N        } EPSTS;
N    };
N    
N    union {
N        __IO uint32_t u32ATTR;
X        volatile uint32_t u32ATTR;
N        struct {
N            __I  uint32_t  USBRST:1;
X            volatile const  uint32_t  USBRST:1;
N            __I  uint32_t  SUSPEND:1;
X            volatile const  uint32_t  SUSPEND:1;
N            __I  uint32_t  RESUME:1;
X            volatile const  uint32_t  RESUME:1;
N            __I  uint32_t  TIMEOUT:1;
X            volatile const  uint32_t  TIMEOUT:1;
N            __IO uint32_t  PHY_EN:1;
X            volatile uint32_t  PHY_EN:1;
N            __IO uint32_t  RWAKEUP:1;
X            volatile uint32_t  RWAKEUP:1;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  USB_EN:1;
X            volatile uint32_t  USB_EN:1;
N            __IO uint32_t  DPPU_EN:1;
X            volatile uint32_t  DPPU_EN:1;
N            __IO uint32_t  PWRDN:1;
X            volatile uint32_t  PWRDN:1;
N            __I  uint32_t  RESERVE1:22;
X            volatile const  uint32_t  RESERVE1:22;
N        } ATTR;
N    };
N    
N    union {
N        __IO uint32_t u32FLDET;
X        volatile uint32_t u32FLDET;
N        struct {
N            __I  uint32_t  FLDET:1;
X            volatile const  uint32_t  FLDET:1;
N            __I  uint32_t  RESERVE:31;
X            volatile const  uint32_t  RESERVE:31;
N        } FLDET;
N    };
N    
N    union {
N        __IO uint32_t u32STBUFSEG;
X        volatile uint32_t u32STBUFSEG;
N        struct {
N            __I  uint32_t  RESERVE0:3;
X            volatile const  uint32_t  RESERVE0:3;
N            __IO uint32_t  STBUFSEG:6;
X            volatile uint32_t  STBUFSEG:6;
N            __I  uint32_t  RESERVE:23;
X            volatile const  uint32_t  RESERVE:23;
N        } STBUFSEG;
N    };
N    
N    __I uint32_t RESERVE0;
X    volatile const uint32_t RESERVE0;
N    
N    USBD_EP_T EP[6];
N    
N    __I uint32_t RESERVE1[4];
X    volatile const uint32_t RESERVE1[4];
N    
N    union {
N        __IO uint32_t u32DRVSE0;
X        volatile uint32_t u32DRVSE0;
N        struct {
N            __IO uint32_t  DRVSE0:1;
X            volatile uint32_t  DRVSE0:1;
N            __I  uint32_t  RESERVE:31;
X            volatile const  uint32_t  RESERVE:31;
N        } DRVSE0;
N    };
N    
N     __I uint32_t RESERVE2[4];
X     volatile const uint32_t RESERVE2[4];
N    
N} USBD_T;
N
N/* USBD INTEN Bit Field Definitions */
N#define USBD_INTEN_INNAK_EN_Pos    15
N#define USBD_INTEN_INNAK_EN_Msk    (1ul << USBD_INTEN_INNAK_EN_Pos)
N
N#define USBD_INTEN_WAKEUP_EN_Pos   8
N#define USBD_INTEN_WAKEUP_EN_Msk   (1ul << USBD_INTEN_WAKEUP_EN_Pos)
N
N#define USBD_INTEN_WAKEUP_IE_Pos   3
N#define USBD_INTEN_WAKEUP_IE_Msk   (1ul << USBD_INTEN_WAKEUP_IE_Pos)
N
N#define USBD_INTEN_FLDET_IE_Pos    2
N#define USBD_INTEN_FLDET_IE_Msk    (1ul << USBD_INTEN_FLDET_IE_Pos)
N
N#define USBD_INTEN_USB_IE_Pos      1
N#define USBD_INTEN_USB_IE_Msk      (1ul << USBD_INTEN_USB_IE_Pos)
N
N#define USBD_INTEN_BUS_IE_Pos      0
N#define USBD_INTEN_BUS_IE_Msk      (1ul << USBD_INTEN_BUS_IE_Pos)
N
N/* USBD INTSTS Bit Field Definitions */
N#define USBD_INTSTS_SETUP_Pos        31
N#define USBD_INTSTS_SETUP_Msk        (1ul << USBD_INTSTS_SETUP_Pos)
N
N#define USBD_INTSTS_EPEVT_Pos        16
N#define USBD_INTSTS_EPEVT_Msk        (0x3Ful << USBD_INTSTS_EPEVT_Pos)
N
N#define USBD_INTSTS_WAKEUP_STS_Pos   3
N#define USBD_INTSTS_WAKEUP_STS_Msk   (1ul << USBD_INTSTS_WAKEUP_STS_Pos)
N
N#define USBD_INTSTS_FLDET_STS_Pos    2
N#define USBD_INTSTS_FLDET_STS_Msk    (1ul << USBD_INTSTS_FLDET_STS_Pos)
N
N#define USBD_INTSTS_USB_STS_Pos      1
N#define USBD_INTSTS_USB_STS_Msk      (1ul << USBD_INTSTS_USB_STS_Pos)
N
N#define USBD_INTSTS_BUS_STS_Pos      0
N#define USBD_INTSTS_BUS_STS_Msk      (1ul << USBD_INTSTS_BUS_STS_Pos)
N
N/* USBD FADDR Bit Field Definitions */
N#define USBD_FADDR_FADDR_Pos     0
N#define USBD_FADDR_FADDR_Msk     (0x7Ful << USBD_FADDR_FADDR_Pos)
N
N/* USBD EPSTS Bit Field Definitions */
N#define USBD_EPSTS_EPSTS5_Pos    23
N#define USBD_EPSTS_EPSTS5_Msk    (7ul << USBD_EPSTS_EPSTS5_Pos)
N
N#define USBD_EPSTS_EPSTS4_Pos    20
N#define USBD_EPSTS_EPSTS4_Msk    (7ul << USBD_EPSTS_EPSTS4_Pos)
N
N#define USBD_EPSTS_EPSTS3_Pos    17
N#define USBD_EPSTS_EPSTS3_Msk    (7ul << USBD_EPSTS_EPSTS3_Pos)
N
N#define USBD_EPSTS_EPSTS2_Pos    14
N#define USBD_EPSTS_EPSTS2_Msk    (7ul << USBD_EPSTS_EPSTS2_Pos)
N
N#define USBD_EPSTS_EPSTS1_Pos    11
N#define USBD_EPSTS_EPSTS1_Msk    (7ul << USBD_EPSTS_EPSTS1_Pos)
N
N#define USBD_EPSTS_EPSTS0_Pos    8
N#define USBD_EPSTS_EPSTS0_Msk    (7ul << USBD_EPSTS_EPSTS0_Pos)
N
N#define USBD_EPSTS_OVERRUN_Pos   7
N#define USBD_EPSTS_OVERRUN_Msk   (1ul << USBD_EPSTS_OVERRUN_Pos)
N
N/* USBD ATTR Bit Field Definitions */
N#define USBD_ATTR_PWRDN_Pos      9
N#define USBD_ATTR_PWRDN_Msk      (1ul << USBD_ATTR_PWRDN_Pos)
N
N#define USBD_ATTR_DPPU_EN_Pos    8
N#define USBD_ATTR_DPPU_EN_Msk    (1ul << USBD_ATTR_DPPU_EN_Pos)
N
N#define USBD_ATTR_USB_EN_Pos     7
N#define USBD_ATTR_USB_EN_Msk     (1ul << USBD_ATTR_USB_EN_Pos)
N
N#define USBD_ATTR_RWAKEUP_Pos    5
N#define USBD_ATTR_RWAKEUP_Msk    (1ul << USBD_ATTR_RWAKEUP_Pos)
N
N#define USBD_ATTR_PHY_EN_Pos     4
N#define USBD_ATTR_PHY_EN_Msk     (1ul << USBD_ATTR_PHY_EN_Pos)
N
N#define USBD_ATTR_TIMEOUT_Pos    3
N#define USBD_ATTR_TIMEOUT_Msk    (1ul << USBD_ATTR_TIMEOUT_Pos)
N
N#define USBD_ATTR_RESUME_Pos     2
N#define USBD_ATTR_RESUME_Msk     (1ul << USBD_ATTR_RESUME_Pos)
N
N#define USBD_ATTR_SUSPEND_Pos    1
N#define USBD_ATTR_SUSPEND_Msk    (1ul << USBD_ATTR_SUSPEND_Pos)
N
N#define USBD_ATTR_USBRST_Pos     0
N#define USBD_ATTR_USBRST_Msk     (1ul << USBD_ATTR_USBRST_Pos)
N
N/* USBD FLDET Bit Field Definitions */
N#define USBD_FLDET_FLDET_Pos     0
N#define USBD_FLDET_FLDET_Msk     (1ul << USBD_FLDET_FLDET_Pos)
N
N/* USBD STBUFSEG Bit Field Definitions */
N#define USBD_STBUFSEG_STBUFSEG_Pos   3
N#define USBD_STBUFSEG_STBUFSEG_Msk   (0x3Ful << USBD_STBUFSEG_STBUFSEG_Pos)
N
N/* USBD BUFSEG Bit Field Definitions */
N#define USBD_BUFSEG_BUFSEG_Pos   3
N#define USBD_BUFSEG_BUFSEG_Msk   (0x3Ful << USBD_BUFSEG_BUFSEG_Pos)
N
N/* USBD MXPLD Bit Field Definitions */
N#define USBD_MXPLD_MXPLD_Pos    0
N#define USBD_MXPLD_MXPLD_Msk    (0x1FFul << USBD_MXPLD_MXPLD_Pos)
N
N/* USBD CFG Bit Field Definitions */
N#define USBD_CFG_CSTALL_Pos     9
N#define USBD_CFG_CSTALL_Msk     (1ul << USBD_CFG_CSTALL_Pos)
N
N#define USBD_CFG_DSQ_SYNC_Pos   7
N#define USBD_CFG_DSQ_SYNC_Msk   (1ul << USBD_CFG_DSQ_SYNC_Pos)
N
N#define USBD_CFG_STATE_Pos      5
N#define USBD_CFG_STATE_Msk      (3ul << USBD_CFG_STATE_Pos)
N
N#define USBD_CFG_ISOCH_Pos      4
N#define USBD_CFG_ISOCH_Msk      (1ul << USBD_CFG_ISOCH_Pos)
N
N#define USBD_CFG_EP_NUM_Pos     0
N#define USBD_CFG_EP_NUM_Msk     (0xFul << USBD_CFG_EP_NUM_Pos)
N
N/* USBD CFGP Bit Field Definitions */
N#define USBD_CFGP_SSTALL_Pos    1
N#define USBD_CFGP_SSTALL_Msk    (1ul << USBD_CFGP_SSTALL_Pos)
N
N#define USBD_CFGP_CLRRDY_Pos    0
N#define USBD_CFGP_CLRRDY_Msk    (1ul << USBD_CFGP_CLRRDY_Pos)
N
N/* USBD DRVSE0 Bit Field Definitions */
N#define USBD_DRVSE0_DRVSE0_Pos   0
N#define USBD_DRVSE0_DRVSE0_Msk   (1ul << USBD_DRVSE0_DRVSE0_Pos)
N
N
N/*------------------------------ PDMA Controller -----------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  PDMACEN:1;
X    volatile uint32_t  PDMACEN:1;
N    __IO uint32_t  SW_RST:1;
X    volatile uint32_t  SW_RST:1;
N    __IO uint32_t  MODE_SEL:2;
X    volatile uint32_t  MODE_SEL:2;
N    __IO uint32_t  SAD_SEL:2;
X    volatile uint32_t  SAD_SEL:2;
N    __IO uint32_t  DAD_SEL:2;
X    volatile uint32_t  DAD_SEL:2;
N    __I  uint32_t  RESERVE0:4;
X    volatile const  uint32_t  RESERVE0:4;
N    __IO uint32_t  WAR_BCR_SEL:4;
X    volatile uint32_t  WAR_BCR_SEL:4;
N    __I  uint32_t  RESERVE1:3;
X    volatile const  uint32_t  RESERVE1:3;
N    __IO uint32_t  APB_TWS:2;
X    volatile uint32_t  APB_TWS:2;
N    __I  uint32_t  RESERVE2:2;
X    volatile const  uint32_t  RESERVE2:2;
N    __IO uint32_t  TRIG_EN:1;
X    volatile uint32_t  TRIG_EN:1;
N    __I  uint32_t  RESERVE3:8;
X    volatile const  uint32_t  RESERVE3:8;
N} PDMA_CSR_T;
N
Ntypedef __IO uint32_t PDMA_SAR_T;
Xtypedef volatile uint32_t PDMA_SAR_T;
Ntypedef __IO uint32_t PDMA_DAR_T;
Xtypedef volatile uint32_t PDMA_DAR_T;
N
Ntypedef __IO uint32_t PDMA_BCR_T;
Xtypedef volatile uint32_t PDMA_BCR_T;
N
Ntypedef __I uint32_t PDMA_CSAR_T;
Xtypedef volatile const uint32_t PDMA_CSAR_T;
Ntypedef __I uint32_t PDMA_CDAR_T;
Xtypedef volatile const uint32_t PDMA_CDAR_T;
N
Ntypedef struct
N{
N    __I uint32_t  CBCR:16;
X    volatile const uint32_t  CBCR:16;
N    __I  uint32_t  RESERVE:16;
X    volatile const  uint32_t  RESERVE:16;
N} PDMA_CBCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TABORT_IE:1;
X    volatile uint32_t  TABORT_IE:1;
N    __IO uint32_t  BLKD_IE:1;
X    volatile uint32_t  BLKD_IE:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} PDMA_IER_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TABORT_IF:1;
X    volatile uint32_t  TABORT_IF:1;
N    __IO uint32_t  BLKD_IF:1;
X    volatile uint32_t  BLKD_IF:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} PDMA_ISR_T;
N
Ntypedef __I uint32_t PDMA_SBUF_T;
Xtypedef volatile const uint32_t PDMA_SBUF_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:8;
X    volatile const  uint32_t  RESERVE0:8;
N    __IO uint32_t  CLK0_EN:1;
X    volatile uint32_t  CLK0_EN:1;
N    __IO uint32_t  CLK1_EN:1;
X    volatile uint32_t  CLK1_EN:1;
N    __IO uint32_t  CLK2_EN:1;
X    volatile uint32_t  CLK2_EN:1;
N    __IO uint32_t  CLK3_EN:1;
X    volatile uint32_t  CLK3_EN:1;
N    __IO uint32_t  CLK4_EN:1;
X    volatile uint32_t  CLK4_EN:1;
N    __IO uint32_t  CLK5_EN:1;
X    volatile uint32_t  CLK5_EN:1;
N    __IO uint32_t  CLK6_EN:1;
X    volatile uint32_t  CLK6_EN:1;
N    __IO uint32_t  CLK7_EN:1;
X    volatile uint32_t  CLK7_EN:1;
N    __IO uint32_t  CLK8_EN:1;
X    volatile uint32_t  CLK8_EN:1;
N    __I  uint32_t  RESERVE1:15;
X    volatile const  uint32_t  RESERVE1:15;
N} PDMA_GCRCSR_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  SPI0_RXSEL:4;
X    volatile uint32_t  SPI0_RXSEL:4;
N    __IO uint32_t  SPI0_TXSEL:4;
X    volatile uint32_t  SPI0_TXSEL:4;
N    __IO uint32_t  SPI1_RXSEL:4;
X    volatile uint32_t  SPI1_RXSEL:4;
N    __IO uint32_t  SPI1_TXSEL:4;
X    volatile uint32_t  SPI1_TXSEL:4;
N    __IO uint32_t  SPI2_RXSEL:4;
X    volatile uint32_t  SPI2_RXSEL:4;
N    __IO uint32_t  SPI2_TXSEL:4;
X    volatile uint32_t  SPI2_TXSEL:4;
N    __IO uint32_t  SPI3_RXSEL:4;
X    volatile uint32_t  SPI3_RXSEL:4;
N    __IO uint32_t  SPI3_TXSEL:4;
X    volatile uint32_t  SPI3_TXSEL:4;
N} PDMA_PDSSR0_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  UART0_RXSEL:4;
X    volatile uint32_t  UART0_RXSEL:4;
N    __IO uint32_t  UART0_TXSEL:4;
X    volatile uint32_t  UART0_TXSEL:4;
N    __IO uint32_t  UART1_RXSEL:4;
X    volatile uint32_t  UART1_RXSEL:4;
N    __IO uint32_t  UART1_TXSEL:4;
X    volatile uint32_t  UART1_TXSEL:4;
N    __IO uint32_t  RESERVE0:8;
X    volatile uint32_t  RESERVE0:8;
N    __IO uint32_t  ADC_RXSEL:4;
X    volatile uint32_t  ADC_RXSEL:4;
N    __IO uint32_t  RESERVE1:4;
X    volatile uint32_t  RESERVE1:4;
N} PDMA_PDSSR1_T;
N                                                        
N
Ntypedef struct
N{
N    __I uint32_t  INTR0:1;
X    volatile const uint32_t  INTR0:1;
N    __I uint32_t  INTR1:1;
X    volatile const uint32_t  INTR1:1;
N    __I uint32_t  INTR2:1;
X    volatile const uint32_t  INTR2:1;
N    __I uint32_t  INTR3:1;
X    volatile const uint32_t  INTR3:1;
N    __I uint32_t  INTR4:1;
X    volatile const uint32_t  INTR4:1;
N    __I uint32_t  INTR5:1;
X    volatile const uint32_t  INTR5:1;
N    __I uint32_t  INTR6:1;
X    volatile const uint32_t  INTR6:1;
N    __I uint32_t  INTR7:1;
X    volatile const uint32_t  INTR7:1;
N    __I uint32_t  INTR8:1;
X    volatile const uint32_t  INTR8:1;
N    __I uint32_t  RESERVE:22;
X    volatile const uint32_t  RESERVE:22;
N    __I uint32_t  INTR:1;
X    volatile const uint32_t  INTR:1;
N} PDMA_GCRISR_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  I2S_RXSEL:4;
X    volatile uint32_t  I2S_RXSEL:4;
N    __IO uint32_t  I2S_TXSEL:4;
X    volatile uint32_t  I2S_TXSEL:4;
N    __I  uint32_t  RESERVE:24;
X    volatile const  uint32_t  RESERVE:24;
N} PDMA_PDSSR2_T;
N
Ntypedef struct
N{
N    union 
N    {
N        __IO uint32_t u32CSR;
X        volatile uint32_t u32CSR;
N        
N        struct 
N        {
N            __IO uint32_t  PDMACEN:1;
X            volatile uint32_t  PDMACEN:1;
N            __IO uint32_t  SW_RST:1;
X            volatile uint32_t  SW_RST:1;
N            __IO uint32_t  MODE_SEL:2;
X            volatile uint32_t  MODE_SEL:2;
N            __IO uint32_t  SAD_SEL:2;
X            volatile uint32_t  SAD_SEL:2;
N            __IO uint32_t  DAD_SEL:2;
X            volatile uint32_t  DAD_SEL:2;
N            __I  uint32_t  RESERVE0:11;
X            volatile const  uint32_t  RESERVE0:11;
N            __IO uint32_t  APB_TWS:2;
X            volatile uint32_t  APB_TWS:2;
N            __I  uint32_t  RESERVE1:2;
X            volatile const  uint32_t  RESERVE1:2;
N            __IO uint32_t  TRIG_EN:1;
X            volatile uint32_t  TRIG_EN:1;
N            __I  uint32_t  RESERVE2:8;
X            volatile const  uint32_t  RESERVE2:8;
N        } CSR;
N    };
N
N    union 
N    {
N        __IO uint32_t u32SAR;
X        volatile uint32_t u32SAR;
N        __IO uint32_t SAR;
X        volatile uint32_t SAR;
N    };
N
N    union 
N    {
N        __IO uint32_t u32DAR;
X        volatile uint32_t u32DAR;
N        __IO uint32_t DAR;
X        volatile uint32_t DAR;
N    };
N
N    union 
N    {
N        __IO uint32_t u32BCR;
X        volatile uint32_t u32BCR;
N        
N        struct 
N        {
N            __IO uint32_t  BCR:16;
X            volatile uint32_t  BCR:16;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } BCR;
N    };
N
N    union 
N    {
N        __I uint32_t u32POINT;
X        volatile const uint32_t u32POINT;
N        
N        struct 
N        {
N            __I  uint32_t  POINT:4;
X            volatile const  uint32_t  POINT:4;
N            __I  uint32_t  RESERVE0:28;
X            volatile const  uint32_t  RESERVE0:28;
N        } POINT;
N    };
N
N    union 
N    {
N        __I uint32_t u32CSAR;
X        volatile const uint32_t u32CSAR;
N        __I uint32_t CSAR;
X        volatile const uint32_t CSAR;
N    };
N
N    union 
N    {
N        __I uint32_t u32CDAR;
X        volatile const uint32_t u32CDAR;
N        __I uint32_t CDAR;
X        volatile const uint32_t CDAR;
N    };
N
N    union 
N    {
N        __I uint32_t u32CBCR;
X        volatile const uint32_t u32CBCR;
N        
N        struct 
N        {
N            __I uint32_t  CBCR:16;
X            volatile const uint32_t  CBCR:16;
N            __I  uint32_t  RESERVE0:16;
X            volatile const  uint32_t  RESERVE0:16;
N        } CBCR;
N    };
N
N    union 
N    {
N        __IO uint32_t u32IER;
X        volatile uint32_t u32IER;
N        
N        struct 
N        {
N            __IO uint32_t  TABORT_IE:1;
X            volatile uint32_t  TABORT_IE:1;
N            __IO uint32_t  BLKD_IE:1;
X            volatile uint32_t  BLKD_IE:1;
N            __I  uint32_t  RESERVE:30;
X            volatile const  uint32_t  RESERVE:30;
N        } IER;
N    };
N
N    union 
N    {
N        __IO uint32_t u32ISR;
X        volatile uint32_t u32ISR;
N        
N        struct 
N        {
N            __IO uint32_t  TABORT_IF:1;
X            volatile uint32_t  TABORT_IF:1;
N            __IO uint32_t  BLKD_IF:1;
X            volatile uint32_t  BLKD_IF:1;
N            __I  uint32_t  RESERVE:30;
X            volatile const  uint32_t  RESERVE:30;
N        } ISR;
N    };
N
N    __I uint32_t RESERVE[22];
X    volatile const uint32_t RESERVE[22];
N
N    union 
N    {
N        __I uint32_t u32SBUF;
X        volatile const uint32_t u32SBUF;
N        __I uint32_t SBUF;
X        volatile const uint32_t SBUF;
N    };
N} PDMA_T;
N
Ntypedef struct
N{
N    union 
N    {
N        __IO uint32_t u32GCRCSR;
X        volatile uint32_t u32GCRCSR;
N        
N        struct 
N        {
N            __I  uint32_t  RESERVE0:8;
X            volatile const  uint32_t  RESERVE0:8;
N            __IO uint32_t  CLK0_EN:1;
X            volatile uint32_t  CLK0_EN:1;
N            __IO uint32_t  CLK1_EN:1;
X            volatile uint32_t  CLK1_EN:1;
N            __IO uint32_t  CLK2_EN:1;
X            volatile uint32_t  CLK2_EN:1;
N            __IO uint32_t  CLK3_EN:1;
X            volatile uint32_t  CLK3_EN:1;
N            __IO uint32_t  CLK4_EN:1;
X            volatile uint32_t  CLK4_EN:1;
N            __IO uint32_t  CLK5_EN:1;
X            volatile uint32_t  CLK5_EN:1;
N            __IO uint32_t  CLK6_EN:1;
X            volatile uint32_t  CLK6_EN:1;
N            __IO uint32_t  CLK7_EN:1;
X            volatile uint32_t  CLK7_EN:1;
N            __IO uint32_t  CLK8_EN:1;
X            volatile uint32_t  CLK8_EN:1;
N            __I  uint32_t  RESERVE1:15;
X            volatile const  uint32_t  RESERVE1:15;
N        } GCRCSR;
N    };
N
N    union 
N    {
N        __IO uint32_t u32PDSSR0;
X        volatile uint32_t u32PDSSR0;
N        
N        struct 
N        {
N            __IO uint32_t  SPI0_RXSEL:4;
X            volatile uint32_t  SPI0_RXSEL:4;
N            __IO uint32_t  SPI0_TXSEL:4;
X            volatile uint32_t  SPI0_TXSEL:4;
N            __IO uint32_t  SPI1_RXSEL:4;
X            volatile uint32_t  SPI1_RXSEL:4;
N            __IO uint32_t  SPI1_TXSEL:4;
X            volatile uint32_t  SPI1_TXSEL:4;
N            __IO uint32_t  SPI2_RXSEL:4;
X            volatile uint32_t  SPI2_RXSEL:4;
N            __IO uint32_t  SPI2_TXSEL:4;
X            volatile uint32_t  SPI2_TXSEL:4;
N            __IO uint32_t  SPI3_RXSEL:4;
X            volatile uint32_t  SPI3_RXSEL:4;
N            __IO uint32_t  SPI3_TXSEL:4;
X            volatile uint32_t  SPI3_TXSEL:4;
N        } PDSSR0;
N    };
N
N    union 
N    {
N        __IO uint32_t u32PDSSR1;
X        volatile uint32_t u32PDSSR1;
N        
N        struct 
N        {
N            __IO uint32_t  UART0_RXSEL:4;
X            volatile uint32_t  UART0_RXSEL:4;
N            __IO uint32_t  UART0_TXSEL:4;
X            volatile uint32_t  UART0_TXSEL:4;
N            __IO uint32_t  UART1_RXSEL:4;
X            volatile uint32_t  UART1_RXSEL:4;
N            __IO uint32_t  UART1_TXSEL:4;
X            volatile uint32_t  UART1_TXSEL:4;
N            __IO uint32_t  RESERVE0:8;
X            volatile uint32_t  RESERVE0:8;
N            __IO uint32_t  ADC_RXSEL:4;
X            volatile uint32_t  ADC_RXSEL:4;
N            __IO uint32_t  RESERVE1:4;
X            volatile uint32_t  RESERVE1:4;
N        } PDSSR1;
N    };
N
N    union 
N    {
N        __IO uint32_t u32GCRISR;
X        volatile uint32_t u32GCRISR;
N        
N        struct 
N        {
N            __I uint32_t  INTR0:1;
X            volatile const uint32_t  INTR0:1;
N            __I uint32_t  INTR1:1;
X            volatile const uint32_t  INTR1:1;
N            __I uint32_t  INTR2:1;
X            volatile const uint32_t  INTR2:1;
N            __I uint32_t  INTR3:1;
X            volatile const uint32_t  INTR3:1;
N            __I uint32_t  INTR4:1;
X            volatile const uint32_t  INTR4:1;
N            __I uint32_t  INTR5:1;
X            volatile const uint32_t  INTR5:1;
N            __I uint32_t  INTR6:1;
X            volatile const uint32_t  INTR6:1;
N            __I uint32_t  INTR7:1;
X            volatile const uint32_t  INTR7:1;
N            __I uint32_t  INTR8:1;
X            volatile const uint32_t  INTR8:1;
N            __I uint32_t  RESERVE:22;
X            volatile const uint32_t  RESERVE:22;
N            __I uint32_t  INTR:1;
X            volatile const uint32_t  INTR:1;
N        } GCRISR;
N    };
N
N    union 
N    {
N        __IO uint32_t u32PDSSR2;
X        volatile uint32_t u32PDSSR2;
N        
N        struct 
N        {
N            __IO uint32_t  I2S_RXSEL:4;
X            volatile uint32_t  I2S_RXSEL:4;
N            __IO uint32_t  I2S_TXSEL:4;
X            volatile uint32_t  I2S_TXSEL:4;
N            __I  uint32_t  RESERVE:24;
X            volatile const  uint32_t  RESERVE:24;
N        } PDSSR2;
N    };
N} PDMA_GCR_T;
N
N/* PDMA CSR Bit Field Definitions */
N#define PDMA_CSR_PDMACEN_Pos                        0
N#define PDMA_CSR_PDMACEN_Msk                        (1ul << PDMA_CSR_PDMACEN_Pos)
N
N#define PDMA_CSR_SW_RST_Pos                         1
N#define PDMA_CSR_SW_RST_Msk                         (1ul << PDMA_CSR_SW_RST_Pos)
N
N#define PDMA_CSR_MODE_SEL_Pos                       2
N#define PDMA_CSR_MODE_SEL_Msk                       (3ul << PDMA_CSR_MODE_SEL_Pos)
N
N#define PDMA_CSR_SAD_SEL_Pos                        4
N#define PDMA_CSR_SAD_SEL_Msk                        (3ul << PDMA_CSR_SAD_SEL_Pos)
N
N#define PDMA_CSR_DAD_SEL_Pos                        6
N#define PDMA_CSR_DAD_SEL_Msk                        (3ul << PDMA_CSR_DAD_SEL_Pos)
N
N#define PDMA_CSR_APB_TWS_Pos                        19
N#define PDMA_CSR_APB_TWS_Msk                        (3ul << PDMA_CSR_APB_TWS_Pos)
N
N#define PDMA_CSR_TRIG_EN_Pos                        23
N#define PDMA_CSR_TRIG_EN_Msk                        (1ul << PDMA_CSR_TRIG_EN_Pos)
N
N/* PDMA BCR Bit Field Definitions */
N#define PDMA_BCR_BCR_Pos                            0
N#define PDMA_BCR_BCR_Msk                            (0xFFFFul << PDMA_BCR_BCR_Pos)
N
N/* PDMA POINT Bit Field Definitions */
N#define PDMA_POINT_POINT_Pos                        0
N#define PDMA_POINT_POINT_Msk                        (0xFul << PDMA_POINT_POINT_Pos)
N
N/* PDMA CBCR Bit Field Definitions */
N#define PDMA_CBCR_CBCR_Pos                          0
N#define PDMA_CBCR_CBCR_Msk                          (0xFFFFul << PDMA_CBCR_CBCR_Pos)
N
N
N/* PDMA IER Bit Field Definitions */
N#define PDMA_IER_TABORT_IE_Pos                      0
N#define PDMA_IER_TABORT_IE_Msk                      (1ul << PDMA_IER_TABORT_IE_Pos)
N
N#define PDMA_IER_BLKD_IE_Pos                        1
N#define PDMA_IER_BLKD_IE_Msk                        (1ul << PDMA_IER_BLKD_IE_Pos)
N
N/* PDMA ISR Bit Field Definitions */
N#define PDMA_ISR_TABORT_IF_Pos                      0
N#define PDMA_ISR_TABORT_IF_Msk                      (1ul << PDMA_ISR_TABORT_IF_Pos)
N
N#define PDMA_ISR_BLKD_IF_Pos                        1
N#define PDMA_ISR_BLKD_IF_Msk                        (1ul << PDMA_ISR_BLKD_IF_Pos)
N
N/* PDMA GCRCSR Bit Field Definitions */
N#define PDMA_GCRCSR_CLK0_EN_Pos                     8
N#define PDMA_GCRCSR_CLK0_EN_Msk                     (1ul << PDMA_GCRCSR_CLK0_EN_Pos)
N
N#define PDMA_GCRCSR_CLK1_EN_Pos                     9
N#define PDMA_GCRCSR_CLK1_EN_Msk                     (1ul << PDMA_GCRCSR_CLK1_EN_Pos)
N
N#define PDMA_GCRCSR_CLK2_EN_Pos                     10
N#define PDMA_GCRCSR_CLK2_EN_Msk                     (1ul << PDMA_GCRCSR_CLK2_EN_Pos)
N
N#define PDMA_GCRCSR_CLK3_EN_Pos                     11
N#define PDMA_GCRCSR_CLK3_EN_Msk                     (1ul << PDMA_GCRCSR_CLK3_EN_Pos)
N
N#define PDMA_GCRCSR_CLK4_EN_Pos                     12
N#define PDMA_GCRCSR_CLK4_EN_Msk                     (1ul << PDMA_GCRCSR_CLK4_EN_Pos)
N
N#define PDMA_GCRCSR_CLK5_EN_Pos                     13
N#define PDMA_GCRCSR_CLK5_EN_Msk                     (1ul << PDMA_GCRCSR_CLK5_EN_Pos)
N
N#define PDMA_GCRCSR_CLK6_EN_Pos                     14
N#define PDMA_GCRCSR_CLK6_EN_Msk                     (1ul << PDMA_GCRCSR_CLK6_EN_Pos)
N
N#define PDMA_GCRCSR_CLK7_EN_Pos                     15
N#define PDMA_GCRCSR_CLK7_EN_Msk                     (1ul << PDMA_GCRCSR_CLK7_EN_Pos)
N
N#define PDMA_GCRCSR_CLK8_EN_Pos                     16
N#define PDMA_GCRCSR_CLK8_EN_Msk                     (1ul << PDMA_GCRCSR_CLK8_EN_Pos)
N
N/* PDMA PDSSR0 Bit Field Definitions */
N#define PDMA_PDSSR0_SPI0_RXSEL_Pos                  0
N#define PDMA_PDSSR0_SPI0_RXSEL_Msk                  (0xFul << PDMA_PDSSR0_SPI0_RXSEL_Pos)
N
N#define PDMA_PDSSR0_SPI0_TXSEL_Pos                  4
N#define PDMA_PDSSR0_SPI0_TXSEL_Msk                  (0xFul << PDMA_PDSSR0_SPI0_TXSEL_Pos)
N
N#define PDMA_PDSSR0_SPI1_RXSEL_Pos                  8
N#define PDMA_PDSSR0_SPI1_RXSEL_Msk                  (0xFul << PDMA_PDSSR0_SPI1_RXSEL_Pos)
N
N#define PDMA_PDSSR0_SPI1_TXSEL_Pos                  12
N#define PDMA_PDSSR0_SPI1_TXSEL_Msk                  (0xFul << PDMA_PDSSR0_SPI1_TXSEL_Pos)
N
N#define PDMA_PDSSR0_SPI2_RXSEL_Pos                  16
N#define PDMA_PDSSR0_SPI2_RXSEL_Msk                  (0xFul << PDMA_PDSSR0_SPI2_RXSEL_Pos)
N
N#define PDMA_PDSSR0_SPI2_TXSEL_Pos                  20
N#define PDMA_PDSSR0_SPI2_TXSEL_Msk                  (0xFul << PDMA_PDSSR0_SPI2_TXSEL_Pos)
N
N#define PDMA_PDSSR0_SPI3_RXSEL_Pos                  24
N#define PDMA_PDSSR0_SPI3_RXSEL_Msk                  (0xFul << PDMA_PDSSR0_SPI3_RXSEL_Pos)
N
N#define PDMA_PDSSR0_SPI3_TXSEL_Pos                  28
N#define PDMA_PDSSR0_SPI3_TXSEL_Msk                  (0xFul << PDMA_PDSSR0_SPI3_TXSEL_Pos)
N
N/* PDMA PDSSR1 Bit Field Definitions */
N#define PDMA_PDSSR1_UART0_RXSEL_Pos                 0
N#define PDMA_PDSSR1_UART0_RXSEL_Msk                 (0xFul << PDMA_PDSSR1_UART0_RXSEL_Pos)
N
N#define PDMA_PDSSR1_UART0_TXSEL_Pos                 4
N#define PDMA_PDSSR1_UART0_TXSEL_Msk                 (0xFul << PDMA_PDSSR1_UART0_TXSEL_Pos)
N
N#define PDMA_PDSSR1_UART1_RXSEL_Pos                 8
N#define PDMA_PDSSR1_UART1_RXSEL_Msk                 (0xFul << PDMA_PDSSR1_UART1_RXSEL_Pos)
N
N#define PDMA_PDSSR1_UART1_TXSEL_Pos                 12
N#define PDMA_PDSSR1_UART1_TXSEL_Msk                 (0xFul << PDMA_PDSSR1_UART1_TXSEL_Pos)
N
N#define PDMA_PDSSR1_ADC_RXSEL_Pos                   24
N#define PDMA_PDSSR1_ADC_RXSEL_Msk                   (0xFul << PDMA_PDSSR1_ADC_RXSEL_Pos)
N
N/* PDMA GCRISR Bit Field Definitions */
N#define PDMA_GCRISR_INTR0_Pos                       0
N#define PDMA_GCRISR_INTR0_Msk                       (1ul << PDMA_GCRISR_INTR0_Pos)
N
N#define PDMA_GCRISR_INTR1_Pos                       1
N#define PDMA_GCRISR_INTR1_Msk                       (1ul << PDMA_GCRISR_INTR1_Pos)
N
N#define PDMA_GCRISR_INTR2_Pos                       2
N#define PDMA_GCRISR_INTR2_Msk                       (1ul << PDMA_GCRISR_INTR2_Pos)
N
N#define PDMA_GCRISR_INTR3_Pos                       3
N#define PDMA_GCRISR_INTR3_Msk                       (1ul << PDMA_GCRISR_INTR3_Pos)
N
N#define PDMA_GCRISR_INTR4_Pos                       4
N#define PDMA_GCRISR_INTR4_Msk                       (1ul << PDMA_GCRISR_INTR4_Pos)
N
N#define PDMA_GCRISR_INTR5_Pos                       5
N#define PDMA_GCRISR_INTR5_Msk                       (1ul << PDMA_GCRISR_INTR5_Pos)
N
N#define PDMA_GCRISR_INTR6_Pos                       6
N#define PDMA_GCRISR_INTR6_Msk                       (1ul << PDMA_GCRISR_INTR6_Pos)
N
N#define PDMA_GCRISR_INTR7_Pos                       7
N#define PDMA_GCRISR_INTR7_Msk                       (1ul << PDMA_GCRISR_INTR7_Pos)
N
N#define PDMA_GCRISR_INTR8_Pos                       8
N#define PDMA_GCRISR_INTR8_Msk                       (1ul << PDMA_GCRISR_INTR8_Pos)
N
N#define PDMA_GCRISR_INTR_Pos                        31
N#define PDMA_GCRISR_INTR_Msk                        (1ul << PDMA_GCRISR_INTR_Pos)
N
N/* PDMA PDSSR2 Bit Field Definitions */
N#define PDMA_PDSSR2_I2S_RXSEL_Pos                   0
N#define PDMA_PDSSR2_I2S_RXSEL_Msk                   (0xFul << PDMA_PDSSR2_I2S_RXSEL_Pos)
N
N#define PDMA_PDSSR2_I2S_TXSEL_Pos                   4
N#define PDMA_PDSSR2_I2S_TXSEL_Msk                   (0xFul << PDMA_PDSSR2_I2S_TXSEL_Pos)
N
N/*----------------------------- PWM Controller -------------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  CP01:8;
X    volatile uint32_t  CP01:8;
N    __IO uint32_t  CP23:8;
X    volatile uint32_t  CP23:8;
N    __IO uint32_t  DZI01:8;
X    volatile uint32_t  DZI01:8;
N    __IO uint32_t  DZI23:8;
X    volatile uint32_t  DZI23:8;
N} PWM_PPR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  CSR0:3;
X    volatile uint32_t  CSR0:3;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  CSR1:3;
X    volatile uint32_t  CSR1:3;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __IO uint32_t  CSR2:3;
X    volatile uint32_t  CSR2:3;
N    __I  uint32_t  RESERVE2:1;
X    volatile const  uint32_t  RESERVE2:1;
N    __IO uint32_t  CSR3:3;
X    volatile uint32_t  CSR3:3;
N    __I  uint32_t  RESERVE3:17;
X    volatile const  uint32_t  RESERVE3:17;
N} PWM_CSR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  CH0EN:1;
X    volatile uint32_t  CH0EN:1;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  CH0INV:1;
X    volatile uint32_t  CH0INV:1;
N    __IO uint32_t  CH0MOD:1;
X    volatile uint32_t  CH0MOD:1;
N    __IO uint32_t  DZEN01:1;
X    volatile uint32_t  DZEN01:1;
N    __IO uint32_t  DZEN23:1;
X    volatile uint32_t  DZEN23:1;
N    __I  uint32_t  RESERVE1:2;
X    volatile const  uint32_t  RESERVE1:2;
N    __IO uint32_t  CH1EN:1;
X    volatile uint32_t  CH1EN:1;
N    __I  uint32_t  RESERVE2:1;
X    volatile const  uint32_t  RESERVE2:1;
N    __IO uint32_t  CH1INV:1;
X    volatile uint32_t  CH1INV:1;
N    __IO uint32_t  CH1MOD:1;
X    volatile uint32_t  CH1MOD:1;
N    __I  uint32_t  RESERVE3:4;
X    volatile const  uint32_t  RESERVE3:4;
N    __IO uint32_t  CH2EN:1;
X    volatile uint32_t  CH2EN:1;
N    __I  uint32_t  RESERVE4:1;
X    volatile const  uint32_t  RESERVE4:1;
N    __IO uint32_t  CH2INV:1;
X    volatile uint32_t  CH2INV:1;
N    __IO uint32_t  CH2MOD:1;
X    volatile uint32_t  CH2MOD:1;
N    __I  uint32_t  RESERVE5:4;
X    volatile const  uint32_t  RESERVE5:4;
N    __IO uint32_t  CH3EN:1;
X    volatile uint32_t  CH3EN:1;
N    __I  uint32_t  RESERVE6:1;
X    volatile const  uint32_t  RESERVE6:1;
N    __IO uint32_t  CH3INV:1;
X    volatile uint32_t  CH3INV:1;
N    __IO uint32_t  CH3MOD:1;
X    volatile uint32_t  CH3MOD:1;
N    __I  uint32_t  RESERVE7:4;   
X    volatile const  uint32_t  RESERVE7:4;   
N} PWM_PCR_T;
N
Ntypedef __IO uint32_t PWM_CNR_T;
Xtypedef volatile uint32_t PWM_CNR_T;
N
Ntypedef __IO uint32_t PWM_CMR_T;
Xtypedef volatile uint32_t PWM_CMR_T;
N
Ntypedef __I  uint32_t PWM_PDR_T;
Xtypedef volatile const  uint32_t PWM_PDR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  BCn:1;
X    volatile uint32_t  BCn:1;
N    __I  uint32_t  RESERVE:31;
X    volatile const  uint32_t  RESERVE:31;
N} PWM_PBCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  PWMIE0:1;
X    volatile uint32_t  PWMIE0:1;
N    __IO uint32_t  PWMIE1:1;
X    volatile uint32_t  PWMIE1:1;
N    __IO uint32_t  PWMIE2:1;
X    volatile uint32_t  PWMIE2:1;
N    __IO uint32_t  PWMIE3:1;
X    volatile uint32_t  PWMIE3:1;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} PWM_PIER_T;
N
Ntypedef struct
N{
N    __IO uint32_t  PWMIF0:1;
X    volatile uint32_t  PWMIF0:1;
N    __IO uint32_t  PWMIF1:1;
X    volatile uint32_t  PWMIF1:1;
N    __IO uint32_t  PWMIF2:1;
X    volatile uint32_t  PWMIF2:1;
N    __IO uint32_t  PWMIF3:1;
X    volatile uint32_t  PWMIF3:1;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} PWM_PIIR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  INV0:1;
X    volatile uint32_t  INV0:1;
N    __IO uint32_t  CRL_IE0:1;
X    volatile uint32_t  CRL_IE0:1;
N    __IO uint32_t  CFL_IE0:1;
X    volatile uint32_t  CFL_IE0:1;
N    __IO uint32_t  CAPCH0EN:1;
X    volatile uint32_t  CAPCH0EN:1;
N    __IO uint32_t  CAPIF0:1;
X    volatile uint32_t  CAPIF0:1;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  CRLRI0:1;
X    volatile uint32_t  CRLRI0:1;
N    __IO uint32_t  CFLRI0:1;
X    volatile uint32_t  CFLRI0:1;
N    __I  uint32_t  RESERVE1:8;
X    volatile const  uint32_t  RESERVE1:8;
N    __IO uint32_t  INV1:1;
X    volatile uint32_t  INV1:1;
N    __IO uint32_t  CRL_IE1:1;
X    volatile uint32_t  CRL_IE1:1;
N    __IO uint32_t  CFL_IE1:1;
X    volatile uint32_t  CFL_IE1:1;
N    __IO uint32_t  CAPCH1EN:1;
X    volatile uint32_t  CAPCH1EN:1;
N    __IO uint32_t  CAPIF1:1;
X    volatile uint32_t  CAPIF1:1;
N    __I  uint32_t  RESERVE2:1;
X    volatile const  uint32_t  RESERVE2:1;
N    __IO uint32_t  CRLRI1:1;
X    volatile uint32_t  CRLRI1:1;
N    __IO uint32_t  CFLRI1:1;
X    volatile uint32_t  CFLRI1:1;
N    __I  uint32_t  RESERVE3:8;
X    volatile const  uint32_t  RESERVE3:8;
N} PWM_CCR0_T;
N
Ntypedef struct
N{
N    __IO uint32_t  INV2:1;
X    volatile uint32_t  INV2:1;
N    __IO uint32_t  CRL_IE2:1;
X    volatile uint32_t  CRL_IE2:1;
N    __IO uint32_t  CFL_IE2:1;
X    volatile uint32_t  CFL_IE2:1;
N    __IO uint32_t  CAPCH2EN:1;
X    volatile uint32_t  CAPCH2EN:1;
N    __IO uint32_t  CAPIF2:1;
X    volatile uint32_t  CAPIF2:1;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  CRLRI2:1;
X    volatile uint32_t  CRLRI2:1;
N    __IO uint32_t  CFLRI2:1;
X    volatile uint32_t  CFLRI2:1;
N    __I  uint32_t  RESERVE1:8;
X    volatile const  uint32_t  RESERVE1:8;
N    __IO uint32_t  INV3:1;
X    volatile uint32_t  INV3:1;
N    __IO uint32_t  CRL_IE3:1;
X    volatile uint32_t  CRL_IE3:1;
N    __IO uint32_t  CFL_IE3:1;
X    volatile uint32_t  CFL_IE3:1;
N    __IO uint32_t  CAPCH3EN:1;
X    volatile uint32_t  CAPCH3EN:1;
N    __IO uint32_t  CAPIF3:1;
X    volatile uint32_t  CAPIF3:1;
N    __I  uint32_t  RESERVE2:1;
X    volatile const  uint32_t  RESERVE2:1;
N    __IO uint32_t  CRLRI3:1;
X    volatile uint32_t  CRLRI3:1;
N    __IO uint32_t  CFLRI3:1;
X    volatile uint32_t  CFLRI3:1;
N    __I  uint32_t  RESERVE3:8;
X    volatile const  uint32_t  RESERVE3:8;
N} PWM_CCR2_T;
N
Ntypedef __IO uint32_t PWM_CRLR_T;
Xtypedef volatile uint32_t PWM_CRLR_T;
N
Ntypedef __IO uint32_t PWM_CFLR_T;
Xtypedef volatile uint32_t PWM_CFLR_T;
N
Ntypedef __IO uint32_t PWM_CAPENR_T;
Xtypedef volatile uint32_t PWM_CAPENR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  PWM0:1;
X    volatile uint32_t  PWM0:1;
N    __IO uint32_t  PWM1:1;
X    volatile uint32_t  PWM1:1;
N    __IO uint32_t  PWM2:1;
X    volatile uint32_t  PWM2:1;
N    __IO uint32_t  PWM3:1;
X    volatile uint32_t  PWM3:1;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} PWM_POE_T;
N
Ntypedef struct
N{
N    union 
N    {
N        __IO uint32_t u32PPR;
X        volatile uint32_t u32PPR;
N        
N        struct 
N        {
N            __IO uint32_t  CP01:8;
X            volatile uint32_t  CP01:8;
N            __IO uint32_t  CP23:8;
X            volatile uint32_t  CP23:8;
N            __IO uint32_t  DZI01:8;
X            volatile uint32_t  DZI01:8;
N            __IO uint32_t  DZI23:8;
X            volatile uint32_t  DZI23:8;
N        } PPR;
N    };
N    
N    union 
N    {
N        __IO uint32_t u32CSR;
X        volatile uint32_t u32CSR;
N        
N        struct 
N        {
N            __IO uint32_t  CSR0:3;
X            volatile uint32_t  CSR0:3;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  CSR1:3;
X            volatile uint32_t  CSR1:3;
N            __I  uint32_t  RESERVE1:1;
X            volatile const  uint32_t  RESERVE1:1;
N            __IO uint32_t  CSR2:3;
X            volatile uint32_t  CSR2:3;
N            __I  uint32_t  RESERVE2:1;
X            volatile const  uint32_t  RESERVE2:1;
N            __IO uint32_t  CSR3:3;
X            volatile uint32_t  CSR3:3;
N            __I  uint32_t  RESERVE3:17;
X            volatile const  uint32_t  RESERVE3:17;
N        } CSR;
N    };
N
N    union 
N    {
N        __IO uint32_t u32PCR;
X        volatile uint32_t u32PCR;
N        
N        struct 
N        {
N            __IO uint32_t  CH0EN:1;
X            volatile uint32_t  CH0EN:1;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  CH0INV:1;
X            volatile uint32_t  CH0INV:1;
N            __IO uint32_t  CH0MOD:1;
X            volatile uint32_t  CH0MOD:1;
N            __IO uint32_t  DZEN01:1;
X            volatile uint32_t  DZEN01:1;
N            __IO uint32_t  DZEN23:1;
X            volatile uint32_t  DZEN23:1;
N            __I  uint32_t  RESERVE1:2;
X            volatile const  uint32_t  RESERVE1:2;
N            __IO uint32_t  CH1EN:1;
X            volatile uint32_t  CH1EN:1;
N            __I  uint32_t  RESERVE2:1;
X            volatile const  uint32_t  RESERVE2:1;
N            __IO uint32_t  CH1INV:1;
X            volatile uint32_t  CH1INV:1;
N            __IO uint32_t  CH1MOD:1;
X            volatile uint32_t  CH1MOD:1;
N            __I  uint32_t  RESERVE3:4;
X            volatile const  uint32_t  RESERVE3:4;
N            __IO uint32_t  CH2EN:1;
X            volatile uint32_t  CH2EN:1;
N            __I  uint32_t  RESERVE4:1;
X            volatile const  uint32_t  RESERVE4:1;
N            __IO uint32_t  CH2INV:1;
X            volatile uint32_t  CH2INV:1;
N            __IO uint32_t  CH2MOD:1;
X            volatile uint32_t  CH2MOD:1;
N            __I  uint32_t  RESERVE5:4;
X            volatile const  uint32_t  RESERVE5:4;
N            __IO uint32_t  CH3EN:1;
X            volatile uint32_t  CH3EN:1;
N            __I  uint32_t  RESERVE6:1;
X            volatile const  uint32_t  RESERVE6:1;
N            __IO uint32_t  CH3INV:1;
X            volatile uint32_t  CH3INV:1;
N            __IO uint32_t  CH3MOD:1;
X            volatile uint32_t  CH3MOD:1;
N            __I  uint32_t  RESERVE7:4;   
X            volatile const  uint32_t  RESERVE7:4;   
N        } PCR;
N    };
N
N    union 
N    {
N        __IO uint32_t u32CNR0;
X        volatile uint32_t u32CNR0;
N        __IO uint32_t CNR0;
X        volatile uint32_t CNR0;
N    };
N
N    union 
N    {
N        __IO uint32_t u32CMR0;
X        volatile uint32_t u32CMR0;
N        __IO uint32_t CMR0;
X        volatile uint32_t CMR0;
N    };
N
N    union 
N    {
N        __I  uint32_t u32PDR0;
X        volatile const  uint32_t u32PDR0;
N        __I  uint32_t PDR0;
X        volatile const  uint32_t PDR0;
N    };
N    
N    union 
N    {
N        __IO uint32_t u32CNR1;
X        volatile uint32_t u32CNR1;
N        __IO uint32_t CNR1;
X        volatile uint32_t CNR1;
N    };
N
N    union 
N    {
N        __IO uint32_t u32CMR1;
X        volatile uint32_t u32CMR1;
N        __IO uint32_t CMR1;
X        volatile uint32_t CMR1;
N    };
N
N    union 
N    {
N        __I  uint32_t u32PDR1;
X        volatile const  uint32_t u32PDR1;
N        __I  uint32_t PDR1;
X        volatile const  uint32_t PDR1;
N    };
N
N    union 
N    {
N        __IO uint32_t u32CNR2;
X        volatile uint32_t u32CNR2;
N        __IO uint32_t CNR2;
X        volatile uint32_t CNR2;
N    };
N
N    union 
N    {
N        __IO uint32_t u32CMR2;
X        volatile uint32_t u32CMR2;
N        __IO uint32_t CMR2;
X        volatile uint32_t CMR2;
N    };
N
N    union 
N    {
N        __I  uint32_t u32PDR2;
X        volatile const  uint32_t u32PDR2;
N        __I  uint32_t PDR2;
X        volatile const  uint32_t PDR2;
N    };
N
N    union 
N    {
N        __IO uint32_t u32CNR3;
X        volatile uint32_t u32CNR3;
N        __IO uint32_t CNR3;
X        volatile uint32_t CNR3;
N    };
N
N    union 
N    {
N        __IO uint32_t u32CMR3;
X        volatile uint32_t u32CMR3;
N        __IO uint32_t CMR3;
X        volatile uint32_t CMR3;
N    };
N
N    union 
N    {
N        __I  uint32_t u32PDR3;
X        volatile const  uint32_t u32PDR3;
N        __I  uint32_t PDR3;
X        volatile const  uint32_t PDR3;
N    };
N
N    union 
N    {
N        __IO uint32_t u32PBCR;
X        volatile uint32_t u32PBCR;
N        
N        struct 
N        {
N            __IO uint32_t  BCn:1;
X            volatile uint32_t  BCn:1;
N            __I  uint32_t  RESERVE:31;
X            volatile const  uint32_t  RESERVE:31;
N        } PBCR;
N    };
N
N    union 
N    {
N        __IO uint32_t u32PIER;
X        volatile uint32_t u32PIER;
N        
N        struct 
N        {
N            __IO uint32_t  PWMIE0:1;
X            volatile uint32_t  PWMIE0:1;
N            __IO uint32_t  PWMIE1:1;
X            volatile uint32_t  PWMIE1:1;
N            __IO uint32_t  PWMIE2:1;
X            volatile uint32_t  PWMIE2:1;
N            __IO uint32_t  PWMIE3:1;
X            volatile uint32_t  PWMIE3:1;
N            __I  uint32_t  RESERVE:28;
X            volatile const  uint32_t  RESERVE:28;
N        } PIER;
N    };
N    
N    union 
N    {
N        __IO uint32_t u32PIIR;
X        volatile uint32_t u32PIIR;
N        
N        struct 
N        {
N            __IO uint32_t  PWMIF0:1;
X            volatile uint32_t  PWMIF0:1;
N            __IO uint32_t  PWMIF1:1;
X            volatile uint32_t  PWMIF1:1;
N            __IO uint32_t  PWMIF2:1;
X            volatile uint32_t  PWMIF2:1;
N            __IO uint32_t  PWMIF3:1;
X            volatile uint32_t  PWMIF3:1;
N            __I  uint32_t  RESERVE:28;
X            volatile const  uint32_t  RESERVE:28;
N        } PIIR;
N    };    
N    
N    uint32_t    RESERVE1[2];
N
N    union 
N    {
N        __IO uint32_t u32CCR0;
X        volatile uint32_t u32CCR0;
N        
N        struct 
N        {
N            __IO uint32_t  INV0:1;
X            volatile uint32_t  INV0:1;
N            __IO uint32_t  CRL_IE0:1;
X            volatile uint32_t  CRL_IE0:1;
N            __IO uint32_t  CFL_IE0:1;
X            volatile uint32_t  CFL_IE0:1;
N            __IO uint32_t  CAPCH0EN:1;
X            volatile uint32_t  CAPCH0EN:1;
N            __IO uint32_t  CAPIF0:1;
X            volatile uint32_t  CAPIF0:1;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  CRLRI0:1;
X            volatile uint32_t  CRLRI0:1;
N            __IO uint32_t  CFLRI0:1;
X            volatile uint32_t  CFLRI0:1;
N            __I  uint32_t  RESERVE1:8;
X            volatile const  uint32_t  RESERVE1:8;
N            __IO uint32_t  INV1:1;
X            volatile uint32_t  INV1:1;
N            __IO uint32_t  CRL_IE1:1;
X            volatile uint32_t  CRL_IE1:1;
N            __IO uint32_t  CFL_IE1:1;
X            volatile uint32_t  CFL_IE1:1;
N            __IO uint32_t  CAPCH1EN:1;
X            volatile uint32_t  CAPCH1EN:1;
N            __IO uint32_t  CAPIF1:1;
X            volatile uint32_t  CAPIF1:1;
N            __I  uint32_t  RESERVE2:1;
X            volatile const  uint32_t  RESERVE2:1;
N            __IO uint32_t  CRLRI1:1;
X            volatile uint32_t  CRLRI1:1;
N            __IO uint32_t  CFLRI1:1;
X            volatile uint32_t  CFLRI1:1;
N            __I  uint32_t  RESERVE3:8;
X            volatile const  uint32_t  RESERVE3:8;
N        } CCR0;
N    };
N    
N    union 
N    {
N        __IO uint32_t u32CCR2;
X        volatile uint32_t u32CCR2;
N        
N        struct 
N        {
N            __IO uint32_t  INV2:1;
X            volatile uint32_t  INV2:1;
N            __IO uint32_t  CRL_IE2:1;
X            volatile uint32_t  CRL_IE2:1;
N            __IO uint32_t  CFL_IE2:1;
X            volatile uint32_t  CFL_IE2:1;
N            __IO uint32_t  CAPCH2EN:1;
X            volatile uint32_t  CAPCH2EN:1;
N            __IO uint32_t  CAPIF2:1;
X            volatile uint32_t  CAPIF2:1;
N            __I  uint32_t  RESERVE0:1;
X            volatile const  uint32_t  RESERVE0:1;
N            __IO uint32_t  CRLRI2:1;
X            volatile uint32_t  CRLRI2:1;
N            __IO uint32_t  CFLRI2:1;
X            volatile uint32_t  CFLRI2:1;
N            __I  uint32_t  RESERVE1:8;
X            volatile const  uint32_t  RESERVE1:8;
N            __IO uint32_t  INV3:1;
X            volatile uint32_t  INV3:1;
N            __IO uint32_t  CRL_IE3:1;
X            volatile uint32_t  CRL_IE3:1;
N            __IO uint32_t  CFL_IE3:1;
X            volatile uint32_t  CFL_IE3:1;
N            __IO uint32_t  CAPCH3EN:1;
X            volatile uint32_t  CAPCH3EN:1;
N            __IO uint32_t  CAPIF3:1;
X            volatile uint32_t  CAPIF3:1;
N            __I  uint32_t  RESERVE2:1;
X            volatile const  uint32_t  RESERVE2:1;
N            __IO uint32_t  CRLRI3:1;
X            volatile uint32_t  CRLRI3:1;
N            __IO uint32_t  CFLRI3:1;
X            volatile uint32_t  CFLRI3:1;
N            __I  uint32_t  RESERVE3:8;
X            volatile const  uint32_t  RESERVE3:8;
N        } CCR2;
N    };    
N
N    union 
N    {
N        __IO uint32_t u32CRLR0;
X        volatile uint32_t u32CRLR0;
N        __IO uint32_t CRLR0;
X        volatile uint32_t CRLR0;
N    };
N
N    union 
N    {
N        __IO uint32_t u32CFLR0;
X        volatile uint32_t u32CFLR0;
N        __IO uint32_t CFLR0;
X        volatile uint32_t CFLR0;
N    };
N
N    union 
N    {
N        __IO uint32_t u32CRLR1;
X        volatile uint32_t u32CRLR1;
N        __IO uint32_t CRLR1;
X        volatile uint32_t CRLR1;
N    };
N
N    union 
N    {
N        __IO uint32_t u32CFLR1;
X        volatile uint32_t u32CFLR1;
N        __IO uint32_t CFLR1;
X        volatile uint32_t CFLR1;
N    };
N
N    union 
N    {
N        __IO uint32_t u32CRLR2;
X        volatile uint32_t u32CRLR2;
N        __IO uint32_t CRLR2;
X        volatile uint32_t CRLR2;
N    };
N
N    union 
N    {
N        __IO uint32_t u32CFLR2;
X        volatile uint32_t u32CFLR2;
N        __IO uint32_t CFLR2;
X        volatile uint32_t CFLR2;
N    };
N    
N    union 
N    {
N        __IO uint32_t u32CRLR3;
X        volatile uint32_t u32CRLR3;
N        __IO uint32_t CRLR3;
X        volatile uint32_t CRLR3;
N    };
N
N    union 
N    {
N        __IO uint32_t u32CFLR3;
X        volatile uint32_t u32CFLR3;
N        __IO uint32_t CFLR3;
X        volatile uint32_t CFLR3;
N    };    
N
N    union 
N    {
N        __IO uint32_t u32CAPENR;
X        volatile uint32_t u32CAPENR;
N        __IO uint32_t CAPENR;
X        volatile uint32_t CAPENR;
N    };
N
N    union 
N    {
N        __IO uint32_t u32POE;
X        volatile uint32_t u32POE;
N        
N        struct 
N        {
N            __IO uint32_t  PWM0:1;
X            volatile uint32_t  PWM0:1;
N            __IO uint32_t  PWM1:1;
X            volatile uint32_t  PWM1:1;
N            __IO uint32_t  PWM2:1;
X            volatile uint32_t  PWM2:1;
N            __IO uint32_t  PWM3:1;
X            volatile uint32_t  PWM3:1;
N            __I  uint32_t  RESERVE:28;
X            volatile const  uint32_t  RESERVE:28;
N        } POE;
N    }; 
N} PWM_T;
N
N/* PWM PPR Bit Field Definitions */
N#define PWM_PPR_DZI23_Pos                       24
N#define PWM_PPR_DZI23_Msk                       (0xFFul << PWM_PPR_DZI23_Pos)
N
N#define PWM_PPR_DZI01_Pos                       16
N#define PWM_PPR_DZI01_Msk                       (0xFFul << PWM_PPR_DZI01_Pos)
N
N#define PWM_PPR_CP23_Pos                        8
N#define PWM_PPR_CP23_Msk                        (0xFFul << PWM_PPR_CP23_Pos)
N
N#define PWM_PPR_CP01_Pos                        0
N#define PWM_PPR_CP01_Msk                        (0xFFul << PWM_PPR_CP01_Pos)
N
N/* PWM CSR Bit Field Definitions */
N#define PWM_CSR_CSR3_Pos                        12
N#define PWM_CSR_CSR3_Msk                        (7ul << PWM_CSR_CSR3_Pos)
N
N#define PWM_CSR_CSR2_Pos                        8
N#define PWM_CSR_CSR2_Msk                        (7ul << PWM_CSR_CSR2_Pos)
N
N#define PWM_CSR_CSR1_Pos                        4
N#define PWM_CSR_CSR1_Msk                        (7ul << PWM_CSR_CSR1_Pos)
N
N#define PWM_CSR_CSR0_Pos                        0
N#define PWM_CSR_CSR0_Msk                        (7ul << PWM_CSR_CSR0_Pos)
N
N/* PWM PCR Bit Field Definitions */
N#define PWM_PCR_CH3MOD_Pos                      27
N#define PWM_PCR_CH3MOD_Msk                      (1ul << PWM_PCR_CH3MOD_Pos)
N
N#define PWM_PCR_CH3INV_Pos                      26
N#define PWM_PCR_CH3INV_Msk                      (1ul << PWM_PCR_CH3INV_Pos)
N
N#define PWM_PCR_CH3EN_Pos                       24
N#define PWM_PCR_CH3EN_Msk                       (1ul << PWM_PCR_CH3EN_Pos)
N
N#define PWM_PCR_CH2MOD_Pos                      19
N#define PWM_PCR_CH2MOD_Msk                      (1ul << PWM_PCR_CH2MOD_Pos)
N
N#define PWM_PCR_CH2INV_Pos                      18
N#define PWM_PCR_CH2INV_Msk                      (1ul << PWM_PCR_CH2INV_Pos)
N
N#define PWM_PCR_CH2EN_Pos                       16
N#define PWM_PCR_CH2EN_Msk                       (1ul << PWM_PCR_CH2EN_Pos)
N
N#define PWM_PCR_CH1MOD_Pos                      11
N#define PWM_PCR_CH1MOD_Msk                      (1ul << PWM_PCR_CH1MOD_Pos)
N
N#define PWM_PCR_CH1INV_Pos                      10
N#define PWM_PCR_CH1INV_Msk                      (1ul << PWM_PCR_CH1INV_Pos)
N
N#define PWM_PCR_CH1EN_Pos                       8
N#define PWM_PCR_CH1EN_Msk                       (1ul << PWM_PCR_CH1EN_Pos)
N
N#define PWM_PCR_DZEN23_Pos                      5
N#define PWM_PCR_DZEN23_Msk                      (1ul << PWM_PCR_DZEN23_Pos)
N
N#define PWM_PCR_DZEN01_Pos                      4
N#define PWM_PCR_DZEN01_Msk                      (1ul << PWM_PCR_DZEN01_Pos)
N
N#define PWM_PCR_CH0MOD_Pos                      3
N#define PWM_PCR_CH0MOD_Msk                      (1ul << PWM_PCR_CH0MOD_Pos)
N
N#define PWM_PCR_CH0INV_Pos                      2
N#define PWM_PCR_CH0INV_Msk                      (1ul << PWM_PCR_CH0INV_Pos)
N
N#define PWM_PCR_CH0EN_Pos                       0
N#define PWM_PCR_CH0EN_Msk                       (1ul << PWM_PCR_CH0EN_Pos)
N
N/* PWM CNR Bit Field Definitions */
N#define PWM_CNR_CNR_Pos                         0
N#define PWM_CNR_CNR_Msk                         (0xFFFFul << PWM_CNR_CNR_Pos)
N
N/* PWM CMR Bit Field Definitions */
N#define PWM_CMR_CMR_Pos                         0
N#define PWM_CMR_CMR_Msk                         (0xFFFFul << PWM_CMR_CMR_Pos)
N
N/* PWM PDR Bit Field Definitions */
N#define PWM_PDR_PDR_Pos                         0
N#define PWM_PDR_PDR_Msk                         (0xFFFFul << PWM_PDR_PDR_Pos)
N
N/* PWM PBCR Bit Field Definitions */
N#define PWM_PBCR_BCn_Pos                        0
N#define PWM_PBCR_BCn_Msk                        (1ul << PWM_PBCR_BCn_Pos)
N
N/* PWM PIER Bit Field Definitions */
N#define PWM_PIER_PWMIE3_Pos                     3
N#define PWM_PIER_PWMIE3_Msk                     (1ul << PWM_PIER_PWMIE3_Pos)
N
N#define PWM_PIER_PWMIE2_Pos                     2
N#define PWM_PIER_PWMIE2_Msk                     (1ul << PWM_PIER_PWMIE2_Pos)
N
N#define PWM_PIER_PWMIE1_Pos                     1
N#define PWM_PIER_PWMIE1_Msk                     (1ul << PWM_PIER_PWMIE1_Pos)
N
N#define PWM_PIER_PWMIE0_Pos                     0
N#define PWM_PIER_PWMIE0_Msk                     (1ul << PWM_PIER_PWMIE0_Pos)
N
N/* PWM PIIR Bit Field Definitions */
N#define PWM_PIIR_PWMIF3_Pos                     3
N#define PWM_PIIR_PWMIF3_Msk                     (1ul << PWM_PIIR_PWMIF3_Pos)
N
N#define PWM_PIIR_PWMIF2_Pos                     2
N#define PWM_PIIR_PWMIF2_Msk                     (1ul << PWM_PIIR_PWMIF2_Pos)
N
N#define PWM_PIIR_PWMIF1_Pos                     1
N#define PWM_PIIR_PWMIF1_Msk                     (1ul << PWM_PIIR_PWMIF1_Pos)
N
N#define PWM_PIIR_PWMIF0_Pos                     0
N#define PWM_PIIR_PWMIF0_Msk                     (1ul << PWM_PIIR_PWMIF0_Pos)
N
N/* PWM CCR0 Bit Field Definitions */
N#define PWM_CCR0_CFLRI1_Pos                     23
N#define PWM_CCR0_CFLRI1_Msk                     (1ul << PWM_CCR0_CFLRI1_Pos)
N
N#define PWM_CCR0_CRLRI1_Pos                     22
N#define PWM_CCR0_CRLRI1_Msk                     (1ul << PWM_CCR0_CRLRI1_Pos)
N
N#define PWM_CCR0_CAPIF1_Pos                     20
N#define PWM_CCR0_CAPIF1_Msk                     (1ul << PWM_CCR0_CAPIF1_Pos)
N
N#define PWM_CCR0_CAPCH1EN_Pos                   19
N#define PWM_CCR0_CAPCH1EN_Msk                   (1ul << PWM_CCR0_CAPCH1EN_Pos)
N
N#define PWM_CCR0_CFL_IE1_Pos                    18
N#define PWM_CCR0_CFL_IE1_Msk                    (1ul << PWM_CCR0_CFL_IE1_Pos)
N
N#define PWM_CCR0_CRL_IE1_Pos                    17
N#define PWM_CCR0_CRL_IE1_Msk                    (1ul << PWM_CCR0_CRL_IE1_Pos)
N
N#define PWM_CCR0_INV1_Pos                       16
N#define PWM_CCR0_INV1_Msk                       (1ul << PWM_CCR0_INV1_Pos)
N
N#define PWM_CCR0_CFLRI0_Pos                     7
N#define PWM_CCR0_CFLRI0_Msk                     (1ul << PWM_CCR0_CFLRI0_Pos)
N
N#define PWM_CCR0_CRLRI0_Pos                     6
N#define PWM_CCR0_CRLRI0_Msk                     (1ul << PWM_CCR0_CRLRI0_Pos)
N
N#define PWM_CCR0_CAPIF0_Pos                     4
N#define PWM_CCR0_CAPIF0_Msk                     (1ul << PWM_CCR0_CAPIF0_Pos)
N
N#define PWM_CCR0_CAPCH0EN_Pos                   3
N#define PWM_CCR0_CAPCH0EN_Msk                   (1ul << PWM_CCR0_CAPCH0EN_Pos)
N
N#define PWM_CCR0_CFL_IE0_Pos                    2
N#define PWM_CCR0_CFL_IE0_Msk                    (1ul << PWM_CCR0_CFL_IE0_Pos)
N
N#define PWM_CCR0_CRL_IE0_Pos                    1
N#define PWM_CCR0_CRL_IE0_Msk                    (1ul << PWM_CCR0_CRL_IE0_Pos)
N
N#define PWM_CCR0_INV0_Pos                       0
N#define PWM_CCR0_INV0_Msk                       (1ul << PWM_CCR0_INV0_Pos)
N
N/* PWM CCR2 Bit Field Definitions */
N#define PWM_CCR2_CFLRI3_Pos                     23
N#define PWM_CCR2_CFLRI3_Msk                     (1ul << PWM_CCR2_CFLRI3_Pos)
N
N#define PWM_CCR2_CRLRI3_Pos                     22
N#define PWM_CCR2_CRLRI3_Msk                     (1ul << PWM_CCR2_CRLRI3_Pos)
N
N#define PWM_CCR2_CAPIF3_Pos                     20
N#define PWM_CCR2_CAPIF3_Msk                     (1ul << PWM_CCR2_CAPIF3_Pos)
N
N#define PWM_CCR2_CAPCH3EN_Pos                   19
N#define PWM_CCR2_CAPCH3EN_Msk                   (1ul << PWM_CCR2_CAPCH3EN_Pos)
N
N#define PWM_CCR2_CFL_IE3_Pos                    18
N#define PWM_CCR2_CFL_IE3_Msk                    (1ul << PWM_CCR2_CFL_IE3_Pos)
N
N#define PWM_CCR2_CRL_IE3_Pos                    17
N#define PWM_CCR2_CRL_IE3_Msk                    (1ul << PWM_CCR2_CRL_IE3_Pos)
N
N#define PWM_CCR2_INV3_Pos                       16
N#define PWM_CCR2_INV3_Msk                       (1ul << PWM_CCR2_INV3_Pos)
N
N#define PWM_CCR2_CFLRI2_Pos                     7
N#define PWM_CCR2_CFLRI2_Msk                     (1ul << PWM_CCR2_CFLRI2_Pos)
N
N#define PWM_CCR2_CRLRI2_Pos                     6
N#define PWM_CCR2_CRLRI2_Msk                     (1ul << PWM_CCR2_CRLRI2_Pos)
N
N#define PWM_CCR2_CAPIF2_Pos                     4
N#define PWM_CCR2_CAPIF2_Msk                     (1ul << PWM_CCR2_CAPIF2_Pos)
N
N#define PWM_CCR2_CAPCH2EN_Pos                   3
N#define PWM_CCR2_CAPCH2EN_Msk                   (1ul << PWM_CCR2_CAPCH2EN_Pos)
N
N#define PWM_CCR2_CFL_IE2_Pos                    2
N#define PWM_CCR2_CFL_IE2_Msk                    (1ul << PWM_CCR2_CFL_IE2_Pos)
N
N#define PWM_CCR2_CRL_IE2_Pos                    1
N#define PWM_CCR2_CRL_IE2_Msk                    (1ul << PWM_CCR2_CRL_IE2_Pos)
N
N#define PWM_CCR2_INV2_Pos                       0
N#define PWM_CCR2_INV2_Msk                       (1ul << PWM_CCR2_INV2_Pos)
N
N/* PWM CRLR Bit Field Definitions */
N#define PWM_CRLR_CRLR_Pos                       0
N#define PWM_CRLR_CRLR_Msk                       (0xFFFFul << PWM_CRLR_CRLR_Pos)
N
N/* PWM CFLR Bit Field Definitions */
N#define PWM_CFLR_CFLR_Pos                       0
N#define PWM_CFLR_CFLR_Msk                       (0xFFFFul << PWM_CFLR_CFLR_Pos)
N
N/* PWM CAPENR Bit Field Definitions */
N#define PWM_CAPENR_CAPENR_Pos                   0
N#define PWM_CAPENR_CAPENR_Msk                   (0xFul << PWM_CAPENR_CAPENR_Pos)
N
N/* PWM POE Bit Field Definitions */
N#define PWM_POE_PWM3_Pos                        3
N#define PWM_POE_PWM3_Msk                        (1ul << PWM_POE_PWM3_Pos)
N
N#define PWM_POE_PWM2_Pos                        2
N#define PWM_POE_PWM2_Msk                        (1ul << PWM_POE_PWM2_Pos)
N
N#define PWM_POE_PWM1_Pos                        1
N#define PWM_POE_PWM1_Msk                        (1ul << PWM_POE_PWM1_Pos)
N
N#define PWM_POE_PWM0_Pos                        0
N#define PWM_POE_PWM0_Msk                        (1ul << PWM_POE_PWM0_Pos)
N
N/*----------------------------- I2S Controller -------------------------------*/
N
Ntypedef struct
N{
N    __IO uint32_t  I2SEN:1;
X    volatile uint32_t  I2SEN:1;
N    __IO uint32_t  TXEN:1;
X    volatile uint32_t  TXEN:1;
N    __IO uint32_t  RXEN:1;
X    volatile uint32_t  RXEN:1;
N    __IO uint32_t  MUTE:1;
X    volatile uint32_t  MUTE:1;
N    __IO uint32_t  WORDWIDTH:2;
X    volatile uint32_t  WORDWIDTH:2;
N    __IO uint32_t  MONO:1;
X    volatile uint32_t  MONO:1;
N    __IO uint32_t  FORMAT:1;
X    volatile uint32_t  FORMAT:1;
N    __IO uint32_t  SLAVE:1;
X    volatile uint32_t  SLAVE:1;
N    __IO uint32_t  TXTH:3;
X    volatile uint32_t  TXTH:3;
N    __IO uint32_t  RXTH:3;
X    volatile uint32_t  RXTH:3;
N    __IO uint32_t  MCLKEN:1;
X    volatile uint32_t  MCLKEN:1;
N    __IO uint32_t  RCHZCEN:1;
X    volatile uint32_t  RCHZCEN:1;
N    __IO uint32_t  LCHZCEN:1;
X    volatile uint32_t  LCHZCEN:1;
N    __IO uint32_t  CLR_TXFIFO:1;
X    volatile uint32_t  CLR_TXFIFO:1;
N    __IO uint32_t  CLR_RXFIFO:1;
X    volatile uint32_t  CLR_RXFIFO:1;
N    __IO uint32_t  TXDMA:1;
X    volatile uint32_t  TXDMA:1;
N    __IO uint32_t  RXDMA:1; 
X    volatile uint32_t  RXDMA:1; 
N    __I  uint32_t  RESERVE:10;
X    volatile const  uint32_t  RESERVE:10;
N} I2S_I2SCON_T;
N
Ntypedef struct
N{
N    __IO uint32_t  MCLK_DIV:3;
X    volatile uint32_t  MCLK_DIV:3;
N    __I  uint32_t  RESERVE0:5;
X    volatile const  uint32_t  RESERVE0:5;
N    __IO uint32_t  BCLK_DIV:8;
X    volatile uint32_t  BCLK_DIV:8;
N    __I  uint32_t  RESERVE1:16;
X    volatile const  uint32_t  RESERVE1:16;
N} I2S_I2SCLKDIV_T;
N
Ntypedef struct
N{
N    __IO uint32_t  RXUDFIE:1;
X    volatile uint32_t  RXUDFIE:1;
N    __IO uint32_t  RXOVFIE:1;
X    volatile uint32_t  RXOVFIE:1;
N    __IO uint32_t  RXTHIE:1;
X    volatile uint32_t  RXTHIE:1;
N    __I  uint32_t  RESERVE0:5;
X    volatile const  uint32_t  RESERVE0:5;
N    __IO uint32_t  TXUDFIE:1;
X    volatile uint32_t  TXUDFIE:1;
N    __IO uint32_t  TXOVFIE:1;
X    volatile uint32_t  TXOVFIE:1;
N    __IO uint32_t  TXTHIE:1;
X    volatile uint32_t  TXTHIE:1;
N    __IO uint32_t  RZCIE:1;
X    volatile uint32_t  RZCIE:1;
N    __IO uint32_t  LZCIE:1;
X    volatile uint32_t  LZCIE:1;
N    __I  uint32_t  RESERVE1:19;
X    volatile const  uint32_t  RESERVE1:19;
N} I2S_I2SIE_T;
N
Ntypedef struct
N{
N    __I  uint32_t  I2SINT:1;
X    volatile const  uint32_t  I2SINT:1;
N    __I  uint32_t  I2SRXINT:1;
X    volatile const  uint32_t  I2SRXINT:1;
N    __I  uint32_t  I2STXINT:1;
X    volatile const  uint32_t  I2STXINT:1;
N    __I  uint32_t  RIGHT:1;
X    volatile const  uint32_t  RIGHT:1;
N    __I  uint32_t  RESERVE0:4;
X    volatile const  uint32_t  RESERVE0:4;
N    __IO uint32_t  RXUDF:1;
X    volatile uint32_t  RXUDF:1;
N    __IO uint32_t  RXOVF:1;
X    volatile uint32_t  RXOVF:1;
N    __I  uint32_t  RXTHF:1;
X    volatile const  uint32_t  RXTHF:1;
N    __I  uint32_t  RXFULL:1;
X    volatile const  uint32_t  RXFULL:1;
N    __I  uint32_t  RXEMPTY:1;
X    volatile const  uint32_t  RXEMPTY:1;
N    __I  uint32_t  RESERVE1:3;
X    volatile const  uint32_t  RESERVE1:3;
N    __IO uint32_t  TXUDF:1;
X    volatile uint32_t  TXUDF:1;
N    __IO uint32_t  TXOVF:1;
X    volatile uint32_t  TXOVF:1;
N    __I  uint32_t  TXTHF:1;
X    volatile const  uint32_t  TXTHF:1;
N    __I  uint32_t  TXFULL:1;
X    volatile const  uint32_t  TXFULL:1;
N    __I  uint32_t  TXEMPTY:1;
X    volatile const  uint32_t  TXEMPTY:1;
N    __I  uint32_t  TXBUSY:1;
X    volatile const  uint32_t  TXBUSY:1;
N    __I  uint32_t  RZCF:1;
X    volatile const  uint32_t  RZCF:1;
N    __I  uint32_t  LZCF:1;  
X    volatile const  uint32_t  LZCF:1;  
N    __I  uint32_t  RX_LEVEL:4;
X    volatile const  uint32_t  RX_LEVEL:4;
N    __I  uint32_t  TX_LEVEL:4;
X    volatile const  uint32_t  TX_LEVEL:4;
N} I2S_I2SSTATUS_T;
N
Ntypedef __O uint32_t I2S_I2STXFIFO_T;
Xtypedef volatile uint32_t I2S_I2STXFIFO_T;
N
Ntypedef __I uint32_t I2S_I2SRXFIFO_T;
Xtypedef volatile const uint32_t I2S_I2SRXFIFO_T;
N
Ntypedef struct
N{
N    union 
N    {
N        __IO uint32_t u32I2SCON;
X        volatile uint32_t u32I2SCON;
N        
N        struct 
N        {
N            __IO uint32_t  I2SEN:1;
X            volatile uint32_t  I2SEN:1;
N            __IO uint32_t  TXEN:1;
X            volatile uint32_t  TXEN:1;
N            __IO uint32_t  RXEN:1;
X            volatile uint32_t  RXEN:1;
N            __IO uint32_t  MUTE:1;
X            volatile uint32_t  MUTE:1;
N            __IO uint32_t  WORDWIDTH:2;
X            volatile uint32_t  WORDWIDTH:2;
N            __IO uint32_t  MONO:1;
X            volatile uint32_t  MONO:1;
N            __IO uint32_t  FORMAT:1;
X            volatile uint32_t  FORMAT:1;
N            __IO uint32_t  SLAVE:1;
X            volatile uint32_t  SLAVE:1;
N            __IO uint32_t  TXTH:3;
X            volatile uint32_t  TXTH:3;
N            __IO uint32_t  RXTH:3;
X            volatile uint32_t  RXTH:3;
N            __IO uint32_t  MCLKEN:1;
X            volatile uint32_t  MCLKEN:1;
N            __IO uint32_t  RCHZCEN:1;
X            volatile uint32_t  RCHZCEN:1;
N            __IO uint32_t  LCHZCEN:1;
X            volatile uint32_t  LCHZCEN:1;
N            __IO uint32_t  CLR_TXFIFO:1;
X            volatile uint32_t  CLR_TXFIFO:1;
N            __IO uint32_t  CLR_RXFIFO:1;
X            volatile uint32_t  CLR_RXFIFO:1;
N            __IO uint32_t  TXDMA:1;
X            volatile uint32_t  TXDMA:1;
N            __IO uint32_t  RXDMA:1; 
X            volatile uint32_t  RXDMA:1; 
N            __I  uint32_t  RESERVE:10;
X            volatile const  uint32_t  RESERVE:10;
N        } I2SCON;
N    };
N
N    union 
N    {
N        __IO uint32_t u32I2SCLKDIV;
X        volatile uint32_t u32I2SCLKDIV;
N        
N        struct 
N        {
N            __IO uint32_t  MCLK_DIV:3;
X            volatile uint32_t  MCLK_DIV:3;
N            __I  uint32_t  RESERVE0:5;
X            volatile const  uint32_t  RESERVE0:5;
N            __IO uint32_t  BCLK_DIV:8;
X            volatile uint32_t  BCLK_DIV:8;
N            __I  uint32_t  RESERVE1:16;
X            volatile const  uint32_t  RESERVE1:16;
N        } I2SCLKDIV;
N    };
N
N    union 
N    {
N        __IO uint32_t u32I2SIE;
X        volatile uint32_t u32I2SIE;
N        
N        struct 
N        {
N            __IO uint32_t  RXUDFIE:1;
X            volatile uint32_t  RXUDFIE:1;
N            __IO uint32_t  RXOVFIE:1;
X            volatile uint32_t  RXOVFIE:1;
N            __IO uint32_t  RXTHIE:1;
X            volatile uint32_t  RXTHIE:1;
N            __I  uint32_t  RESERVE0:5;
X            volatile const  uint32_t  RESERVE0:5;
N            __IO uint32_t  TXUDFIE:1;
X            volatile uint32_t  TXUDFIE:1;
N            __IO uint32_t  TXOVFIE:1;
X            volatile uint32_t  TXOVFIE:1;
N            __IO uint32_t  TXTHIE:1;
X            volatile uint32_t  TXTHIE:1;
N            __IO uint32_t  RZCIE:1;
X            volatile uint32_t  RZCIE:1;
N            __IO uint32_t  LZCIE:1;
X            volatile uint32_t  LZCIE:1;
N            __I  uint32_t  RESERVE1:19;
X            volatile const  uint32_t  RESERVE1:19;
N        } I2SIE;
N    };
N
N    union 
N    {
N        __I uint32_t u32I2SSTATUS;
X        volatile const uint32_t u32I2SSTATUS;
N        struct 
N        {
N            __I  uint32_t  I2SINT:1;
X            volatile const  uint32_t  I2SINT:1;
N            __I  uint32_t  I2SRXINT:1;
X            volatile const  uint32_t  I2SRXINT:1;
N            __I  uint32_t  I2STXINT:1;
X            volatile const  uint32_t  I2STXINT:1;
N            __I  uint32_t  RIGHT:1;
X            volatile const  uint32_t  RIGHT:1;
N            __I  uint32_t  RESERVE0:4;
X            volatile const  uint32_t  RESERVE0:4;
N            __IO uint32_t  RXUDF:1;
X            volatile uint32_t  RXUDF:1;
N            __IO uint32_t  RXOVF:1;
X            volatile uint32_t  RXOVF:1;
N            __I  uint32_t  RXTHF:1;
X            volatile const  uint32_t  RXTHF:1;
N            __I  uint32_t  RXFULL:1;
X            volatile const  uint32_t  RXFULL:1;
N            __I  uint32_t  RXEMPTY:1;
X            volatile const  uint32_t  RXEMPTY:1;
N            __I  uint32_t  RESERVE1:3;
X            volatile const  uint32_t  RESERVE1:3;
N            __IO uint32_t  TXUDF:1;
X            volatile uint32_t  TXUDF:1;
N            __IO uint32_t  TXOVF:1;
X            volatile uint32_t  TXOVF:1;
N            __I  uint32_t  TXTHF:1;
X            volatile const  uint32_t  TXTHF:1;
N            __I  uint32_t  TXFULL:1;
X            volatile const  uint32_t  TXFULL:1;
N            __I  uint32_t  TXEMPTY:1;
X            volatile const  uint32_t  TXEMPTY:1;
N            __I  uint32_t  TXBUSY:1;
X            volatile const  uint32_t  TXBUSY:1;
N            __I  uint32_t  RZCF:1;
X            volatile const  uint32_t  RZCF:1;
N            __I  uint32_t  LZCF:1;  
X            volatile const  uint32_t  LZCF:1;  
N            __I  uint32_t  RX_LEVEL:4;
X            volatile const  uint32_t  RX_LEVEL:4;
N            __I  uint32_t  TX_LEVEL:4;
X            volatile const  uint32_t  TX_LEVEL:4;
N        } I2SSTATUS;
N    };
N    
N    union 
N    {
N        __O uint32_t u32I2STXFIFO;
X        volatile uint32_t u32I2STXFIFO;
N        __O uint32_t I2STXFIFO;
X        volatile uint32_t I2STXFIFO;
N    };
N
N    union 
N    {
N        __I uint32_t u32I2SRXFIFO;
X        volatile const uint32_t u32I2SRXFIFO;
N        __I uint32_t I2SRXFIFO;
X        volatile const uint32_t I2SRXFIFO;
N    };
N} I2S_T;
N
N
N/* I2S I2SCON Bit Field Definitions */
N#define I2S_I2SCON_RXDMA_Pos                    21
N#define I2S_I2SCON_RXDMA_Msk                    (1ul << I2S_I2SCON_RXDMA_Pos)
N
N#define I2S_I2SCON_TXDMA_Pos                    20
N#define I2S_I2SCON_TXDMA_Msk                    (1ul << I2S_I2SCON_TXDMA_Pos)
N
N#define I2S_I2SCON_CLR_RXFIFO_Pos               19
N#define I2S_I2SCON_CLR_RXFIFO_Msk               (1ul << I2S_I2SCON_CLR_RXFIFO_Pos)
N
N#define I2S_I2SCON_CLR_TXFIFO_Pos               18
N#define I2S_I2SCON_CLR_TXFIFO_Msk               (1ul << I2S_I2SCON_CLR_TXFIFO_Pos)
N
N#define I2S_I2SCON_LCHZCEN_Pos                  17
N#define I2S_I2SCON_LCHZCEN_Msk                  (1ul << I2S_I2SCON_LCHZCEN_Pos)
N
N#define I2S_I2SCON_RCHZCEN_Pos                  16
N#define I2S_I2SCON_RCHZCEN_Msk                  (1ul << I2S_I2SCON_RCHZCEN_Pos)
N
N#define I2S_I2SCON_MCLKEN_Pos                   15
N#define I2S_I2SCON_MCLKEN_Msk                   (1ul << I2S_I2SCON_MCLKEN_Pos)
N
N#define I2S_I2SCON_RXTH_Pos                     12
N#define I2S_I2SCON_RXTH_Msk                     (7ul << I2S_I2SCON_RXTH_Pos)
N
N#define I2S_I2SCON_TXTH_Pos                     9
N#define I2S_I2SCON_TXTH_Msk                     (7ul << I2S_I2SCON_TXTH_Pos)
N
N#define I2S_I2SCON_SLAVE_Pos                    8
N#define I2S_I2SCON_SLAVE_Msk                    (1ul << I2S_I2SCON_SLAVE_Pos)
N
N#define I2S_I2SCON_FORMAT_Pos                   7
N#define I2S_I2SCON_FORMAT_Msk                   (1ul << I2S_I2SCON_FORMAT_Pos)
N
N#define I2S_I2SCON_MONO_Pos                     6
N#define I2S_I2SCON_MONO_Msk                     (1ul << I2S_I2SCON_MONO_Pos)
N
N#define I2S_I2SCON_WORDWIDTH_Pos                4
N#define I2S_I2SCON_WORDWIDTH_Msk                (3ul << I2S_I2SCON_WORDWIDTH_Pos)
N
N#define I2S_I2SCON_MUTE_Pos                     3
N#define I2S_I2SCON_MUTE_Msk                     (1ul << I2S_I2SCON_MUTE_Pos)
N
N#define I2S_I2SCON_RXEN_Pos                     2
N#define I2S_I2SCON_RXEN_Msk                     (1ul << I2S_I2SCON_RXEN_Pos)
N
N#define I2S_I2SCON_TXEN_Pos                     1
N#define I2S_I2SCON_TXEN_Msk                     (1ul << I2S_I2SCON_TXEN_Pos)
N
N#define I2S_I2SCON_I2SEN_Pos                    0
N#define I2S_I2SCON_I2SEN_Msk                    (1ul << I2S_I2SCON_I2SEN_Pos)
N
N/* I2S I2SCLKDIV Bit Field Definitions */
N#define I2S_I2SCLKDIV_BCLK_DIV_Pos              8
N#define I2S_I2SCLKDIV_BCLK_DIV_Msk              (0xFFul << I2S_I2SCLKDIV_BCLK_DIV_Pos)
N
N#define I2S_I2SCLKDIV_MCLK_DIV_Pos              0
N#define I2S_I2SCLKDIV_MCLK_DIV_Msk              (7ul << I2S_I2SCLKDIV_MCLK_DIV_Pos)
N
N/* I2S I2SIE Bit Field Definitions */
N#define I2S_I2SIE_LZCIE_Pos                     12
N#define I2S_I2SIE_LZCIE_Msk                     (1ul << I2S_I2SIE_LZCIE_Pos)
N
N#define I2S_I2SIE_RZCIE_Pos                     11
N#define I2S_I2SIE_RZCIE_Msk                     (1ul << I2S_I2SIE_RZCIE_Pos)
N
N#define I2S_I2SIE_TXTHIE_Pos                    10
N#define I2S_I2SIE_TXTHIE_Msk                    (1ul << I2S_I2SIE_TXTHIE_Pos)
N                                        
N#define I2S_I2SIE_TXOVFIE_Pos                   9
N#define I2S_I2SIE_TXOVFIE_Msk                   (1ul << I2S_I2SIE_TXOVFIE_Pos)
N
N#define I2S_I2SIE_TXUDFIE_Pos                   8
N#define I2S_I2SIE_TXUDFIE_Msk                   (1ul << I2S_I2SIE_TXUDFIE_Pos)
N
N#define I2S_I2SIE_RXTHIE_Pos                    2
N#define I2S_I2SIE_RXTHIE_Msk                    (1ul << I2S_I2SIE_RXTHIE_Pos)
N                                        
N#define I2S_I2SIE_RXOVFIE_Pos                   1
N#define I2S_I2SIE_RXOVFIE_Msk                   (1ul << I2S_I2SIE_RXOVFIE_Pos)
N
N#define I2S_I2SIE_RXUDFIE_Pos                   0
N#define I2S_I2SIE_RXUDFIE_Msk                   (1ul << I2S_I2SIE_RXUDFIE_Pos)
N
N
N/* I2S I2SSTATUS Bit Field Definitions */
N#define I2S_I2SSTATUS_TX_LEVEL_Pos              28
N#define I2S_I2SSTATUS_TX_LEVEL_Msk              (0xFul << I2S_I2SSTATUS_TX_LEVEL_Pos)
N
N#define I2S_I2SSTATUS_RX_LEVEL_Pos              24
N#define I2S_I2SSTATUS_RX_LEVEL_Msk              (0xFul << I2S_I2SSTATUS_RX_LEVEL_Pos)
N
N#define I2S_I2SSTATUS_LZCF_Pos                  23
N#define I2S_I2SSTATUS_LZCF_Msk                  (1ul << I2S_I2SSTATUS_LZCF_Pos)
N
N#define I2S_I2SSTATUS_RZCF_Pos                  22
N#define I2S_I2SSTATUS_RZCF_Msk                  (1ul << I2S_I2SSTATUS_RZCF_Pos)
N
N#define I2S_I2SSTATUS_TXBUSY_Pos                21
N#define I2S_I2SSTATUS_TXBUSY_Msk                (1ul << I2S_I2SSTATUS_TXBUSY_Pos)
N
N#define I2S_I2SSTATUS_TXEMPTY_Pos               20
N#define I2S_I2SSTATUS_TXEMPTY_Msk               (1ul << I2S_I2SSTATUS_TXEMPTY_Pos)
N
N#define I2S_I2SSTATUS_TXFULL_Pos                19
N#define I2S_I2SSTATUS_TXFULL_Msk                (1ul << I2S_I2SSTATUS_TXFULL_Pos)
N
N#define I2S_I2SSTATUS_TXTHF_Pos                 18
N#define I2S_I2SSTATUS_TXTHF_Msk                 (1ul << I2S_I2SSTATUS_TXTHF_Pos)
N
N#define I2S_I2SSTATUS_TXOVF_Pos                 17
N#define I2S_I2SSTATUS_TXOVF_Msk                 (1ul << I2S_I2SSTATUS_TXOVF_Pos)
N
N#define I2S_I2SSTATUS_TXUDF_Pos                 16
N#define I2S_I2SSTATUS_TXUDF_Msk                 (1ul << I2S_I2SSTATUS_TXUDF_Pos)
N
N#define I2S_I2SSTATUS_RXEMPTY_Pos               12
N#define I2S_I2SSTATUS_RXEMPTY_Msk               (1ul << I2S_I2SSTATUS_RXEMPTY_Pos)
N
N#define I2S_I2SSTATUS_RXFULL_Pos                11
N#define I2S_I2SSTATUS_RXFULL_Msk                (1ul << I2S_I2SSTATUS_RXFULL_Pos)
N
N#define I2S_I2SSTATUS_RXTHF_Pos                 10
N#define I2S_I2SSTATUS_RXTHF_Msk                 (1ul << I2S_I2SSTATUS_RXTHF_Pos)
N
N#define I2S_I2SSTATUS_RXOVF_Pos                 9
N#define I2S_I2SSTATUS_RXOVF_Msk                 (1ul << I2S_I2SSTATUS_RXOVF_Pos)
N
N#define I2S_I2SSTATUS_RXUDF_Pos                 8
N#define I2S_I2SSTATUS_RXUDF_Msk                 (1ul << I2S_I2SSTATUS_RXUDF_Pos)
N
N#define I2S_I2SSTATUS_RIGHT_Pos                 3
N#define I2S_I2SSTATUS_RIGHT_Msk                 (1ul << I2S_I2SSTATUS_RIGHT_Pos)
N
N#define I2S_I2SSTATUS_I2STXINT_Pos              2
N#define I2S_I2SSTATUS_I2STXINT_Msk              (1ul << I2S_I2SSTATUS_I2STXINT_Pos)
N
N#define I2S_I2SSTATUS_I2SRXINT_Pos              1
N#define I2S_I2SSTATUS_I2SRXINT_Msk              (1ul << I2S_I2SSTATUS_I2SRXINT_Pos)
N
N#define I2S_I2SSTATUS_I2SINT_Pos                0
N#define I2S_I2SSTATUS_I2SINT_Msk                (1ul << I2S_I2SSTATUS_I2SINT_Pos)
N
N
N/*----------------------------- EBI Controller -------------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  ExtEN:1;
X    volatile uint32_t  ExtEN:1;
N    __IO uint32_t  ExtBW16:1;
X    volatile uint32_t  ExtBW16:1;
N    __I  uint32_t  RESERVE0:6;
X    volatile const  uint32_t  RESERVE0:6;
N    __IO uint32_t  MCLKDIV:3;
X    volatile uint32_t  MCLKDIV:3;
N    __I  uint32_t  RESERVE1:5;
X    volatile const  uint32_t  RESERVE1:5;
N    __IO uint32_t  ExttALE:3;
X    volatile uint32_t  ExttALE:3;
N    __I  uint32_t  RESERVE2:13;
X    volatile const  uint32_t  RESERVE2:13;
N} EBI_EBICON_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:3;
X    volatile const  uint32_t  RESERVE0:3;
N    __IO uint32_t  ExttACC:5;
X    volatile uint32_t  ExttACC:5;
N    __IO uint32_t  ExttAHD:3;
X    volatile uint32_t  ExttAHD:3;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __IO uint32_t  ExtIW2X:4;
X    volatile uint32_t  ExtIW2X:4;
N    __I  uint32_t  RESERVE2:8;
X    volatile const  uint32_t  RESERVE2:8;
N    __IO uint32_t  ExtIR2R:4;
X    volatile uint32_t  ExtIR2R:4;
N    __I  uint32_t  RESERVE3:4;
X    volatile const  uint32_t  RESERVE3:4;
N} EBI_EXTIME_T;
N
Ntypedef struct
N{
N    union {
N        __IO uint32_t u32EBICON;
X        volatile uint32_t u32EBICON;
N        struct {
N            __IO uint32_t  ExtEN:1;
X            volatile uint32_t  ExtEN:1;
N            __IO uint32_t  ExtBW16:1;
X            volatile uint32_t  ExtBW16:1;
N            __I  uint32_t  RESERVE0:6;
X            volatile const  uint32_t  RESERVE0:6;
N            __IO uint32_t  MCLKDIV:3;
X            volatile uint32_t  MCLKDIV:3;
N            __I  uint32_t  RESERVE1:5;
X            volatile const  uint32_t  RESERVE1:5;
N            __IO uint32_t  ExttALE:3;
X            volatile uint32_t  ExttALE:3;
N            __I  uint32_t  RESERVE2:13;
X            volatile const  uint32_t  RESERVE2:13;
N        } EBICON;
N    };
N
N    union {
N        __IO uint32_t u32EXTIME;
X        volatile uint32_t u32EXTIME;
N        struct {
N            __I  uint32_t  RESERVE0:3;
X            volatile const  uint32_t  RESERVE0:3;
N            __IO uint32_t  ExttACC:5;
X            volatile uint32_t  ExttACC:5;
N            __IO uint32_t  ExttAHD:3;
X            volatile uint32_t  ExttAHD:3;
N            __I  uint32_t  RESERVE1:1;
X            volatile const  uint32_t  RESERVE1:1;
N            __IO uint32_t  ExtIW2X:4;
X            volatile uint32_t  ExtIW2X:4;
N            __I  uint32_t  RESERVE2:8;
X            volatile const  uint32_t  RESERVE2:8;
N            __IO uint32_t  ExtIR2R:4;
X            volatile uint32_t  ExtIR2R:4;
N            __I  uint32_t  RESERVE3:4;
X            volatile const  uint32_t  RESERVE3:4;
N        } EXTIME;
N    };
N} EBI_T;
N
N/* EBI EBICON Bit Field Definitions */
N#define EBI_EBICON_ExttALE_Pos      16
N#define EBI_EBICON_ExttALE_Msk      (0x7ul << EBI_EBICON_ExttALE_Pos)
N
N#define EBI_EBICON_MCLKDIV_Pos      8
N#define EBI_EBICON_MCLKDIV_Msk      (0x7ul << EBI_EBICON_MCLKDIV_Pos)
N
N#define EBI_EBICON_ExtBW16_Pos      1
N#define EBI_EBICON_ExtBW16_Msk      (1ul << EBI_EBICON_ExtBW16_Pos)
N
N#define EBI_EBICON_ExtEN_Pos        0
N#define EBI_EBICON_ExtEN_Msk        (1ul << EBI_EBICON_ExtEN_Pos)
N
N/* EBI EXTIME Bit Field Definitions */
N#define EBI_EXTIME_ExtIR2R_Pos      24
N#define EBI_EXTIME_ExtIR2R_Msk      (0xFul << EBI_EXTIME_ExtIR2R_Pos)
N
N#define EBI_EXTIME_ExtIW2X_Pos      12
N#define EBI_EXTIME_ExtIW2X_Msk      (0xFul << EBI_EXTIME_ExtIW2X_Pos)
N
N#define EBI_EXTIME_ExttAHD_Pos      8
N#define EBI_EXTIME_ExttAHD_Msk      (0x7ul << EBI_EXTIME_ExttAHD_Pos)
N
N#define EBI_EXTIME_ExttACC_Pos      3
N#define EBI_EXTIME_ExttACC_Msk      (0x1Ful << EBI_EXTIME_ExttACC_Pos)
N
N
N/******************************************************************************/
N/*                         Peripheral memory map                              */
N/******************************************************************************/
N/* Peripheral and SRAM base address */
N#define FLASH_BASE          ((     uint32_t)0x00000000)
N#define SRAM_BASE           ((     uint32_t)0x20000000)
N#define AHB_BASE            ((     uint32_t)0x50000000)
N#define APB1_BASE           ((     uint32_t)0x40000000)
N#define APB2_BASE           ((     uint32_t)0x40100000)
N
N/* Peripheral memory map */
N#define GPIO_BASE           (AHB_BASE        + 0x4000)
N
N#define GPIOA_BASE          (GPIO_BASE               )
N#define GPIOB_BASE          (GPIO_BASE       + 0x0040)
N#define GPIOC_BASE          (GPIO_BASE       + 0x0080)
N#define GPIOD_BASE          (GPIO_BASE       + 0x00C0)
N#define GPIOE_BASE          (GPIO_BASE       + 0x0100)
N#define GPIO_DBNCECON_BASE  (GPIO_BASE       + 0x0180)
N
N#define UART0_BASE           (APB1_BASE      + 0x50000)
N#define UART1_BASE           (APB2_BASE      + 0x50000)
N#define UART2_BASE           (APB2_BASE      + 0x54000)
N
N
N#define TIMER0_BASE          (APB1_BASE      + 0x10000)  
N#define TIMER1_BASE          (APB1_BASE      + 0x10020)  
N#define TIMER2_BASE          (APB2_BASE      + 0x10000)  
N#define TIMER3_BASE          (APB2_BASE      + 0x10020)  
N
N#define WDT_BASE             (APB1_BASE      + 0x4000)  
N
N#define SPI0_BASE            (APB1_BASE      + 0x30000)
N#define SPI1_BASE            (APB1_BASE      + 0x34000)
N#define SPI2_BASE            (APB2_BASE      + 0x30000)
N#define SPI3_BASE            (APB2_BASE      + 0x34000)
N
N#define I2C0_BASE            (APB1_BASE      + 0x20000)
N#define I2C1_BASE            (APB2_BASE      + 0x20000)
N
N#define RTC_BASE             (APB1_BASE      + 0x08000)
N
N#define ADC_BASE             (APB1_BASE      + 0xE0000)
N
N#define ACMP_BASE            (APB1_BASE      + 0xD0000)   
N
N#define SYSCLK_BASE          (AHB_BASE       + 0x00200)
N
N#define GCR_BASE             (AHB_BASE       + 0x00000)
N
N#define INT_BASE             (AHB_BASE       + 0x00300)
N
N#define FMC_BASE             (AHB_BASE       + 0x0C000)
N
N#define PS2_BASE             (APB2_BASE      + 0x00000)
N
N#define CAN0_BASE            (APB2_BASE      + 0x80000)
N#define CAN1_BASE            (APB2_BASE      + 0x84000)
N#define C_CAN_BASE           (APB2_BASE      + 0x88000)
N
N#define USBD_BASE            (APB1_BASE      + 0x60000)
N
N#define PDMA0_BASE           (AHB_BASE       + 0x08000)
N#define PDMA1_BASE           (AHB_BASE       + 0x08100)
N#define PDMA2_BASE           (AHB_BASE       + 0x08200)
N#define PDMA3_BASE           (AHB_BASE       + 0x08300)
N#define PDMA4_BASE           (AHB_BASE       + 0x08400)
N#define PDMA5_BASE           (AHB_BASE       + 0x08500)
N#define PDMA6_BASE           (AHB_BASE       + 0x08600)
N#define PDMA7_BASE           (AHB_BASE       + 0x08700)
N#define PDMA8_BASE           (AHB_BASE       + 0x08800)
N#define PDMA9_BASE           (AHB_BASE       + 0x08900)
N#define PDMA10_BASE          (AHB_BASE       + 0x08A00)
N#define PDMA11_BASE          (AHB_BASE       + 0x08B00)
N#define PDMA_GCR_BASE        (AHB_BASE       + 0x08F00)
N
N#define PWMA_BASE            (APB1_BASE      + 0x40000)
N#define PWMB_BASE            (APB2_BASE      + 0x40000)
N
N#define I2S_BASE             (APB2_BASE      + 0xA0000)
N
N#define EBI_BASE             (AHB_BASE       + 0x10000)
N
N/******************************************************************************/
N/*                         Peripheral declaration                             */
N/******************************************************************************/
N#define GPIOA               ((GPIO_T *) GPIOA_BASE)
N#define GPIOB               ((GPIO_T *) GPIOB_BASE)
N#define GPIOC               ((GPIO_T *) GPIOC_BASE)
N#define GPIOD               ((GPIO_T *) GPIOD_BASE)
N#define GPIOE               ((GPIO_T *) GPIOE_BASE)
N#define GPIO_DBNCECON       ((GPIO_DBNCECON_T *) GPIO_DBNCECON_BASE)
N#define GPIO_BIT_ADDR_BASE  (GPIO_BASE + 0x200)
N
N#define UART0               ((UART_T *) UART0_BASE)
N#define UART1               ((UART_T *) UART1_BASE)
N#define UART2               ((UART_T *) UART2_BASE)
N
N
N#define TIMER0              ((TIMER_T *) TIMER0_BASE)
N#define TIMER1              ((TIMER_T *) TIMER1_BASE)
N#define TIMER2              ((TIMER_T *) TIMER2_BASE)
N#define TIMER3              ((TIMER_T *) TIMER3_BASE)
N
N#define WDT                 ((WDT_T *) WDT_BASE)
N
N#define SPI0                ((SPI_T *) SPI0_BASE)
N#define SPI1                ((SPI_T *) SPI1_BASE)
N#define SPI2                ((SPI_T *) SPI2_BASE)
N#define SPI3                ((SPI_T *) SPI3_BASE)
N
N#define I2C0                ((I2C_T *) I2C0_BASE)
N#define I2C1                ((I2C_T *) I2C1_BASE)
N
N#define I2S                 ((I2S_T *) I2S_BASE)
N
N#define RTC                 ((RTC_T *) RTC_BASE)
N
N#define ADC                 ((ADC_T *) ADC_BASE)
N
N#define ACMP                ((ACMP_T *) ACMP_BASE)
N
N#define SYSCLK              ((SYSCLK_T *) SYSCLK_BASE)
N
N#define SYS                 ((GCR_T *) GCR_BASE)
N
N#define SYSINT              ((GCR_INT_T *) INT_BASE)
N
N#define FMC                 ((FMC_T *) FMC_BASE)
N
N#define PS2                 ((PS2_T *) PS2_BASE)
N
N#define CAN                 ((CAN_T *) CAN0_BASE)
N#define USBD                ((USBD_T *) USBD_BASE)
N
N#define PDMA0               ((PDMA_T *) PDMA0_BASE)
N#define PDMA1               ((PDMA_T *) PDMA1_BASE)
N#define PDMA2               ((PDMA_T *) PDMA2_BASE)
N#define PDMA3               ((PDMA_T *) PDMA3_BASE)
N#define PDMA4               ((PDMA_T *) PDMA4_BASE)
N#define PDMA5               ((PDMA_T *) PDMA5_BASE)
N#define PDMA6               ((PDMA_T *) PDMA6_BASE)
N#define PDMA7               ((PDMA_T *) PDMA7_BASE)
N#define PDMA8               ((PDMA_T *) PDMA8_BASE)
N#define PDMA9               ((PDMA_T *) PDMA9_BASE)
N#define PDMA_GCR            ((PDMA_GCR_T *) PDMA_GCR_BASE)
N
N#define PWMA                ((PWM_T *) PWMA_BASE)
N#define PWMB                ((PWM_T *) PWMB_BASE)
N
N#define EBI                 ((EBI_T *) EBI_BASE)
N
N#define UNLOCKREG(x)        *((__IO uint32_t *)(GCR_BASE + 0x100)) = 0x59;*((__IO uint32_t *)(GCR_BASE + 0x100)) = 0x16;*((__IO uint32_t *)(GCR_BASE + 0x100)) = 0x88
N#define LOCKREG(x)          *((__IO uint32_t *)(GCR_BASE + 0x100)) = 0x00;     
N
N#define REGCOPY(dest, src)  *((uint32_t *)&(dest)) = *((uint32_t *)&(src))
N#define CLEAR(dest)         *((uint32_t *)&(dest)) = 0
N
N//=============================================================================
Ntypedef volatile unsigned char  vu8;
Ntypedef volatile unsigned long  vu32;
Ntypedef volatile unsigned short vu16;
N#define M8(adr)  (*((vu8  *) (adr)))
N#define M16(adr) (*((vu16 *) (adr)))
N#define M32(adr) (*((vu32 *) (adr)))
N
N#define outpw(port,value)   *((volatile unsigned int *)(port))=value
N#define inpw(port)          (*((volatile unsigned int *)(port)))
N#define outpb(port,value)   *((volatile unsigned char *)(port))=value
N#define inpb(port)          (*((volatile unsigned char *)(port)))
N#define outps(port,value)   *((volatile unsigned short *)(port))=value
N#define inps(port)          (*((volatile unsigned short *)(port)))
N
N#define outp32(port,value)  *((volatile unsigned int *)(port))=value
N#define inp32(port)         (*((volatile unsigned int *)(port)))
N#define outp8(port,value)   *((volatile unsigned char *)(port))=value
N#define inp8(port)          (*((volatile unsigned char *)(port)))
N#define outp16(port,value)  *((volatile unsigned short *)(port))=value
N#define inp16(port)         (*((volatile unsigned short *)(port)))
N
N
N#define E_SUCCESS   0
N#ifndef NULL
S#define NULL        0
N#endif
N
N#define TRUE        1
N#define FALSE       0
N
N#define ENABLE     1
N#define DISABLE    0
N
N/* Define one bit mask */
N#define BIT0    0x00000001
N#define BIT1    0x00000002
N#define BIT2    0x00000004
N#define BIT3    0x00000008
N#define BIT4    0x00000010
N#define BIT5    0x00000020
N#define BIT6    0x00000040
N#define BIT7    0x00000080
N#define BIT8    0x00000100
N#define BIT9    0x00000200
N#define BIT10   0x00000400
N#define BIT11   0x00000800
N#define BIT12   0x00001000
N#define BIT13   0x00002000
N#define BIT14   0x00004000
N#define BIT15   0x00008000
N#define BIT16   0x00010000
N#define BIT17   0x00020000
N#define BIT18   0x00040000
N#define BIT19   0x00080000
N#define BIT20   0x00100000
N#define BIT21   0x00200000
N#define BIT22   0x00400000
N#define BIT23   0x00800000
N#define BIT24   0x01000000
N#define BIT25   0x02000000
N#define BIT26   0x04000000
N#define BIT27   0x08000000
N#define BIT28   0x10000000
N#define BIT29   0x20000000
N#define BIT30   0x40000000
N#define BIT31   0x80000000
N
N#endif
N                                                                                                 
L 3 "..\..\Driver\Src\NUC1xx-LB_002\Seven_Segment.c" 2
N#include "DrvGPIO.h"
L 1 "..\..\Driver\Include\Driver\DrvGPIO.h" 1
N/*---------------------------------------------------------------------------------------------------------*/
N/*                                                                                                         */
N/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#ifndef DRVGPIO_H
N#define DRVGPIO_H
N
N#include "NUC1xx.h"
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Define Version number								                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N#define DRVGPIO_MAJOR_NUM       1
N#define DRVGPIO_MINOR_NUM	    04
N#define DRVGPIO_BUILD_NUM	    005
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Version define with SysInfra				                                                           */
N/*---------------------------------------------------------------------------------------------------------*/
N#define DRVGPIO_VERSION_NUM     _SYSINFRA_VERSION(DRVGPIO_MAJOR_NUM, DRVGPIO_MINOR_NUM, DRVGPIO_BUILD_NUM)
N							   
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Define Error Code									                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N#define E_DRVGPIO_ARGUMENT          _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVGPIO, 1)
N#define E_DRVGPIO_GROUP_PIN         _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVGPIO, 2)
N#define E_DRVGPIO_BUSY              _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVGPIO, 3)   
N
Ntypedef void (*GPIO_GPAB_CALLBACK)(uint32_t u32GPAStatus, uint32_t u32GPBStatus);
Ntypedef void (*GPIO_GPCDE_CALLBACK)(uint32_t u32GPCStatus, uint32_t u32GPDStatus, uint32_t u32GPEStatus);
Ntypedef void (*GPIO_EINT0_CALLBACK)(void);
Ntypedef void (*GPIO_EINT1_CALLBACK)(void);
N
N/* Define GPIO[n] Pin I/O Bit Output/Input Control. Only NUC1x0xxxBN and NUC1x0xxxCN Series support this feature. */
N#define _DRVGPIO_DOUT(PortNum, PinNum)      (*((volatile uint32_t *) ((GPIO_BIT_ADDR_BASE+(0x40*PortNum)) + (0x4*PinNum))))    
N#define GPA_0	            _DRVGPIO_DOUT(0, 0)
N#define GPA_1	            _DRVGPIO_DOUT(0, 1)
N#define GPA_2	            _DRVGPIO_DOUT(0, 2)
N#define GPA_3	            _DRVGPIO_DOUT(0, 3)
N#define GPA_4	            _DRVGPIO_DOUT(0, 4)
N#define GPA_5	            _DRVGPIO_DOUT(0, 5)
N#define GPA_6	            _DRVGPIO_DOUT(0, 6)
N#define GPA_7	            _DRVGPIO_DOUT(0, 7)
N#define GPA_8	            _DRVGPIO_DOUT(0, 8)
N#define GPA_9	            _DRVGPIO_DOUT(0, 9)
N#define GPA_10	            _DRVGPIO_DOUT(0, 10)
N#define GPA_11	            _DRVGPIO_DOUT(0, 11)
N#define GPA_12	            _DRVGPIO_DOUT(0, 12)
N#define GPA_13	            _DRVGPIO_DOUT(0, 13)
N#define GPA_14	            _DRVGPIO_DOUT(0, 14)
N#define GPA_15	            _DRVGPIO_DOUT(0, 15)
N#define GPB_0	            _DRVGPIO_DOUT(1, 0)
N#define GPB_1	            _DRVGPIO_DOUT(1, 1)
N#define GPB_2	            _DRVGPIO_DOUT(1, 2)
N#define GPB_3	            _DRVGPIO_DOUT(1, 3)
N#define GPB_4	            _DRVGPIO_DOUT(1, 4)
N#define GPB_5	            _DRVGPIO_DOUT(1, 5)
N#define GPB_6	            _DRVGPIO_DOUT(1, 6)
N#define GPB_7	            _DRVGPIO_DOUT(1, 7)
N#define GPB_8	            _DRVGPIO_DOUT(1, 8)
N#define GPB_9	            _DRVGPIO_DOUT(1, 9)
N#define GPB_10	            _DRVGPIO_DOUT(1, 10)
N#define GPB_11	            _DRVGPIO_DOUT(1, 11)
N#define GPB_12	            _DRVGPIO_DOUT(1, 12)
N#define GPB_13	            _DRVGPIO_DOUT(1, 13)
N#define GPB_14	            _DRVGPIO_DOUT(1, 14)
N#define GPB_15	            _DRVGPIO_DOUT(1, 15)
N#define GPC_0	            _DRVGPIO_DOUT(2, 0)
N#define GPC_1	            _DRVGPIO_DOUT(2, 1)
N#define GPC_2	            _DRVGPIO_DOUT(2, 2)
N#define GPC_3	            _DRVGPIO_DOUT(2, 3)
N#define GPC_4	            _DRVGPIO_DOUT(2, 4)
N#define GPC_5	            _DRVGPIO_DOUT(2, 5)
N#define GPC_6	            _DRVGPIO_DOUT(2, 6)
N#define GPC_7	            _DRVGPIO_DOUT(2, 7)
N#define GPC_8	            _DRVGPIO_DOUT(2, 8)
N#define GPC_9	            _DRVGPIO_DOUT(2, 9)
N#define GPC_10	            _DRVGPIO_DOUT(2, 10)
N#define GPC_11	            _DRVGPIO_DOUT(2, 11)
N#define GPC_12	            _DRVGPIO_DOUT(2, 12)
N#define GPC_13	            _DRVGPIO_DOUT(2, 13)
N#define GPC_14	            _DRVGPIO_DOUT(2, 14)
N#define GPC_15	            _DRVGPIO_DOUT(2, 15)
N#define GPD_0	            _DRVGPIO_DOUT(3, 0)
N#define GPD_1	            _DRVGPIO_DOUT(3, 1)
N#define GPD_2	            _DRVGPIO_DOUT(3, 2)
N#define GPD_3	            _DRVGPIO_DOUT(3, 3)
N#define GPD_4	            _DRVGPIO_DOUT(3, 4)
N#define GPD_5	            _DRVGPIO_DOUT(3, 5)
N#define GPD_6	            _DRVGPIO_DOUT(3, 6)
N#define GPD_7	            _DRVGPIO_DOUT(3, 7)
N#define GPD_8	            _DRVGPIO_DOUT(3, 8)
N#define GPD_9	            _DRVGPIO_DOUT(3, 9)
N#define GPD_10	            _DRVGPIO_DOUT(3, 10)
N#define GPD_11	            _DRVGPIO_DOUT(3, 11)
N#define GPD_12	            _DRVGPIO_DOUT(3, 12)
N#define GPD_13	            _DRVGPIO_DOUT(3, 13)
N#define GPD_14	            _DRVGPIO_DOUT(3, 14)
N#define GPD_15	            _DRVGPIO_DOUT(3, 15)
N#define GPE_0	            _DRVGPIO_DOUT(4, 0)
N#define GPE_1	            _DRVGPIO_DOUT(4, 1)
N#define GPE_2	            _DRVGPIO_DOUT(4, 2)
N#define GPE_3	            _DRVGPIO_DOUT(4, 3)
N#define GPE_4	            _DRVGPIO_DOUT(4, 4)
N#define GPE_5	            _DRVGPIO_DOUT(4, 5)
N#define GPE_6	            _DRVGPIO_DOUT(4, 6)
N#define GPE_7	            _DRVGPIO_DOUT(4, 7)
N#define GPE_8	            _DRVGPIO_DOUT(4, 8)
N#define GPE_9	            _DRVGPIO_DOUT(4, 9)
N#define GPE_10	            _DRVGPIO_DOUT(4, 10)
N#define GPE_11	            _DRVGPIO_DOUT(4, 11)
N#define GPE_12	            _DRVGPIO_DOUT(4, 12)
N#define GPE_13	            _DRVGPIO_DOUT(4, 13)
N#define GPE_14	            _DRVGPIO_DOUT(4, 14)
N#define GPE_15	            _DRVGPIO_DOUT(4, 15)
N
Ntypedef enum 
N{
N	E_GPA = 0,
N	E_GPB = 1, 
N	E_GPC = 2, 
N	E_GPD = 3, 
N	E_GPE = 4
N} E_DRVGPIO_PORT;
N
Ntypedef enum 
N{
N    E_IO_INPUT = 0,
N    E_IO_OUTPUT,
N    E_IO_OPENDRAIN,
N    E_IO_QUASI
N} E_DRVGPIO_IO;
N
Ntypedef enum 
N{
N    E_IO_RISING = 0,
N    E_IO_FALLING,
N    E_IO_BOTH_EDGE
N} E_DRVGPIO_INT_TYPE;
N
Ntypedef enum
N{
N    E_MODE_EDGE = 0,
N    E_MODE_LEVEL
N} E_DRVGPIO_INT_MODE;
N
Ntypedef enum
N{
N    E_DBCLKSRC_HCLK = 0, 
N    E_DBCLKSRC_10K = 1
N} E_DRVGPIO_DBCLKSRC;	   
N
Ntypedef enum
N{
N	E_FUNC_GPIO,    E_FUNC_CLKO,    E_FUNC_I2C0,    E_FUNC_I2C1,    E_FUNC_I2S,     E_FUNC_CAN0,	
N    E_FUNC_ACMP0,   E_FUNC_ACMP1,   
N    E_FUNC_SPI0,    E_FUNC_SPI0_SS1,    E_FUNC_SPI0_2BIT_MODE,
N    E_FUNC_SPI1,    E_FUNC_SPI1_SS1,    E_FUNC_SPI1_2BIT_MODE,
N    E_FUNC_SPI2,    E_FUNC_SPI2_SS1,    E_FUNC_SPI2_2BIT_MODE,
N    E_FUNC_SPI3,    E_FUNC_SPI3_SS1,    E_FUNC_SPI3_2BIT_MODE,      
N    E_FUNC_SPI0_QFN36PIN,   E_FUNC_SPI0_SS1_QFN36PIN,   E_FUNC_SPI0_2BIT_MODE_QFN36PIN,
N    E_FUNC_ADC0,    E_FUNC_ADC1,    E_FUNC_ADC2,    E_FUNC_ADC3,    E_FUNC_ADC4,    E_FUNC_ADC5,
N    E_FUNC_ADC6,    E_FUNC_ADC7,    E_FUNC_EXTINT0, E_FUNC_EXTINT1, E_FUNC_TMR0,    E_FUNC_TMR1,      
N    E_FUNC_TMR2,    E_FUNC_TMR3,    E_FUNC_T0EX,    E_FUNC_T1EX,    E_FUNC_T2EX,    E_FUNC_T3EX,
N    E_FUNC_UART0,   E_FUNC_UART0_RX_TX, E_FUNC_UART0_RTS_CTS,
N    E_FUNC_UART1,   E_FUNC_UART1_RX_TX, E_FUNC_UART1_RTS_CTS,       E_FUNC_UART2,
N    E_FUNC_PWM01,   E_FUNC_PWM23,   E_FUNC_PWM45,   E_FUNC_PWM67,   E_FUNC_PWM0,    E_FUNC_PWM1,
N    E_FUNC_PWM2,    E_FUNC_PWM3,    E_FUNC_PWM4,    E_FUNC_PWM5,    E_FUNC_PWM6,    E_FUNC_PWM7,    
N    E_FUNC_EBI_8B,  E_FUNC_EBI_16B,          
N} E_DRVGPIO_FUNC;
N			  
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define GPIO functions prototype                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
Nint32_t DrvGPIO_Open(E_DRVGPIO_PORT port, int32_t i32Bit, E_DRVGPIO_IO mode);
Nint32_t DrvGPIO_Close(E_DRVGPIO_PORT port, int32_t i32Bit);
Nint32_t DrvGPIO_SetBit(E_DRVGPIO_PORT port, int32_t i32Bit);
Nint32_t DrvGPIO_GetBit(E_DRVGPIO_PORT port, int32_t i32Bit);
Nint32_t DrvGPIO_ClrBit(E_DRVGPIO_PORT port, int32_t i32Bit);
Nint32_t DrvGPIO_SetPortBits(E_DRVGPIO_PORT port, int32_t i32Data);
Nint32_t DrvGPIO_GetPortBits(E_DRVGPIO_PORT port);
Nint32_t DrvGPIO_GetDoutBit(E_DRVGPIO_PORT port, int32_t i32Bit);
Nint32_t DrvGPIO_GetPortDoutBits(E_DRVGPIO_PORT port);
Nint32_t DrvGPIO_SetBitMask(E_DRVGPIO_PORT port, int32_t i32Bit);
Nint32_t DrvGPIO_GetBitMask(E_DRVGPIO_PORT port, int32_t i32Bit);
Nint32_t DrvGPIO_ClrBitMask(E_DRVGPIO_PORT port, int32_t i32Bit);
Nint32_t DrvGPIO_SetPortMask(E_DRVGPIO_PORT port, int32_t i32MaskData);
Nint32_t DrvGPIO_GetPortMask(E_DRVGPIO_PORT port);
Nint32_t DrvGPIO_ClrPortMask(E_DRVGPIO_PORT port, int32_t i32MaskData);
Nint32_t DrvGPIO_EnableDigitalInputBit(E_DRVGPIO_PORT port, int32_t i32Bit);
Nint32_t DrvGPIO_DisableDigitalInputBit(E_DRVGPIO_PORT port, int32_t i32Bit);
Nint32_t DrvGPIO_EnableDebounce(E_DRVGPIO_PORT port, int32_t i32Bit);
Nint32_t DrvGPIO_DisableDebounce(E_DRVGPIO_PORT port, int32_t i32Bit);
Nint32_t DrvGPIO_SetDebounceTime(uint32_t u32CycleSelection, E_DRVGPIO_DBCLKSRC ClockSource);
Nint32_t DrvGPIO_GetDebounceSampleCycle(void);
Nint32_t DrvGPIO_EnableInt(E_DRVGPIO_PORT port, int32_t i32Bit, E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode);
Nint32_t DrvGPIO_DisableInt(E_DRVGPIO_PORT port, int32_t i32Bit);
Nvoid DrvGPIO_SetIntCallback(GPIO_GPAB_CALLBACK pfGPABCallback, GPIO_GPCDE_CALLBACK pfGPCDECallback);
Nvoid DrvGPIO_EnableEINT0(E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode, GPIO_EINT0_CALLBACK pfEINT0Callback);
Nvoid DrvGPIO_DisableEINT0(void);
Nvoid DrvGPIO_EnableEINT1(E_DRVGPIO_INT_TYPE TriggerType, E_DRVGPIO_INT_MODE Mode, GPIO_EINT1_CALLBACK pfEINT1Callback);
Nvoid DrvGPIO_DisableEINT1(void);
Nint32_t DrvGPIO_GetIntStatus(E_DRVGPIO_PORT port);
Nint32_t DrvGPIO_InitFunction(E_DRVGPIO_FUNC function);
Nint32_t DrvGPIO_GetVersion(void);
N
N#endif
N
N
N
N
N
N
N
N
L 4 "..\..\Driver\Src\NUC1xx-LB_002\Seven_Segment.c" 2
N#include "DrvSYS.h"
L 1 "..\..\Driver\Include\Driver\DrvSYS.h" 1
N/*---------------------------------------------------------------------------------------------------------*/
N/*                                                                                                         */
N/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#ifndef DRVSYS_H
N#define DRVSYS_H
N
N#include "NUC1xx.h"
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Macro, type and constant definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define DRVSYS_MAJOR_NUM 1
N#define DRVSYS_MINOR_NUM 02
N#define DRVSYS_BUILD_NUM 3
N
N#define DRVSYS_VERSION_NUM      _SYSINFRA_VERSION(DRVSYS_MAJOR_NUM,DRVSYS_MINOR_NUM,DRVSYS_BUILD_NUM)  
N
N//E_DRVSYS_ERR_UNLOCK_FAIL      Unlock protected register failed
N//E_DRVSYS_ERR_LOCK_FAIL        Lock protected register failed
N//E_DRVSYS_ERR_ARGUMENT         Incorrect Argument
N//E_DRVSYS_ERR_IPSRC            Incorrect IP clock selection
N//E_DRVSYS_ERR_IPDIV            Incorrect IP divider selection
N//E_DRVSYS_ERR_OUT_OF_RANGE     Clock setting is out of range
N//E_DRVSYS_ERR_REG_PROTECTED    The Register Write Protection function is enabled
N#define E_DRVSYS_ERR_UNLOCK_FAIL    _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 1)
N#define E_DRVSYS_ERR_LOCK_FAIL      _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 2)
N#define E_DRVSYS_ERR_ARGUMENT       _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 3)
N#define E_DRVSYS_ERR_IPSRC          _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 4)
N#define E_DRVSYS_ERR_IPDIV          _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 5)
N#define E_DRVSYS_ERR_OUT_OF_RANGE   _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 6)
N#define E_DRVSYS_ERR_REG_PROTECTED  _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 7)
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  PLL Clock Source Selector                                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum 
N{
N    E_SYS_EXTERNAL_12M = 0,
N    E_SYS_INTERNAL_22M = 1, 
N}E_SYS_PLL_CLKSRC;
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  IP reset                                                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum 
N{
N    E_SYS_GPIO_RST  = 1,
N    E_SYS_TMR0_RST  = 2,
N    E_SYS_TMR1_RST  = 3,
N    E_SYS_TMR2_RST  = 4,
N    E_SYS_TMR3_RST  = 5,
N    E_SYS_I2C0_RST  = 8,
N    E_SYS_I2C1_RST  = 9,
N    E_SYS_SPI0_RST  = 12,
N    E_SYS_SPI1_RST  = 13,
N    E_SYS_SPI2_RST  = 14,
N    E_SYS_SPI3_RST  = 15,
N    E_SYS_UART0_RST = 16,
N    E_SYS_UART1_RST = 17,
N    E_SYS_UART2_RST = 18,
N    E_SYS_PWM03_RST = 20,
N    E_SYS_PWM47_RST = 21,
N    E_SYS_ACMP_RST  = 22,
N    E_SYS_PS2_RST   = 23,
N    E_SYS_CAN0_RST  = 24,
N    E_SYS_USBD_RST  = 27,
N    E_SYS_ADC_RST   = 28,
N    E_SYS_I2S_RST   = 29,
N    E_SYS_PDMA_RST  = 32,
N    E_SYS_EBI_RST   = 33
N}E_SYS_IP_RST;
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  SYS IP Clcok Selector                                                                                  */
N/*---------------------------------------------------------------------------------------------------------*/
N
Ntypedef enum 
N{
N    E_SYS_WDT_CLK   = 0,
N    E_SYS_RTC_CLK   = 1,
N    E_SYS_TMR0_CLK  = 2,
N    E_SYS_TMR1_CLK  = 3,
N    E_SYS_TMR2_CLK  = 4,
N    E_SYS_TMR3_CLK  = 5,
N    E_SYS_FDIV_CLK  = 6,
N    E_SYS_I2C0_CLK  = 8,
N    E_SYS_I2C1_CLK  = 9,
N    E_SYS_SPI0_CLK  = 12,
N    E_SYS_SPI1_CLK  = 13,
N    E_SYS_SPI2_CLK  = 14,
N    E_SYS_SPI3_CLK  = 15,
N    E_SYS_UART0_CLK = 16,
N    E_SYS_UART1_CLK = 17,
N    E_SYS_UART2_CLK = 18,
N    E_SYS_PWM01_CLK = 20,
N    E_SYS_PWM23_CLK = 21,
N    E_SYS_PWM45_CLK = 22,
N    E_SYS_PWM67_CLK = 23,
N    E_SYS_CAN0_CLK  = 24,
N    E_SYS_USBD_CLK  = 27,
N    E_SYS_ADC_CLK   = 28,
N    E_SYS_I2S_CLK   = 29,
N    E_SYS_ACMP_CLK  = 30,
N    E_SYS_PS2_CLK   = 31,
N    E_SYS_PDMA_CLK  = 33,
N    E_SYS_ISP_CLK   = 34,
N    E_SYS_EBI_CLK   = 35
N}E_SYS_IP_CLK;
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  SYS IP Clcok Divider                                                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum 
N{
N    E_SYS_ADC_DIV,
N    E_SYS_UART_DIV,
N    E_SYS_USB_DIV,
N    E_SYS_HCLK_DIV
N
N}E_SYS_IP_DIV;
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  SYS IP Clcok Selector                                                                                  */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum 
N{
N    E_SYS_WDT_CLKSRC,
N    E_SYS_ADC_CLKSRC,
N    E_SYS_TMR0_CLKSRC,
N    E_SYS_TMR1_CLKSRC,
N    E_SYS_TMR2_CLKSRC,
N    E_SYS_TMR3_CLKSRC,
N    E_SYS_UART_CLKSRC,
N    E_SYS_PWM01_CLKSRC,
N    E_SYS_PWM23_CLKSRC,
N    E_SYS_I2S_CLKSRC,
N    E_SYS_FRQDIV_CLKSRC,
N    E_SYS_PWM45_CLKSRC,
N    E_SYS_PWM67_CLKSRC
N
N}E_SYS_IP_CLKSRC;
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  SYS Chip Clock Source                                                                                  */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum 
N{
N    E_SYS_XTL12M,
N    E_SYS_XTL32K,
N    E_SYS_OSC22M,
N    E_SYS_OSC10K,
N    E_SYS_PLL,
N}E_SYS_CHIP_CLKSRC;
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Power Down Type                                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum 
N{
N    E_SYS_IMMEDIATE, 
N    E_SYS_WAIT_FOR_CPU
N}E_SYS_PD_TYPE;
N
N
Ntypedef void (*BOD_CALLBACK)(void);
Ntypedef void (*PWRWU_CALLBACK)(void);
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define SYS functions prototype                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid     DrvSYS_ClearClockSwitchStatus(void);
Nuint32_t DrvSYS_ClearResetSource(uint32_t u32Src);
N
Nvoid     DrvSYS_Delay(uint32_t us);
Nvoid     DrvSYS_DisableBODLowPowerMode(void);
Nvoid     DrvSYS_DisableHighPerformanceMode(void);
Nvoid     DrvSYS_DisableLowVoltReset(void);
Nvoid     DrvSYS_DisablePOR(void);
Nvoid     DrvSYS_DisableTemperatureSensor(void);
N
Nvoid     DrvSYS_EnableBODLowPowerMode(void);
Nvoid     DrvSYS_EnableHighPerformanceMode(void);
Nvoid     DrvSYS_EnableLowVoltReset(void);
Nvoid     DrvSYS_EnablePOR(void);
Nvoid     DrvSYS_EnableTemperatureSensor(void);
Nvoid     DrvSYS_EnterPowerDown(E_SYS_PD_TYPE ePDType);
N
Nuint32_t DrvSYS_GetBODState(void);
Nint32_t  DrvSYS_GetChipClockSourceStatus(E_SYS_CHIP_CLKSRC eClkSrc);
Nuint32_t DrvSYS_GetClockSwitchStatus(void);
Nuint32_t DrvSYS_GetExtClockFreq(void);
Nuint32_t DrvSYS_GetHCLKFreq(void);
Nuint32_t DrvSYS_GetPLLClockFreq(void);
Nuint32_t DrvSYS_GetPLLContent(E_SYS_PLL_CLKSRC ePllSrc, uint32_t u32PllClk);
Nuint32_t DrvSYS_GetResetSource(void);
Nuint32_t DrvSYS_GetVersion(void);
N
Nint32_t  DrvSYS_IsProtectedRegLocked(void);
N
Nint32_t  DrvSYS_LockProtectedReg(void);
N
Nint32_t  DrvSYS_Open(uint32_t u32Hclk);
N
Nuint32_t DrvSYS_ReadProductID(void);
Nvoid     DrvSYS_ResetChip(void);
Nvoid     DrvSYS_ResetCPU(void);
Nvoid     DrvSYS_ResetIP(E_SYS_IP_RST eIpRst);
N
Nvoid     DrvSYS_SelectBODVolt(uint8_t u8Volt);
Nint32_t  DrvSYS_SelectHCLKSource(uint8_t u8ClkSrcSel);
Nint32_t  DrvSYS_SelectIPClockSource(E_SYS_IP_CLKSRC eIpClkSrc, uint8_t u8ClkSrcSel);
Nvoid     DrvSYS_SelectPLLSource(E_SYS_PLL_CLKSRC ePllSrc);
Nint32_t  DrvSYS_SelectSysTickSource(uint8_t u8ClkSrcSel);
Nvoid     DrvSYS_SetBODFunction(int32_t i32Enable, int32_t i32Mode, BOD_CALLBACK bodcallbackFn);
Nint32_t  DrvSYS_SetClockDivider(E_SYS_IP_DIV eIpDiv , int32_t i32value);
Nint32_t  DrvSYS_SetFreqDividerOutput(int32_t i32Flag, uint8_t u8Divider);
Nvoid     DrvSYS_SetIPClock(E_SYS_IP_CLK eIpClk, int32_t i32Enable);
Nint32_t  DrvSYS_SetOscCtrl(E_SYS_CHIP_CLKSRC eClkSrc, int32_t i32Enable);
Nvoid     DrvSYS_SetPLLContent(uint32_t u32PllContent);
Nvoid     DrvSYS_SetPLLMode(int32_t i32Flag);
Nvoid     DrvSYS_SetPowerDownWakeUpInt(int32_t i32Enable, PWRWU_CALLBACK pdwucallbackFn, int32_t i32enWUDelay);
N
Nint32_t  DrvSYS_UnlockProtectedReg(void);
N
N#endif
N
L 5 "..\..\Driver\Src\NUC1xx-LB_002\Seven_Segment.c" 2
N#include "Seven_Segment.h"
L 1 "..\..\Driver\Include\NUC1xx-LB_002\Seven_Segment.h" 1
N#ifndef __Seven_Segment_H__
N#define __Seven_Segment_H__
N     
Nextern void show_seven_segment(unsigned char no, unsigned char number);
Nextern void close_seven_segment(void);
N#endif
L 6 "..\..\Driver\Src\NUC1xx-LB_002\Seven_Segment.c" 2
N#define SEG_N0   0x82 
N#define SEG_N1   0xEE 
N#define SEG_N2   0x07 
N#define SEG_N3   0x46 
N#define SEG_N4   0x6A  
N#define SEG_N5   0x52 
N#define SEG_N6   0x12 
N#define SEG_N7   0xE6 
N#define SEG_N8   0x02 
N#define SEG_N9   0x62  
N
Nunsigned char SEG_BUF[10]={SEG_N0, SEG_N1, SEG_N2, SEG_N3, SEG_N4, SEG_N5, SEG_N6, SEG_N7, SEG_N8, SEG_N9}; 
Xunsigned char SEG_BUF[10]={0x82, 0xEE, 0x07, 0x46, 0x6A, 0x52, 0x12, 0xE6, 0x02, 0x62}; 
N
Nvoid show_seven_segment(unsigned char no, unsigned char number)
N{
N    unsigned char temp,i;
N	temp=SEG_BUF[number];
N	
N	for(i=0;i<8;i++)
N	    {
N		if((temp&0x01)==0x01)		   		   
N		   DrvGPIO_SetBit(E_GPE,i);
N		   else
N		   DrvGPIO_ClrBit(E_GPE,i);		  
N		   temp=temp>>1;
N		}
N		DrvGPIO_SetBit(E_GPC,4+no);	
N
N}
N
Nvoid close_seven_segment(void)
N{
N	DrvGPIO_ClrBit(E_GPC,4);	
N    DrvGPIO_ClrBit(E_GPC,5);	
N	DrvGPIO_ClrBit(E_GPC,6);	
N	DrvGPIO_ClrBit(E_GPC,7);
N
N}
